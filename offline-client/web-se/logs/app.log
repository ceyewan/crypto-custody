2025-04-26 17:04:19.336	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 17:04:19.337	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 17:04:19.337	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 17:04:19.338	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 17:04:30.367	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 17:04:30.368	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 17:04:30.368	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 17:04:30.379	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 17:04:30.382	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 17:04:30.384	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 17:04:30.384	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 17:04:30.384	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 17:04:30.384	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 17:04:30.384	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user"}
2025-04-26 17:04:30.384	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 17:04:30.384	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 17:04:30.384	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:04:30.384	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 17:04:30.384	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:04:30.397	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: join computation\n\nCaused by:\n    0: subscribe\n    1: ConnectFailed: failed to connect to the server\n", "execution_time": "12.433958ms"}
2025-04-26 17:04:30.397	[31mERROR[0m	utils/command.go:89	密钥生成失败	{"error": "exit status 1"}
2025-04-26 17:04:30.397	[31mERROR[0m	services/mpc.go:59	密钥生成命令失败	{"error": "exit status 1"}
2025-04-26 17:04:30.397	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 17:04:30.397	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user"}
2025-04-26 17:04:30.397	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "29.419208ms"}
2025-04-26 17:04:31.365	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user"}
2025-04-26 17:04:31.365	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 17:04:31.365	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 17:04:31.365	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:04:31.365	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 17:04:31.365	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:04:31.374	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: join computation\n\nCaused by:\n    0: subscribe\n    1: ConnectFailed: failed to connect to the server\n", "execution_time": "8.758292ms"}
2025-04-26 17:04:31.374	[31mERROR[0m	utils/command.go:89	密钥生成失败	{"error": "exit status 1"}
2025-04-26 17:04:31.374	[31mERROR[0m	services/mpc.go:59	密钥生成命令失败	{"error": "exit status 1"}
2025-04-26 17:04:31.374	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 17:04:31.374	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user"}
2025-04-26 17:04:31.374	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "9.190542ms"}
2025-04-26 17:04:32.367	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user"}
2025-04-26 17:04:32.367	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 17:04:32.367	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 17:04:32.367	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:04:32.367	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 17:04:32.367	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:04:32.389	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: join computation\n\nCaused by:\n    0: subscribe\n    1: ConnectFailed: failed to connect to the server\n", "execution_time": "22.062042ms"}
2025-04-26 17:04:32.390	[31mERROR[0m	utils/command.go:89	密钥生成失败	{"error": "exit status 1"}
2025-04-26 17:04:32.390	[31mERROR[0m	services/mpc.go:59	密钥生成命令失败	{"error": "exit status 1"}
2025-04-26 17:04:32.390	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 17:04:32.390	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user"}
2025-04-26 17:04:32.390	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "23.030291ms"}
2025-04-26 17:05:10.314	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user"}
2025-04-26 17:05:10.314	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 17:05:10.314	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 17:05:10.314	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:05:10.314	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 17:05:10.314	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:05:11.314	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user"}
2025-04-26 17:05:11.315	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 17:05:11.315	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 17:05:11.315	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:05:11.315	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 17:05:11.315	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:05:12.317	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user"}
2025-04-26 17:05:12.317	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 17:05:12.317	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 17:05:12.317	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:05:12.317	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 17:05:12.318	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:05:12.625	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "307.754ms"}
2025-04-26 17:05:12.625	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.310742167s"}
2025-04-26 17:05:12.625	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 17:05:12.625	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 17:05:12.625	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 17:05:12.625	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.311480875s"}
2025-04-26 17:05:12.625	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 17:05:12.625	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 17:05:12.625	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "037163a657bd24edd3c0f1474cba8eed0c4d432cefe482e70234b0c5e8eeacae5b"}
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "037163a657bd24edd3c0f1474cba8eed0c4d432cefe482e70234b0c5e8eeacae5b"}
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "037163a657bd24edd3c0f1474cba8eed0c4d432cefe482e70234b0c5e8eeacae5b"}
2025-04-26 17:05:12.626	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED"}
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 17:05:12.626	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED"}
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.72 KB"}
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 17:05:12.626	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED"}
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.72 KB"}
2025-04-26 17:05:12.627	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 17:05:12.626	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.71 KB"}
2025-04-26 17:05:12.627	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.26 KB"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.29 KB"}
2025-04-26 17:05:12.633	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED", "message": "\ufffdX\ufffd\ufffdi\ufffdSI\ufffd\u001e\ufffd\ufffdx\ufffd\ufffd\ufffd\ufffd\\\ufffd\ufffd\ufffd\ufffd&xU\ufffdk%\ufffd\ufffd\u0005,"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "80378A28CB6EBBB235F604530936EED5D9DEC2ED"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "A758BCCD69E85349801EE0A778F08395C35CFBB48AC2267855AD6B259AFF052C"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.25 KB"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.27 KB"}
2025-04-26 17:05:12.633	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED", "message": "\ufffd\ufffd\ufffd\ufffdx\ufffd\ufffd\u0012\u001ewi,V\u001b7\ufffdr\ufffd\ufffd\ufffdd\ufffd\u0003\ufffd\ufffdy\ufffd~\ufffdP\ufffd"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.26 KB"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.29 KB"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "80378A28CB6EBBB235F604530936EED5D9DEC2ED"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "AAFE94C478C3D5121E77692C561B37D9727F919DFD64BD039D9C79FD7E93508C"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 17:05:12.633	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED", "message": "\u000c!\ufffd\ufffdFݬ\u0018Y\ufffd\ufffdM\ufffd[\ufffdP\r\ufffdq\ufffdr'\ufffdu\ufffd3\ufffd\ufffdŞf\ufffd"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "80378A28CB6EBBB235F604530936EED5D9DEC2ED"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "0C21E8E346DDAC1859EEB34D8C5BB4500D8171EC7227B875D933EFBFC59E669E"}
2025-04-26 17:05:12.633	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 17:05:12.653	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 0, "total_records": 1}
2025-04-26 17:05:12.653	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 17:05:12.653	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 17:05:12.653	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED", "username": "test_user", "encrypted_key_length": 6441, "encrypted_key_der": "\ufffdg3\ufffd1\ufffd)\u0006\ufffd+B[\ufffd\ufffd\ufffd_\ufffde~\ufffd\ufffd\ufffdP\"1\u0013P\ufffd4\ufffd\ufffd\u0010<\ufffd}\ufffd\ufffd\ufffd\ufffd\ufffdAX \ufffdg\u000b\u001dgF\ufffd\u001fk\ufffd\ufffd\ufffd1\ufffd@\ufffdO\ufffdm\ufffd\ufffd\ufffd\ufffd\ufffd\u001a2ڵ\ufffd\ufffd\u0014֧Y\ufffdr\ufffd\ufffd\u00138}\u001e\u0003\ufffd\ufffd\ufffdǗ\u001e/_X\u0017\ufffd\ufffd\u0007\u0013\u000e\ufffd\ufffd\ufffd8\ufffdN\u001c\ufffd\ufffdBw\ufffd@\ufffd<k\ufffd\ufffd\ufffd/\ufffd\ufffd1\ufffd%\ufffd\ufffdpO\ufffdJ\ufffd=\ufffd\ufffdų\ufffd|\ufffd\r-c\ufffd\ufffd\u0005\ufffd>\ufffd\ufffd*H4Iյ\ufffd`\ufffd\u0011TR\ufffd\ufffdζ\ufffd\ufffd\ufffdr\ufffd\ufffdW=\ufffdlU\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd_\ufffd\ufffd'\ufffdu}|\ufffd\ufffd\ufffd(7\ufffd\r\ufffdq{ðx\ufffdR*X\ufffdq#r\ufffd\ufffd\u0016\ufffd\ufffd\ufffd\ufffdo\u0012\u001a\ufffdn{\ufffd\ufffd[{}\ufffdJ\ufffd\ufffd;\ufffdً\ufffd\ufffd\ufffd$\ufffd-\ufffdvk\ufffd)\u0013\ufffd\ufffd\ufffd\nlT\ufffd*a6\u0005 tk\ufffd;sd0\ufffd[\ufffd8Y~\ufffd\ufffd\u0017\u0007\ufffd{YM\ufffd\ufffd\ufffd]\ufffd3\ufffd/M0\ufffdX&}\ufffd{C\ufffd\ufffdw\ufffdb2\ufffd\ufffd\ufffdт\ufffdo\ufffdִ朅\ufffd3\ufffd\u0000\ufffd\u000b\ufffd̡/\n޽-\ufffdY\ufffd0\ufffd\u0008\r\ufffd`\ufffd\ufffdn\ufffd\ufffd\ufffd'/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdh\ufffd\"1\ufffd=\u0003Řxղ\ufffd~rg{\ufffd\u0010\ufffd\ufffdu\ufffd\u001f \ufffdL\u001e\ufffd\ufffd^o7\ufffdF8\ufffd\ufffd\ufffdv\ufffd;\ufffd\u0018P\ufffd\ufffdUW\ufffd\ufffdII[Ij\u0015\ufffd`w\ufffdw\ufffd>D&ȳ\u001e6\ufffdJ\ufffd\ufffd\ufffd\ufffd\u0000X\ufffd7@\ufffd\ufffd\ufffd\ufffd\ufffd\u001a5\ufffd\ufffd\ufffdl\u0008\ufffd˘\ufffd\ufffd\u0002\ufffd\ufffd!\ufffdת\ufffd\ufffdx,0\ufffd\ufffd:`\ufffd\ufffdקhy\ufffd\ufffd\ufffdf]\u000b\u001ei\ufffd\ufffdͬsl{\ufffd\ufffdp_\ufffdo\ufffd\ufffd\ufffdlw\ufffd\ufffdMڮ\ufffd\u001f:,\ufffdx\ufffd.\ufffd\ufffd\ufffd\u001d\ufffd\u0012\ufffdHi&\ufffd}\ufffd\ufffd\ufffd_Q\ufffd\u000f*T\ufffds\u0006\ufffd\ufffd\ufffd\ufffdNf:=,q\ufffdH\ufffd\ufffd\ufffd֢Л\ufffdc\ufffd\ufffd\ufffd\"\ufffdp\ufffd\u0012\ufffda\ufffd\ufffd\ufffd\ufffdqqj\ufffd負\ufffdrs=\ufffduk\ufffd\u0001\ufffdv\u0016'\ufffd\ufffd$\ufffd\u0000$\ufffd\ufffd:\t\n\ufffd\ufffdirl\ufffdߖ^\ufffdaqة.\u000ePb\ufffd\ufffd\ufffd\ufffd\ufffd\u000e\u0002\ufffd\ufffdS\ufffd\u0000\ufffdJ\ufffd\u0012C\ufffd\ufffdnS\ufffdQ\u0010\ufffd\ufffd\u000f\ufffd\ufffd\ufffd\ufffdg\ufffdR\ufffd.\ufffd\ufffdf\u00104\ufffdd\u0012$\u0000f'v\ufffd=\ufffdq\ufffd\u000b[c=+\ufffd1\ufffd˕*l\ufffd0i\u0003#DRy\ufffdc\ufffd\ufffd\ufffd\ufffd\ufffd\u001d\ufffdv\n]Y\ufffdd\u0018\ufffd9]\ufffda\ufffd(b7b\ufffd\ufffd\ufffdgzpk|E\u000e9\u001b'ٖ_?\ufffd\u0012Mh\ufffd^\ufffd \ufffd\u0019B\ufffdE\ufffd<\ufffd\ufffd\u0004`\ufffd]\t\u000f\u0004f·\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdzQn٧ա\ufffd\ufffd\ufffd\ufffd9\ufffdL\ufffdM\ufffd\ufffdLy\ufffd\ufffd\ufffdκ\u000bXX\ufffd\t\u0004Sk\u000f\ufffdq\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdsG\ufffd\u0000\ufffd@뿡\ufffd\u001b\ufffdr\"X\ufffd9\ufffd\ufffdt\ufffd\ufffd\u0017\ufffd@\\\ufffd\ufffd\ufffd\u0016\ufffd!\ufffdݽf\u0012\ufffd?\ufffd1P,\ufffd\ufffd\ufffda4\u0018\u001f\ufffd.\ufffdt\ufffd~\ufffdF\u0012\ufffd\ufffd\ufffdޓ3,y\ufffdQꈣNI\ufffd\ufffdP{d\ufffd\u000f*\ufffdF\ufffd\ufffdn\ufffd\ufffd]\ufffd\ufffd\u0011m\ufffdN\r`\ufffd\n\ufffd:\ufffdo\ufffd\u0013p\ufffd\ufffd\u0005\ufffdU\ufffd\u0013\ufffdr\ufffd\ufffd\u0003?>P\u0010\ufffd\ufffd\ufffd*\ufffdg\ufffdl\ufffd\ufffdIt\r\ufffd\t\u001c'.˵\ufffd\ufffd4\ufffd\ufffdu\u0015\u001c\ufffd\ufffd6\ufffd\u0003\ufffd\ufffd\ufffd@\u0015k\ufffd\ufffd\ufffd\u0011\ufffd\ufffd\ufffdl0\ufffd\ufffd#\ufffd)\ufffd\ufffdh/j\ufffd\u001agre\ufffd|\ufffd\u001d\ufffd\ufffd_d(\ufffd\u001c\ufffd\u000b\ufffd\ufffd}Ί\ufffd\ufffd^{\u0002\ufffd\ufffd\ufffd\ufffdde\ufffdj8\ufffd\ufffd=\ufffdd\ufffdD\ufffd;y\"\ufffd\ufffd\ufffd\ufffd\u0003\ufffd\ufffdM\ufffd\ufffdap\ufffd\ufffdz\ufffd#\ufffdW\ufffdzSݰg\ufffd\ufffd\u00052\ufffdU\ufffd\ufffd\ufffd\ufffd\ufffd3\u0016\ufffd\ufffd\ufffd5u\ufffd\ufffd5\ufffd\ufffd\ufffd]B\ufffd\u0017\ufffd\ufffd\ufffdF\\\ufffd\ufffd\ufffd8\ufffd>Bk\ufffd[~\ufffd\\\ufffd\ufffd-\ufffd\u0016\ufffdԣG\ufffd\ufffd4\u0016\u0006\ufffdK\ufffd\ufffdK0\u0002\ufffd\u0018\ufffd\ufffd\ufffd7\ufffd=\ufffdA1|7\u000cUW\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdb2\ufffd喐77-\ufffd\ufffdG\ufffd\ufffdl\ufffdrpB\ufffd}\ufffdo\u0017\ufffd\\Mz\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u000f/^\ufffda\u0014߫j=\ufffd-\ufffdY\ufffdG\ufffd\ufffd\u0003\ufffd\u0000\ufffdZ6\ufffd}\ufffd\ufffd\ufffd\ufffdC\ufffd\u00038\u001a՝?*\ufffd\ufffdoǻ\ufffdҭ\ufffd'\ufffd\ufffd\ufffde\ufffd6&*\ufffd2\u000c\ufffdqj\ufffd@p\ufffd\ufffdy}4\ufffd\ufffd\ufffd\u0008\ufffd\u0006\ufffd\r.X\ufffd\ufffd1\ufffd7\ufffd`\u001b\ufffd\u0017\ufffd\ufffd\u0000\ufffd\ufffd;F\ufffdߑo\u0007\u0018\ufffd\ufffd\ufffdc\ufffd\u0010y\ufffd\u000eU#\ufffd)\ufffd\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0006Ua\ufffd\ufffd\u0014!\ufffd\r?\ufffd\ufffd\ufffdZ?\ufffd6ei\ufffd\ufffdX43\ufffde\ufffd\ufffd\ufffd\ufffd\u000b\ufffd\ufffdLc71ȵ\ufffdl\ufffdZ\u0012\u0010\ufffd\ufffdO`\ufffd\u0011\u0007$\ufffd\ufffd\u0005:NݴU\ufffd\ufffd\u0014Q\ufffd\ufffdEf\ufffd\u001fj\ufffd~\ufffd\ufffd\ufffd_\u0016\ufffd|\ufffdۄ\ufffd_\ufffd$P\ufffd\ufffdGE\u0005\u0017\ufffd\ufffd\ufffdTO?j䃶\ufffd\ufffd\ufffd\ufffdz\ufffd\ufffd\ufffdk\ufffd(\ufffd\ufffd'm\ufffd\u0013<\ufffd\u00014\ufffdJ\ufffd\ufffdیg\u0002\u0005\ufffd\ufffd\u0007؆\ufffd\u000f\ufffd8\ufffd\ufffd\ufffd]\ufffdzy}6\u0005\ufffdf\ufffd\ufffd\ufffdaU'\ufffd*D\ufffd\ufffd\ufffdt\u000e$\ufffd/\ufffd\u0000#\ufffd\ufffd\ufffd\ufffd\u0010\ufffdf\ufffd\ufffd\ufffd?\ufffd\u0012\ufffd\ufffd\ufffd\ufffd\u001b\ufffd\ufffd\ufffd\ufffd\ufffd\t\ufffd\ufffds\ufffd~\u001dRf2<s&y\ufffd\ufffd\ufffd\ufffdM\ufffd\ufffdnyU\u0013B6\ufffd\ufffd\ufffd\ufffd\ufffd\u0011\ufffd\ufffdi{\ufffdWt)\ufffd\ufffdP\ufffd\ufffdSӾ&\ufffd\u0003wz\u000f\ufffd\ufffdZ\ufffd/E\ufffdM\ufffd\u0012\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd9\ufffd\u0012D\u00084*\ufffd\u001b\ufffd a\ufffdȟ\ufffd,\ufffd\ufffd\ufffd\ufffd`6\ufffd]\ufffdZ\u001c\ufffd;%0\u0003\ufffd\ufffd\ufffd\ufffd֏T\ufffd\ufffd\ufffd\ufffd\u0007\ufffdw\ufffd5/\ufffdw\u001d)\ufffd\ufffdy\ufffd\ufffd\ufffd6p\ufffd`ݸ#\ufffds;\u000e\ufffd8\ufffdZJ\ufffd\u0005\ufffd\ufffd\ufffd\u0002@\ufffdg\u001bT\u001ap*\ufffd\u0019\ufffd\ufffd\u0014\u001cU\ufffdKvJ\ufffd8\ufffdr*[h\u001c\u000e\ufffd;7\ufffdi\ufffd\ufffd\ufffd<\t\u0016f8;]7@]9\ufffdQ\ufffd\u0001\ufffd\ufffdE5F\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffdr\ufffdh\u0011\u0017Q\u001en\ufffd\ufffd\u001d1\ufffd\ufffd\u001c\ufffd\ufffd\ufffd$\u001bl\u0006\ufffd8\u0005\ufffd\ufffdݸ\ufffd\u0004\ufffd\ufffdLI\u001bJ\ufffdc\ufffd\ufffd0y\u000b\ufffdLh\u0007D\ufffd%\ufffdaf2u\ufffd7\u0016\ufffd\ufffd\ufffd\ufffdd\ufffd\ufffde\ufffd\ufffdwfG\ufffd8ݫ\ufffd\u0003,v\ufffd\ufffd\ufffd\u001b\u0008݅\ufffda\u0013ʽ<*\ufffdD\u0002\ufffd\ufffd\u0015\ufffd-Y-\ufffdD\u001c\ufffd\ufffd\ufffd\ufffd'qس?\ufffd\ufffdH\ufffdx\ufffd\u0019\\\u0013t\ufffd3/\ufffd\ufffd\ufffdg\u00178͒\ufffdJ\ufffd\u0011\u000fP\ufffd\ufffd͵Z\ufffdx\ufffd\ufffd\"\tX\u0014\ufffdk\ufffd\u001f\ufffd\ufffd@ȢJp\\\ufffd̆J\ufffd\u0000>\ufffd/\ufffd\ufffd\u0003n\ufffdj\ufffdT.fC\ufffdC\ufffd\ufffd\ufffdU\ufffd)\"R1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffda#!uX\ufffd*/\ufffd;\ufffdT:3\ufffd\ufffd\ufffdD\u0002z۬t\ufffd\r\ufffd\t\ufffd[\ufffd\ufffd\u001a\ufffd\ufffdbz1c\ufffd\ufffd\ufffdpO\ufffdj\ufffdv\ufffdd.\u001a\ufffdپ\ufffd\ufffdEUC@\ufffd\u0001N\ufffd\u0011͞m\ufffd\ufffd1Y$ٰ\ufffd\u000et̂\ufffd\u0012\ufffd\ufffd\\\ufffd\u00085\ufffd\ufffd\u000e'.\ufffdQj\ufffd@!\ufffd\ufffd~\ufffdy]\\\ufffd\ufffd\ufffd\u0005\ufffd\ufffd^\u0001S,\t\ufffd>\u000eq\u000b&\\xd\ufffdy\ufffd\\\ufffd\u001e\ufffd\u0012?q\ufffd&\r\u001b\ufffd\ufffd\ufffd.\ufffdke\ufffdy\n*\u00082\ufffd\ufffd\ufffdZ\ufffd\u001e\ufffd\u0006\ufffd<\ufffd8I<\ufffd܋\ufffd3]\u0003'\ufffd\u0010ȋ\ufffd}\u0003\ufffdt\ufffd*x\ufffdw\ufffd\ufffd>\ufffd\ufffdγf\ufffdAL\ufffd\u0015\ufffd\ufffd\u0008ׄ\u001eJ\ufffd\u0001\ufffd\ufffd\ufffdy\u000e\ufffdq.g+,\t\u0000\ufffd\ufffd\ufffdp\ufffd\ufffd\ufffdX:\ufffdϏȨk:F\u0015\ufffd\ufffd]\ufffd\\\ufffd\ufffdw\ufffd\ufffd̴\ufffd~\u0007\ufffd\ufffd\ufffdb7b\ufffd\ufffdC\ufffdS,\ufffdD\ufffd\ufffd\ufffd1\ufffd\u0008\u0001\ufffd\ufffdʳ\ufffd3g\ufffd\r\ufffd\ufffd\ufffdT\n\ufffd)<\ufffd/\u000cJt\ufffd\ufffd\u0005\ufffd賔/N!\u001chK\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdy0\u00124A\ufffdyĻ\ufffdz9\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd5\u000b\n\ufffde&m\ufffd\ufffd\ufffdՏw\ufffd\ufffd\ufffd2H\ufffd>&8P\ufffd\n\ufffd\u0015ޗ\ufffd\ufffdj}|Nf\ufffd\ufffd\ufffd\ufffd\ufffdN\u000b\ufffdP3'\ufffd\\=\ufffd%d\ufffd\u0012ƌ\ufffd\ufffd\ufffdL<\ufffd\ufffdZCd\ufffd\ufffdc\ufffdXIҒ\ufffd\ufffd\ufffd^`M\ufffd\ufffd^\ufffdq\ufffd\\\ufffd\u0018;Owa\ufffd\ufffd^\ufffd\ufffd\ufffd\\\ufffd\ufffd\ufffd\u0007/\u0015L\u001c\u000c\ufffd\u001a7\ufffd\ufffdG\ufffd'{\ufffd5\ufffd\u0004\ufffdZ\ufffd\ufffd}q\u0007\ufffd\u001fV\ufffd*\ufffd\ufffdZ\u00116\ufffd\ufffd\ufffd\ufffdU_\ufffdc~\ufffd\ufffd\ufffd-\ufffdE\ufffd*\ufffd\ufffd,\u0003+\ufffd!ǀ\ufffd\ufffd\ufffd\ufffd\ufffdf\ufffdl\ufffd4\ufffd\tW=\ufffdZ(\u0003\ufffdp\ufffd\u0003\ufffd\u001e2\ufffd\ufffd\ufffd\u000c\ufffd\ufffd#6_?5\ufffdt\u0018\ufffd\ufffd\ufffd]\u001ej\ufffd\ufffdJS\ufffdQ\ufffd\u0005\ufffdQ\u0015+\ufffd\u0013\u001fV!\ufffd铧\ufffd\ufffd\ufffdR>ݦ\ufffd\ufffd\ufffdX\ufffd\ufffda\ufffdzF)\r\u0001\u001bQ\u0004\u0010\ufffdn\ufffd\ufffdP|\ufffd\u000eo\u001f\u0016\u001d\u0017P\ufffd\ufffd\t\ufffd\u0016ǭ\u000f+F\ufffd@\u0002\u001b\u0014E\ufffdx\ufffd=5\ufffd˒\ufffd\ufffd\ufffd9\u0007m\ufffd}\ufffd\ufffd\u0008l@E\ufffd\ufffdǐM\ufffd~\ufffd?\ufffd@\ufffd\u0011\ufffd`\ufffdNR\ufffd\u0013S_AZ\ufffd\ufffd\ufffd\ufffd;\ufffd0ȱ?\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\ufffdސ\ufffdV|5ݴ}\ufffd\ufffd\ufffdn\u0004TE\"կh\ufffdֿ\ufffdqr\ufffd\ufffdx\ufffdk>\ufffd'\ufffdx\ufffd[F󊌰m\u0016\u0001\ufffd\ufffdy\ufffd\ufffd\u000c٢\ufffd\ufffdtH\ufffd\ufffdE\ufffd.\ufffd+\u0016\ufffd\ufffd\u0006\ufffd|1O`\ufffd\ufffdw\ufffd\u0006\ufffd}\\\ufffd\ufffd\ufffd\ufffd\ufffdO\ufffd\ufffd\t\ufffdJ\ufffd\u0005\ufffd\ufffd\u0008=x{\u0011`\ufffdDc\ufffdX\ufffd\ufffd\u0010<1\ufffd\u0013\ufffd\ufffd\ufffd景<\ufffd\ufffd\ufffd\u0001\ufffd\ufffd\u000c\ufffdT\ufffdD\ufffd^\ufffd\u0018t\ufffd\ufffd\u0013X\ufffd\ufffdȎ\ufffd\u0013\ufffd\ufffd\ufffd=8ͤE\u00034)6$\ufffd\u0012ݣ\ufffdRr\ufffdBi\ufffd\ufffd4i\ufffdڽW\u000fz\ufffdČW\ufffd\ufffdGu\ufffd\ufffd\ufffd\t\ufffd\u0017\ufffd\u000c\ufffd\ufffdUq\u0018\ufffd\u0019\ufffd\ufffdb\ufffd\u001f\ufffd9\ufffd8w\ufffdƵ{\ufffd\u0006g\ufffd\ufffd\ufffdmu\ufffd\ufffdY\ufffdRba\ufffdG\u0018\ufffd,_\ufffdS\ufffd\ufffd\ufffd\ufffd\ufffdp@Ez\ufffd\ufffd\ufffd[R\u001b\ufffd\u000f\u0017\u0008F\ufffd\ufffd\ufffd\ufffdy\ufffdV\ufffd\u0013\ufffd\u0013\u0013t\ufffd\ufffd9\ufffdĥY\ufffd\ufffdm\ufffdj\ufffd\ufffd@/wG\ufffd\u00157k\ufffd\ufffd\ufffd\ufffdX|c{\ufffdgZ\ufffdR\u0016\ufffd\ufffd\u000ekbx\ufffd\u000b\ufffdV\ufffd\ufffd\ufffdb\ufffd\u0000G\ufffd\ufffd\ufffd`\ufffd\ufffd\u00123~Se\ufffd\ufffdDف\ufffd#M\ufffd\ufffdQ\u0019\ufffd\ufffd\ufffd\ufffd^\ufffd|\ufffd\ufffd\ufffdz\ufffdd\u00043\ufffd^\ufffd\ufffdn\ufffd\ufffd\ufffd.\ufffd\u0001\ufffd\u0012N$\ufffd?\ufffd\ufffd\ufffd\ufffd \ufffd\ufffdN\ufffd\ufffdݦ\ufffdߵ\ufffd\"ї\u0004\u0005\ufffd˴\ufffd\ufffd\u0011L\ufffd\u0010\ufffd?\ufffdR\u000f\ufffdz&\ufffd\ufffdWʦ\ufffd\ufffdN\ufffd\ufffd݋\ufffd\ufffd\ufffd\ufffdú\ufffd\ufffdT\ufffd]o\ufffd\ufffd\u000co\ufffdm\ufffd\ufffd\ufffd\ufffdϻVUBe\ufffd\ufffd1\ufffd\ufffd\u0017&A&\ufffd\ufffd\ufffdΚ\ufffd\ufffdç\ufffdx>\ufffd\"\ufffdv\ufffd%c\ufffd<W\u0017\ufffdh\"0\u0013\ufffd\u0019\ufffd\ufffdU\ufffdQ\ufffd\u001fTsM\u000e&M\u000co\ufffd\ufffd\ufffd\ufffd\ufffd\u0019\ufffd5\ufffdL1\u0007Yv4\\\\\ufffd@mzR\ufffd5+\ufffd\ufffdA\ufffd\n\u0000t(\ufffd\ufffd\ufffd\ufffd\ufffdh\ufffd?_\ufffd\u000c\ufffd?\nJɫg\ufffd\ufffd\ufffd)\u000f\ufffddG\ufffd7y\ufffd,H\ufffd\u0001 \u0013\ufffd\u001a\ufffdV\ufffd.g\ufffd\ufffd,\u0002n\ufffd`NA+2\u0015\u0013\ufffd}\n(\ufffd\ufffdh\u001d\u0018\ufffd\ufffd\u0008\ufffd\ufffd\ufffd\u0000?\ufffd+m⠣\ufffd(;\ufffd\ufffdY\ufffdvc\ufffd۹\u0007\ufffd2\ufffd\u00051\ufffdc\ufffd֓\ufffd\ufffd\ufffd\ufffd\ufffd-Z}\ufffd\ufffd@\ufffdãM\u0015\u0016\ufffd\ufffd\ufffd#\u001a\ufffdk\ufffdC\ufffd\ufffd\u001a\ufffd6\u001a\ufffd\u0001\u0010V^Kf\ufffd\ufffdUG\ufffd\ufffdF\ufffd0\ufffd0\ufffd\u000fcJ\ufffd\ufffd6\ufffd\ufffd\ufffd}/d\ufffd\ufffd\ufffd\ufffdƦ\u0002]\ufffd\ufffd\ufffd\u00073u4\ufffd&\ufffd\u0016\ufffd\ufffd\u0011x\ufffd\ufffdٲ.\ufffd\ufffdRc:p\u00028j\t76\ufffd\ufffd!\ufffdR\ufffd\ufffdU\u0000r\u0013S\ufffdpeI\ufffdn\ufffdTg\ufffd۱\ufffdӭ\u0019\ufffd\ufffd\ufffd\ufffd<#\ufffd\ufffd\ufffd>\\\ufffdA\ufffd\u0001\ufffd\u001c\ufffdHӣS\ufffdOډ\ufffdW\ufffd\ufffdHHpة8\ufffd\ufffd\u001c\ufffd(\ufffdj\ufffdC\ufffd\ufffd4Pr\ufffd7t\ufffd\ufffdP\ufffd\ufffd2\ufffdͶ\ufffd\ufffdD\ufffd\ufffdT\ufffd~\ufffd(UxFO\u001an\ufffd\ufffd\u0006ف%H7\ufffd\ufffd@+\ufffd\ufffd\ufffd/\ufffd\ufffd\u0014J\ufffd\ufffd\ufffd)׸\u0005\ufffd\ufffd\ufffdH\ufffd}\ufffdBK\ufffd#%a\u000c43(\ufffdgC\r\ufffd\ufffd`m\ufffdp\ufffd\ufffd!)7RT\ufffd*\ufffd+\ufffd\ufffdjS\ufffd\u0015\ufffd\ufffd\ufffd%[\u0007\ufffd+\ufffd\ufffd\ufffd\ufffd\u000f\ufffd׋\ufffd05\u0014\u0019a@\u000401\ufffd\ufffd\u0003;\"\ufffd\ufffd\\\u001eӅ\ufffdo\ufffdD\ufffd\\\ufffda\ufffdV\ufffdC\ufffd\ufffdC\ufffdfGI\ufffd\ufffdr\ufffd@P\u0003\ufffd\ufffdO\ufffdcC\ufffd\ufffds \ufffdօ\ufffd6\ufffd\u0013 2KG\ufffd;\ufffd\ufffd\ufffdH\ufffd\ufffd~\u0018{\u0018dL\ufffd\u0012\ufffd#\ufffd\ufffd\r@\ufffd\ufffd\ufffdr\ufffdB\ufffd\"k\u0006\ufffd\ufffdM\ufffd\ufffd\ufffd3\ufffd\ufffd\u0015dR\ufffd\ufffd\ufffd\ufffd\u0015\ufffd\u0018\ufffd\\_\u0000\n\ufffd\ufffd]ۿ\ufffdxB\ufffdus\ufffdR\ufffd\u001a\u0000)\ufffdZfI\ufffdN\ufffd\ufffd\ufffdv\ufffd`\ufffd\ufffdT\ufffd\ufffd\ufffd\ufffd\n̎\ufffdN\u001fW=\ufffd!\ufffdZl\u0000\u001e{\ufffdĂ|\ufffd\ufffdG\ufffd\ufffd\ufffdi\u0012\ufffd)4@O\ufffdD\ufffdF޲Z\ufffd\ufffdn\ufffdhL]\u001bD7\u0003\ufffd\u0013\ufffd\u0016\ufffdt>\ufffdPr\ufffdo\ufffd\u0018Vz\ufffdj\ufffd\ufffd5JKċ\ufffdWx&s(F8\ufffdz\u0018\ufffd\u001e\u00196\ufffd8\u001b\ufffd,\ufffd\ufffdә\ufffds\u0005\ufffd5\ufffd\ufffd\ufffd\ufffd\ufffd\u0005X\ufffda\u0008\ufffd\ufffdvK\u0003\ufffdr@=\u0007'\ufffdhj^j\ufffd\ufffd\ufffd~yU{]\ufffd\ufffd\ufffd\ufffd\u0018\u0014\ufffd\ufffd\ufffdˡ\ufffd\ufffdo\ufffd-\ufffd\u0010\ufffd\ufffdg\ufffdQ\ufffd\ufffd~\ufffd\u0007Ϳ\ufffd\ufffd鞐J\ufffd\ufffd\ufffd~\ufffd\ufffd\ufffd|\ufffdl\ufffd\tX\u0003 \u0018EZ\ufffd\u0018vCrͱ\u000ba\ufffd\u0010\ufffd\ufffd(\ufffd\ufffd\u0015\ufffd\ufffd\u000e\u0019m80\ufffd{\u0005\ufffd\ufffd)m{ \ufffdO\ufffdG\ufffd\ufffda\ufffdp\ufffd\ufffd\u0016\ufffd_-\ufffd~\ufffd\ufffd\ufffd\ufffd\ufffd\u000b\u001e7!ȱ}\ufffdUZC\ufffd-\ufffdsTn\ufffd\u000eu\ufffdZP,ì\ufffd\ufffdW\ufffd\ufffdˊ\ufffd\\x'\ufffd8\ufffd\ufffd\ufffdS\ufffdu\ufffd\u0011\r\ufffd\ufffd@\ufffd\u0008\ufffd-\ufffdJO\ufffd\ufffdײ\ufffd\u0000\ufffd3\ufffd3\ufffd\ufffdf\ufffdH\ufffd>\u0016\ufffd}\u001fh\ufffdR\u0000k\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffd\u0019\u000e\ufffd\ufffdשP\ufffdp\\DX\ufffd\ufffd|\ufffdOT\ufffd\u000c\u0014g\u0001x\ufffdC=\ufffd\ufffdI\ufffd\ufffdi\ufffdz\ufffd\ufffd܂\ufffdw_\u001c\ufffd\ufffdRAS\ufffd\ufffd\u0008X~W\ufffd|\u0000N\ufffd/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd%6\ufffd\u0003\ufffd\ufffd#\ufffd\\\ufffdIHedB\u0007\ufffdٰ\ufffd\ufffd6\u0013^\ufffdgd\ufffd6S\ufffd\ufffd̔)ks\ufffdl\ufffd\ufffdQ\ufffd\u0014\ufffd\u000f\rC8cN\ufffdKd#5lOu\ufffd\u000f\u001a\ufffdZ\ufffdLb'\ufffdm\ufffd\u0007\u0016y\ufffd\ufffd\tq%M\ufffd(.2\ufffd1\u0007P(u\ufffd\ufffd'\ufffdJ\ufffd\u0012\ufffdq\ufffd?\ufffd\ufffd\ufffdka\ufffd1n[\ufffd\ufffdJ\ufffddf\ufffd@z\ufffd\ufffdڗa\ufffd\ufffdn}\ufffd\ufffd\ufffdu\ufffd\ufffd\u000c\u0008\ufffd*w\ufffd\ufffd\u0014\ufffdm\ufffdm1\ufffd\ufffd -i\ufffdq\u0015\ufffd3\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd=(\u0002\ufffd\ufffd\u001b\ufffd\ufffd>\ufffd\ufffdMbj\ufffd\ufffd$\u001c\ufffd\ufffd \ufffd\ufffd\u0012\ufffd\ufffd\u0011E&\"'\ufffd\ufffd\ufffd-G\ufffd\ufffd!_\ufffd\ufffdz\ufffd\ufffd\ufffd\ufffd\ufffdS\\ɽ\ufffdD\u000edȏo\ufffdٙ7\ufffd\ufffdf\ufffd\ufffd\ufffd\u0019\ufffd\ufffdM\ufffd\ufffdE\ufffd\u0015\ufffd\ufffd_gW6\ufffd\ufffd\ufffdճ3\ufffd\ufffd\u000f\ufffd\ufffdJM~0@\ufffd\ufffd|\ufffd[\ufffdχL\ufffdc2\ufffd\u001c;\u001ey\ufffd^\ufffd\ufffd)\\n!-x7i[\ufffd\ufffd]oQ\ufffd\ufffdo\ufffd{\ufffd\ufffd詶\ufffd\ufffd\ufffd\u0008b\ufffd\ufffd\ufffd\ufffd~+5\ufffdv\ufffdM\ufffdF\ufffd\ufffd\ufffdZ\ufffd\ufffd\u0010\ufffdS\ufffdb\ufffdx\ufffd\ufffd{\ufffdS|\ufffd\ufffd\ufffd.\u0014e\ufffd\u001f\u0007\ufffd\ufffd\u0002\ufffdWdk\ufffd\ufffd,A\ufffdآ\u001f5*\ufffd̆[z2\ufffd5\ufffd0<4n\ufffd:\ufffd\ufffd\ufffdj\ufffd-\u001ct8_\ufffdZt9\ufffd\ufffd\ufffd(4\ufffd\ufffd/\n\ufffd~5LD\n\ufffd\ufffd)C\ufffdv\ufffd,\ufffd\ufffd,\t\ufffd\ufffd\u0019\ufffdG{\u0010$\u0010\ufffd\ufffd\u0001\ufffd\u0017\ufffdR>5}\u001a\ufffdv\ufffd\ufffdEm\ufffd&\u0002\ufffd\ufffdA\ufffdꆌC\u001bXWΒ\ufffd\ufffd^\ufffd\u00054l\u001dK1\ufffdu\ufffd\ufffd\ufffd\u001d\ufffd\u0003:\ufffd\t\ufffd\ufffdL\ufffd\ufffd\ufffdw\u001aN\ufffd\ufffd\ufffdz\u0006\ufffdRàK\ufffd\ufffd$~\ufffdHܤ+[\ufffd\u000b5ʼ\u0011l0-\ufffdƍ\ufffd7\ufffd~+\ufffd\ufffd\ufffdZ\u0001HĠ\ufffdd\ufffdp\ufffd\ufffd\u0007\ufffdh*V\ufffd\ufffd\u0002\ufffd-`c\ufffd\u0006`z\ufffdڭT7\ufffd\u001f1\u000b\ufffdװ8\u0004\ufffd\ufffdj\ufffd\ufffd\u001c6l\u0013\ufffd5\ufffd\ufffdqryD\ufffdb\u000b*6\ufffd+\ufffd\ufffd\ufffdk\u0006BFx5\ufffds\u0012\ufffd\ufffd\ufffd\ufffd\ufffd҇\ufffd\ufffd\ufffd\u001bK6K\ufffd\ufffdT\ufffd\ufffdU\ufffds`\ufffd6X\ufffd[\u0001\u001e\ufffd-g`Η2H)R<&\ufffdh\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\u000c7\u001e\ufffd6\ufffd\ufffd\ufffdG\ufffd\u001e\ufffd[\ufffd\u0002\ufffdq\ufffd\ufffd\ufffd\ufffd\ufffd\u0006\ufffdEʄ\ufffdN\ufffd%\ufffd\ufffd!2\u00008kh\ufffd\ufffd\ufffd\ufffdR\ufffd$\u0008܇\ufffd䰨\ufffd\ufffd\ufffd\ufffd}\ufffd\ufffdޡ\ufffdJ\ufffd\u0015\u0000\ufffdC\u0012\ufffd\ufffd\u0015\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd9V&g\ufffd\ufffdN\ufffd\ufffd\ufffd\ufffd\ufffd\u0007\ufffd=\ufffd\ufffd\ufffdF\u0014\ufffd\ufffd\ufffdm#\ufffd\u000foyNKL\ufffd\ufffdeD\ufffd\ufffdp5\n0\ufffd\ufffd\ufffd${\u0017L\ufffdX\ufffd\ufffd\n\u000f\ufffd\ufffd\ufffd\r\ufffd\ufffd\ufffd+\ufffd\ufffdSς\ufffd;\ufffdw\ufffd\ufffd\u0006SLF\ufffd/]\ufffd\ufffd\ufffdH\ufffd\u001e\ufffd\ufffd\ufffd\ufffdi,w\u0005K\u0002\ufffd\ufffd\ufffd|\ufffdِ\ufffd-\ufffdW\u001d\u000e0\u0019\ufffd\u001e\ufffdP\u0017&\ufffd\ufffdl\ufffd_\ufffd\u0007ՊF\ufffd_\ufffd\ufffdǄ\n\u0007\ufffdn:\u0007\ufffdo\ufffd9\ufffd\nTa\ufffd\ufffd3\ufffd6\ufffd\ufffd>\ufffdí\ufffd\ufffdƎ\u001d֕'ö\t\ufffd\u001au\u000c\ufffd\u001b\t\ufffdi_\ufffdC\u001e\u0000K\u000c\ufffd1\ufffd\ufffdK\ufffdY\ufffd\ufffd\ufffdY\ufffdQ\u0003'\ny\u0012r\u0004'R\ufffd\u000c\ufffd]z\u001ebU\r^\ufffdp.\ufffd\ufffdX(\ufffdڅ\ufffd\ufffdT\ufffd\u0016\ufffdhDc\ufffd-\ufffd!Z\ufffd\u000e\ufffdm^\u0004Ӻ0 pLU\ufffd\ufffd5\ufffd\ufffd\u001cm^\"sS\ufffd\ufffd%\ufffd\ufffd\ufffd\ufffd\u0005\ufffdF\u001d\ufffd\u000b\u000bЮJ\ufffdh\u001b8\ufffd\u001ew\u001f\u0015\ufffdm?@\ufffdJ}\ufffd\u000b*\ufffd5\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffd_\ufffdv\u001b\ufffd\u0006\ufffd@\u001e8\ufffd\r\ufffd\ufffddy\ufffdx\ufffdg\u000f\ufffd\ufffd\ufffdy\\\ufffd\u001e\u0012\u0008\ufffd0\u000b\ufffd\u000b\u0005\ufffd\ufffduZ\ufffd\u0002\ufffd^\ufffdH~8\ufffd~j\ufffd\ufffdbl\ufffd\ufffd @\ufffd\ufffd\ufffd_Y\ufffdH;\ufffd\ufffd\ufffd|\ufffd\ufffd\u0016w\ufffd\u0017\ufffd\ufffdg\ufffd\u0013\ufffdu;Jگ1<?\ufffd\ufffd\u000eS\u0004\u0016\ufffd+\ufffd\ufffdN\u0018\u0018\u0007M#E\ufffd\ufffd`\ufffdm\ufffd\ufffd\ufffd\u001c\ufffd:\ufffd=Ȋ(:\ufffdHKdgp\ufffd\ufffd%\"\ufffd\ufffdgRK\u001d\ufffd\ufffd0H\ufffdk8R\ufffd\ufffdϲd˳\ufffd\ufffdx\ufffd\ufffd\ufffd\\\u0007\ufffdƃe\ufffd\ufffd!\ufffd\ufffd\ufffd\u0010\ufffd\ufffd%\u001d{\ufffdf\ufffd\ufffd\u0001\u000c\ufffde\ufffd\ufffd7\u0015R\ufffd\ufffdv\ufffd\ufffdm\ufffd\ufffd\ufffd\ufffd\ufffd@~f+\ufffd7.\ufffd\ufffd\ufffdQ\ufffd\ufffd\ufffdt\ufffd\u0012\ufffd)}\u001d\ufffd\ufffd\\\ufffd\ufffd\u0014\ufffdJteVA\ufffdŭ\u000b\ufffdY\ufffdB\u001cݸRs\ufffd\ufffdB\ufffd]*\ufffdW\u0005Pn\ufffd7\ufffd\ufffd(*NQ\"\ufffd@\\->%\ufffd\u001e\ufffd\ufffd\u0016wl\u001e\ufffdU,\ufffd\ufffd\ufffd\ufffdERZ\u0010z\ufffd\ufffd\ufffd\ufffd%Rhٮ\ufffd\u001c\ufffdw\ufffd9p\ufffd|\ufffd0\ufffd!\ufffd\u0003J~\ufffd<\ufffd\ufffd\u001c,\u000e\u0002\u0001\ufffdl\u0008\ufffdS?\ufffdܒ\ufffd\ufffd\u001a&ܳ,~\ufffd\ufffd\ufffd\ufffd-\ufffd!/Î\ufffdU\u0014\ufffdtd\ufffd\ufffd\u0010\ufffd!\u001c\ufffd\u0012\\B\ufffd\ufffd'i\ufffdB\ufffd7\ufffdC.\u0001\ufffd7/g\ufffd\u0013z-\ufffd\t\"\u0013\ufffd\ufffdF&\ufffd\ufffdvW\u001524\u001f\ufffd\ufffd\ufffd\ufffdv#Z1b\ufffd\ufffd\ufffd\ufffd@{Q\ufffda\ufffd\ufffd=P\u0010̀\ufffd\ufffd\ufffdK|\ufffd_{\ufffd\ufffd\ufffd\u000eQ\ufffd\ufffd\ufffdf\ufffd\u0014\ufffd\ufffdu\ufffd\ufffdq\ufffd\ufffdo<\ufffd\ufffd\u0016TЮU\u000frF\ufffdZ`\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdC>6h\ufffdU\u0011w\ufffd58\ufffd\ufffd(RV\u001e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0000\u001aN\ufffd\ufffd\ufffd[\ufffdK<)\ufffd\ufffd\ufffdd\ufffd\ufffd$\ufffd)\ufffd\ufffd\ufffdUe\u0018\ufffd\ufffd\ufffd\ufffd$6q\ufffd}\ufffd\ufffdT\ufffdB\ufffd\ufffdd\ufffdR\u0014\ufffd\ufffd\ufffd\ufffd9\ufffd\u0005\u0011gE\ufffd\ufffd\ufffd\ufffdg.\ufffd\ufffd;\ufffd\ufffdyM\ufffd~\u0011ew\ufffd꘵\ufffd\ufffd\ufffd\ufffdF\ufffd\ufffd\ufffd\u0018s'\u000cB/F\ufffd-C\ufffdI}i\u0012\ufffdߤ\ufffd\ufffd\ufffd\u0000\ufffd\ufffd\ufffd$\ufffd\ufffdG&\ufffdM\u0000.w\ufffd\u000b\ufffd\ufffd&\ufffd\ufffd\ufffdC\ufffdg\ufffd\ufffdo\u0000\u0019\ufffdF\ufffd\ufffd\ufffdI\ufffdc\u000c\ufffdoB\ufffdkU✀\ufffd\ufffdF\ufffd\u001fΉ;\ufffd\ufffdk7L\u0010\u000b\ufffdc\ufffd1\u0016j_0\ufffdy\ufffd\ufffd\u000b[\u0016\u001d\u000b^B\ufffd\ufffd=\ufffd\\\ufffd3\ufffd\ufffdM\ufffdZ:\ufffdA\ufffd,\u001e\ufffd?\ufffd\ufffd\u001d\u0003\u0003#w\ufffdR\u000f\ufffd{\u0016;q\ufffd.4\ufffd\ufffd\ufffd\ufffd\ufffd*\ufffdn\u001bF\u000e\ufffd\ufffd\u0003O\ufffd\u0007\u00086\ufffd\ufffd\ufffd\ufffd5\ufffd7qI\ufffdr\ufffd.\u00139#Z\ufffd\ufffdT\ufffd\ufffdX\ufffd\ufffd\ufffd\u000b\u0013\u0003\u0016\ufffd\ufffd{&\ufffd\u0001jbI\ufffdO\ufffd\ufffd\ufffd~[|\ufffd$$U!/=V\ufffd7\ufffd\ufffd\ufffd݆#\n\ufffdJ\u001bQal\ufffd\ufffd&O\u0017\ufffd\ufffd\ufffd8\ufffd\\\ufffd\u0005\ufffd\ufffd\ufffd\u000c\ufffd-v\ufffd\ufffd\ufffd\ufffd\u0007z\ufffd\ufffdG\ufffdm\ufffdwlbIk\ufffd\ufffd.\ufffd\u001aV\ufffdߜ\ufffdt]n\\\ufffd\ufffd\ufffd\u0013\ufffdh\ufffdc\ufffd\ufffd\ufffd\ufffd\u0017\ufffdo$\ufffdq\ufffd\ufffd\ufffd9\ufffd\u000f\ufffd\ufffd\ufffdY\ufffdػ'\ufffd5A\ufffd_g\ufffd\ufffd\ufffd4\ufffd΁T\ufffd2\ufffd\u000b\ufffd\u001d.7\ufffd\ufffd\ufffd6\ufffd˂\ufffd 54jʫ\ufffdgO\u000b\ufffd\ufffd\ufffd0\ufffd\ufffdTã[~\u0019\u000e\ufffd\ufffdW\ufffdNWQ\ufffdO`\ufffd\ufffd\ufffd\ufffdɳ\ufffd\ufffd\ufffds\ufffdi2\ufffd\ufffd\u0014:c\ufffdV\u0008\ufffdp\t&\u0005\u001c\ufffd\ufffd\u0019\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\u000e\u000c\u001f\ufffd\u0018}\ufffd\ufffd\ufffdI\ufffde\ufffd^\ufffd\ufffd\ufffd8y\ufffd\ufffd>\ufffdDd\ufffdx۶\ufffd\ufffdF\ufffd\ufffdԪu~\ufffdU\ufffd\ufffd\u000c{\ufffd\u000b+\u0003\ufffd\ufffd\ufffd̥.\ufffd\u0007\u001e\ufffdg\u0007\u0006\ufffd_\ufffd\n<\ufffd\ufffd`.^\u0008\ufffd\ufffd\ufffd$\ufffdg\ufffd\ufffdЧ\ufffd\u0006\ufffd\ufffd\ufffd\ufffd3(\ufffd\ufffd\ufffd\u0015\ufffd\ufffd\ufffd\ufffd\ufffdG\u0006\u001e ̖\ufffd\ufffd\ufffd.\u0008uT\ufffdX;p)\ufffd\ufffdR\ufffd\ufffd\\\"7\u0015B\ufffd\ufffd/e\ufffdN8\ufffd\u0003a\ufffd\u0012\ufffdD\u0016\ufffd\ufffdҽ\ufffd\ufffd\ufffd\u0002\ufffd\ufffd!\ufffdjF\ufffd*\u0001\ufffd\ufffd\u0006\ufffd\ufffd<?$\ufffd\u001d\ufffd\u0004\ufffd?\ufffd\ufffd_\ufffd?\u0010\ufffdU,\ufffd6).\u000e[\u0006F\u0005\ufffd\ufffdK\u0012F"}
2025-04-26 17:05:12.653	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.339018125s"}
2025-04-26 17:05:12.658	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 0, "total_records": 1}
2025-04-26 17:05:12.658	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 17:05:12.658	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 17:05:12.658	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED", "username": "test_user", "encrypted_key_length": 6425, "encrypted_key_der": "\ufffd\ufffd\\\u0015\ufffdt\ufffdQOM\ufffd\ufffd\ufffd\ufffdX\ufffd\ufffd\ufffdA\ufffd\ufffds6\ufffdiN\ufffdu\ufffd\ufffdg2\ufffdK\ufffdFnD\ufffd\ufffd\ufffd\u000c\ufffdb&\ufffd\ufffd\ufffd'y'^;\ufffdC\ufffd\ufffd\u000b\u0006\u0014\ufffd\\\ufffd\ufffdƼ\ufffd\ufffd\ufffd\ufffd\u001aTV>\ufffd\ufffd\ufffdj*\ufffd\ufffdJ\ufffd\ufffdZ7\ufffdyU\ufffdw6\ufffd\u00089#?\ufffd\u001eD\u001e\ufffd+\ufffd\ufffdy\ufffd\ufffd\ufffdf\u001f\ufffdeǘ\ufffd +K*\ufffd\ufffd!\ufffd\u0003OnI\ufffd\ufffd\ufffd\ufffd\ufffdȌ/\ufffdͺ\ufffd\ufffd\ufffd{\ufffdЈv\n@&i\ufffdZ\u000f\u0011\ufffd\ufffd3\ufffd\ufffd)\ufffd\ufffdww\ufffd!\ufffdL\t\ufffdOl\u0015\ufffd\ufffd\u001ajx\ufffd\ufffd\ufffd\u0000\u001b\ufffd\ufffdQ/s\ufffd5\u0014\ufffd\ufffd{o)\ufffd \ufffdO\ufffd9\r\ufffdZ\u0010\ufffd\ufffd\ufffd \ufffd)\u001e\ufffd\ufffd!鱇\u000e\ufffd+\u0003\ufffd<\ufffd\u0006k\ufffd\ufffd\ufffd\ufffd2%\ufffdWH\ufffdA\u0006\r\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE\ufffd\ufffd{s=\ufffd\ufffd\ufffd9S\u000e0LO\ufffd\ufffd\ufffd\ufffd\ufffdMVh1By\ufffd!c\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\ufffdq\ufffd\\\ufffd\ufffdq1\ufffdF&(AЮ\ufffdY \ufffd.\ufffd\u0003m\ufffd\ufffd\ufffd\u0007c\u001e\ufffde\ufffd\n{\ufffd\ufffdcu\ufffdٞ\u001d\ufffdn\ufffd\u0006\u0018\ufffdm\ufffdu(\u0015\ufffd\ufffd\ufffdL\ufffd\ufffdӨ\ufffdȎ\u001a\ufffd ;\ufffdpו[\ufffd\ufffd\u000fҭO\ufffd\ufffd\ufffd\ufffd\ufffdO5\u0005\ufffd\ufffd\u0000\u0005І\u0005\ufffd\t\ufffda\u0004\ufffd\ufffd\ufffd\ufffd/\ufffdj\ufffd\ufffdȎΫ\ufffd\u0018c5\ufffd\ufffdyO~\ufffd\ufffd\ufffdM\ufffd\u0008ފgZ\ufffd\u0017\ufffd\ufffd`ެ3\ufffd\u00147Gb\ufffdx\ufffd#4x\ufffd_\u0013\ufffdS4,\u001f\ufffd\ufffd\ufffd墎\ufffd\ufffd|\ufffd\ufffd#Rw;\ufffde\ufffdL\ufffd#2`\u0012\ufffd\ufffdNE2\ufffd\ufffd\ufffd\u001b\ufffd\ufffdlv\ufffd&x*\ufffd2f<\u000fz\ufffd\ufffd\ufffd\ufffd\ufffdt\ufffd3\ufffd\ufffdQ\r\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdto\u0000\ufffd\ufffd\ufffd\ufffd\u0019\u001c\ufffd~\ufffd\ufffd4\u0010\ufffd~\ufffd=o\u000f\ufffd\u001a\ufffd\ufffd\ufffdSys{\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd+\u000e\ufffd6g\ufffd\ufffd\ufffdӫI\ufffd,]b\ufffdrP\ufffd\ufffd\u0014\u0005\ufffd\ufffdC\ufffdԝ\ufffd\ufffd\u0014y\ufffd\ufffdp\ufffd2\ufffdV-'\ufffdd1.`\ufffd\ufffd\ufffd\ufffdlE\ufffdέX@k\ufffdk\ufffdkf\ufffdQ\u000b\ufffd\ufffd~#\ufffd\ufffd\ufffd\ufffdSx\ufffd\ufffd|\ufffd\ufffd\u001e=\ufffd\ufffdM\ufffd.\u000e[\ufffd\ufffd\u0005\ufffdd3\ufffd!\ufffd`i\ufffd]N_\u001a\ufffd\u0003X\ufffd\ufffd]\u001c\ufffd\ufffd2\ufffd8\ufffd\ufffd\\b\ufffd\ufffd\u001el\ufffd)\u0000\u001e\ufffd\ufffd\ufffd>\ufffd\ufffd\ufffd\ufffd쪲\ufffdJ\u0017\ufffd\ufffdN8ҧ\ufffd\u0007\ufffd\ufffd\ufffd\ufffd3\u0019\ufffdaק.\u0015q\ufffd\ufffd\ufffd)\"\u0016g\ufffd\ufffd\ufffd\ufffd\\\ufffd\ufffd\u0018x\ufffd\ufffd5\ufffdJ\u001f\ufffdO\ufffdz\ufffd\u0001\u0013\ufffdb\ufffdB\ufffd\ufffd(\ufffd\ufffd>\u001f\ufffdq\ufffd!\ufffd\ufffd\ufffdiP\ufffde\ufffd\\6\u0005H\ufffd\ufffd)\u0004\ufffd\ufffdta\u001e\ufffdhLz\ufffdE\u0004\ufffd:\ufffd\u0003\ufffd\ufffd\ufffd\u0017\ufffdA|\ufffd\ufffdL\ufffd9\ufffdf\ufffd\ufffd)\nS\ufffdN\\e0\ufffdy\ufffd \ufffd\ufffd\ufffdqR9@&\u0016>\ufffd<\n@\ufffd\ufffd,\ufffd\ufffd\ufffd%\ufffd\u001c\u0018\ufffdoe2h\ufffdu\\\ufffdC<\ufffd\u0018\ufffdBU\u000e\u0019r;\ufffd\u000ff\ufffd\ufffd)\u0005\ufffd\ufffdTe\u000f}\u0014\\ng\ufffd\ufffd\ufffd\u0010H\ufffd\ufffd\u0017!ix\ufffd\u0018Wg\u0006\ufffdML\u0018D-\ufffd+\ufffdڽ&\ufffd\u0008\ufffd\ufffd}]\ufffd\ufffdc\ufffd6\ufffdWܸ \ufffd1\ufffd\ufffdO\ufffd\ufffd\ufffd\ufffd(\ufffd6\u0006\ufffd%\ufffdڳo\ufffdҫ\u000b\ufffd\ufffd\ufffd\ufffd\u0015\u0015w\\a\u0018xL)6\ufffd\ufffdO*\ufffd}:\ufffd\ufffd\u0013\ufffd\ufffd[\u001e2\ufffd\ufffdT\ufffd\ufffdp\ufffd\u0008#\ufffd\u001aZN\\\ufffd\u0016\ufffd\ufffd\ufffd鈌\ufffdI\ufffd\u001e\u0002\ufffdpE\ufffd\ufffd\ufffd\ufffdIC\ufffd\ufffdK\ufffd\ufffdh\ufffd?\ufffd<\ufffd\ufffd\ufffdDd\u0017\ufffd\ufffdoF\ufffd_ɾ 0w'\ufffd<\u0004\ufffd\ufffd\ufffds7\u0000\ufffd\t\ufffd?U\u0019b\u000eNYsjY\ufffd_Z\ufffd\u0003\ufffd\ufffd1\ufffdҞ\ufffd|k\u000b\ufffdZS^\ufffd\ufffd\u0014\ufffd\ufffd)\ufffd\ufffd\ufffd\u0016\ufffd!\u0017D\ufffdCn\ufffdx\ufffdz\ufffd\r\ufffd\ufffd\u001d.\ufffd\ufffdڞ\ufffd\u001b\ufffd\u0013hy\ufffd\ufffd\ufffdQ6\ufffdv\ufffd3\ufffd\u001aJҺ\ufffdq3%\ufffdE|\ufffd\u0019\ufffd\u0013\ufffd\u0007)\u0005o;Rt\".¨\ufffdչ\ufffdמ)\u001f\ufffd\ufffd\ufffd\u0007\ufffdÚ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0013\ufffd`\ufffd\ufffd߼l\ufffd\ufffd\u0006\ufffd~\ufffdP\ufffd\u0010\\\ufffd\u000e\ufffd\ufffd\ufffd\ufffd\ufffd\u000e'&\ufffd*\ufffd%\u0001\ufffd#p:\ufffd\ufffd\ufffd\n5\ufffd\ufffd@\ufffdq\u001f\u0014\ufffd-Q\ufffd\ufffdh\ufffd\ufffd^\ufffdFl\ufffd\u001c\ufffd\ufffd}\ufffde\u0014\ufffdD\ufffd\ufffd\ufffd\ufffdy\ufffd@\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001a\ufffd2\ufffdƟ]b\u0018\ufffds\ufffdڪ\ufffd{\ufffd\ufffdx\ufffd\ufffdK\ufffd\ufffdpDy\ufffd\u0003\n\ufffd\ufffdK\ufffdK\ufffd;\ufffd\ufffd\ufffd\ufffdoӫf\u0019\ufffd_\ufffd^\ufffdyOK\ufffd,\ufffdv\ufffd\ufffd\ufffd\ufffd\u0013\u0002\ufffd\u001f2Ra\ufffd6hTB\u0010\ufffd\ufffd\ufffd(#\ufffd́R\ufffd\ufffd\ufffdZ\ufffdUND\ufffd݌\ufffd&ֲˑ\rq:\ufffdM\u0003\ufffd\ufffd\ufffdʀt\ufffd\ufffd&\ufffd/\u0006\ufffdr/s\ufffd\ufffdn\u0017\ufffd꼸\ufffdN\rI\u001765!\ufffd\ufffd\ufffd\ufffd\u000e\ufffd\u0006\ufffd\u0005\ufffd\ufffdH\ufffd0S\ufffdy\ufffd\ufffdt\ufffdUV\ufffd\ufffd@\ufffd$U\ufffdͩ\ufffd\ufffd=\ufffd\u0011\ufffdy!\ufffd\u0015\ufffd]\ufffd-\ufffd\r\ufffdM\ufffd\ufffd\ufffd{\ufffd\u001d\ufffd5\u0002~\ufffd\ufffd\u0017\nnÞ\ufffd\u0015v\ufffd.\ufffd\ufffd\ufffd0\ufffd\\뉇u\ufffd\ufffd\u001f\\Qş\ufffdB\r\u0011*a\ufffdy$[/U\u0008c\ufffdO \ufffd\ufffd\u000c\ufffd\u001a,%\ufffdZ+G38\ufffd@I7(4D\ufffd\ufffd2\ufffd \ufffd!\u001c\ufffdZDT\ufffd\ufffd\ufffd\ufffdE\ufffd\ufffd\ufffdS\ufffd`\ufffd\ufffd\ufffd\ufffd31rT\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0014\ufffd\u001aAԣB\ufffd\u0008>\ufffd\ufffd\ufffd(e\u0004\ufffd\ufffd|\ufffdX\ufffd\u000b\ufffd\ufffdq\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdhZ\ufffdN#\ufffd*\ufffd8`ڍK\u000b\ufffd\ufffdtr\r\ufffd\ufffd\ufffd<G4\ufffd\ufffd\ufffdؾK{\ufffd W\ufffd\ufffd\ufffdoK\ufffd\ufffd\u00119\ufffd\ufffd\ufffd_\ufffd\ufffd_\ufffd{\ufffd\ufffd`\ufffdj\u000b\ufffd{\ufffd\ufffd\ufffd#5\ufffd11d\ufffd\ufffd\ufffd\ufffdU\ufffd\ufffd3\ufffd\ufffd/CI\ufffdY\ufffd\u0018\ufffd\ufffd\ufffd\ufffd>;_\ufffd\ufffd\ufffd\ufffd\u0004\ufffd@8Y\u0018b\ufffd_\ufffd;b\ufffd\ufffd]6\u0018\u0001wz:<\ufffd\ufffd)d\u0003w0\ufffdch\u0015\ufffd+\ufffd\ufffd\u0003\ufffdɴ\u0014$\ufffd\u0002\ufffd\ufffd\ufffd-D)\ufffdZ\ufffd\ufffd\u0003!\ufffd\ufffd\ufffd\ufffd+\ufffd\r\ufffdL\ufffd\u0012\u0011!\ufffd\ufffd\ufffd\ufffd\ufffdq\ufffd\u0015\ufffdN\ufffd\ufffd\ufffd\u0006\ufffd\ufffd\ufffdI\u000f/\ufffd\ufffd\ufffd\ufffdx\ufffd\u0015\ufffdzV\u0019\ufffd\ufffd]N=\u0012\ufffd\ufffd\ufffd<C\ufffd1tx\u0007ę\ufffdv}\u0002m}w~\ufffd\ufffd\ufffd\ufffd Yem\ufffd\u0015,|\ufffdJ\ufffd\ufffdǎ\ufffdw(\ufffdg?\ufffd\ufffdÍ\u0007\r\ufffd\u0017\ufffd\ufffd\ufffd\ufffd\ufffd(\ufffdHĞ\u0014\ufffd\ufffd\ufffde\ufffd|\u00032\ufffd^]r1\ufffd\ufffdpX\ufffd\u001a\ufffd\ufffd\ufffd\u000cYwҲw\u0005\ufffd\ufffdZqTЎ\u001c\ufffd,l8st\ufffds×\ufffd\u001f\ufffdnx1+\ufffd\ufffd1\u001c2ۢ\ufffd\ufffd\ufffdo\u001a\ufffd\ufffd\ufffdo\ufffd; \ufffdFԊ\u000b\u0016\u001f~xI(\ufffd\ufffd\ufffdg\ufffdX(\ufffdW\ufffdFȜvD\ufffd\ufffd~\ufffd\ufffd):2\ufffd\u0017D~\ufffd\ufffdi\ufffd/O\ufffd\ufffd\ufffd\ufffd\t\ufffdQ\ufffd\ufffd\ufffdЅ\ufffd{\ufffd\ufffd\u0015\ufffdP\u000b\t\u001c\u0010r\ufffd\ufffd-1\ufffd\u001f\ufffd\ufffd\ufffdg\ufffd\ufffd\ufffd+\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdd\ufffdJW\ufffd=-Id\u000b\n:\ufffd\ufffd\ufffd\ufffd}9z˕~\ufffd.Wq\ufffd\ufffd-\ufffd\ufffdǋ\ufffd\ufffdgI\ufffd\ufffd\ufffd\ufffd<\"\ufffd\ufffd[\ufffd\ufffd\u0013\ufffd]\ufffdV`e\ufffdX\ufffd$,on\r\ufffdы\u0011\ufffd\ufffdW\ufffd\u001d\ufffd\ufffdq;\ufffd\ufffd8U\ufffdN\ufffd\ufffd\ufffd\ufffd8\ufffd\ufffd\ufffd鿄\ufffd\ufffd<\u0010A\ufffd\u0003\ufffd\ufffd\ufffd1\ufffd:]\ufffd\u001b\ufffd6\ufffd\ufffd>U\u0013\ufffd\ufffdW4\ufffdJ\ufffdk\ufffd܉\ufffd\ufffd\ufffdY\ufffdrJ\u0011\ufffd\u001a\ufffd¹c}$]\ufffd\ufffd\ufffdC\ufffdh?\ufffd\ufffd\ufffd[\ufffd6̚j\ufffd1\"\ufffd\ufffd\ufffd8\ufffd\ufffdm\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffdh%\ufffd\ufffd%6$doiS\ufffd\ufffdē:\ufffd\ufffd\ufffd+\ufffd\ufffdd\ufffdgf`\u0005\u0002\ufffd| \u0010\ufffd\ufffd\ufffd\u0000\ufffd-\ufffd\u0008B}n\ufffd\ufffd\u001a\ufffd\ufffd\ufffdF\ufffd)\ufffdG\ufffdKf^(C\ufffdn\ufffd\ufffddʇ\ufffdU\ufffd\ufffd7\"-\ufffd\ufffd\u0002k\"~\ufffdC'\ufffd\u0008$u\ufffd\ufffd\ufffd\ufffd\ufffd\u0004\ufffd/\ufffd\ufffdo\ufffd\ufffd<\ufffds\ufffd\ufffd\ufffd\ufffdgo\ufffd\ufffd\u0019G|\ufffdl\u001c|\ufffd/\ufffd\ufffd7WtO\ufffdL\u0011i\ufffd\ufffd\ufffd\ufffd\ufffd5\ufffd%8`\ufffd<\ufffdf\ufffd\u000b0\ufffd\ufffdFZ*\ufffdv_J\ufffdް@\ufffd\ufffdt\ufffdI\u00111!%߉\ufffdF\u000e]#ʓ}\ufffd\ufffdR|'\ufffd\ufffdM\ufffd\ufffdwJ\"q\u001bE(\ufffd\ufffdD\ufffd\ufffd\ufffdbL\ufffd\ufffd\ufffdg\ufffd`ݴ\ufffd\ufffd\ufffdD|\ufffdU\ufffd\u0003\ufffd!\ufffd\u0018\u001b\ufffd\ufffdi\u0018\ufffd\ufffd?\ufffd\ufffd\u0017\ufffdM\ufffdH\u001aq\ufffd&\ufffd=\ufffd\ufffd(Р8E'\ufffdi\u0003\ufffd;\ufffd*\u0016:\u001f9\ufffd\ufffd@n\ufffd\u0011c}B@\ufffd&-7E\ufffd\n\ufffd\ufffdl\ufffdי\u0016\ufffd%\ufffd\u000c\u000f\u001b\ufffd\ufffd\ufffdWۦo\ufffd\ufffdbj\ufffd+qY0\ufffd\u001aZ\ufffd0;uS\ufffd\ufffd\ufffdm\u0005$\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd#\ufffd3\ufffd\ufffd\ufffd\ufffd\ufffd\u0013\ufffdz\ufffd\u0008Ǘ\ufffd\ufffd\u0016a\ufffdUu\ufffd\ufffd\ufffdK\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\u000cެ@\u0012\ufffdl4\u0006\ufffd\ufffd\u0019\ufffd\u0008@4\ufffd\ufffdx\ufffd\ufffd\ufffdR=\ufffd\ufffd1V.)\ufffd҄eaĝ\ufffd\u001c\u000eK\ufffd\ufffdN\u001fB\ufffdHh\ufffd\ufffd\ufffdG\ufffdQ\ufffd\u001dӗ\ufffd\u000ccעS\ufffd\ufffd_\ufffd\u0006\\\u000bW\ufffdA\ufffd\ufffdYɢ%\u0004\u0003\ufffdlⰢ\ufffd \ufffd\ufffd\ufffd\ufffd!͉\ufffd\u0018%zc\ufffd\ufffd\ufffd\ufffd[\ufffd\ufffd\ufffdLY\ufffd@\ufffd%\u0018\ufffdב\ufffd\ufffdLTO\ufffd\ufffd\u0005I\ufffd\u0015گU\ufffd[\ufffd\ufffdn}\ufffd#\ufffd\ufffd+;p\ufffd\ufffd\ufffd\u0012\ufffdlZu\u001b\ufffdߍ\ufffd+蠋\ufffd\u001a\ufffdګ\ufffd́;\ufffd\ufffd\ufffd\ufffd5\ufffd\ufffd\ufffd\ufffd\ufffd\u001di\ufffd\ufffdsc\ufffdFq\ufffdf\ufffd\ufffd\ufffd9\ufffd\ufffd֛Y\ufffd\ufffdo\u0017ֻ\ufffd\ufffd8\ufffd\ufffd\ufffdc\ufffdݪ\ufffd\ufffdHX\ufffd׃ \ufffd\ufffd\u0007\ufffd*\ufffd\u0004\ufffd\u001d\ufffd\ufffd\"Q3P\ufffd_\ufffd8\ufffd?+U\u0000̂S\ufffdP^p\ufffd\u0002\ufffd̃\ufffd`\ufffdb0\u001cL=\ufffd\ufffd\ufffdn\ufffd\ufffdLG\ufffd\ufffd\u0018>Y:\ufffd\ufffd\ufffd\ufffdN\ufffd\ufffdU\ufffdZ^5\ufffd\ufffd\ufffd\t\ufffdj\ufffd\ufffd\ufffdF_o\ufffd@v\ufffdբ\ufffd*\ufffdfv\u0000f\ufffd\ufffdڲ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdv\ufffd\ufffd\ufffd\u000b\ufffd=\ufffd~ëó(\ufffdA\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001d\ufffd\u0008Uؾ\ufffd\ufffdmG\ufffd9T伈0\n\ufffd\t5H\ufffd\ufffd\ufffd\ufffd5Q\ufffd\u001bPņ\ufffd\ufffd:\ufffd\ufffd\u0006#\ufffd\u0007\ufffd<_\ufffd}b\ufffdn3Q<\ufffdM\ufffd;\ufffd\u0019\ufffd\ufffd\ufffdc\ufffd\u0013N\ufffd\ufffdȩ\ufffd\u0012$\ufffd\u0011\ufffdČ\ufffd\ufffd{#K\ufffd\ufffdAq\ufffd\u0015ni֢\ufffd\u0019\ufffd\u0001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd)鹟\ufffdSIb\ufffd\\\ufffd9\ufffd\ufffd\ufffd<%\u0017\ufffdF7\ufffda\u0012\ufffd\ufffdg_\ufffd\ufffd\ufffd\ufffd.%*@-2\u00017h>\ufffd$J\ufffds(C⇚=K\ufffd\r\ufffd\ufffd\ufffdH(\ufffd[I[E\ufffd's0\ufffd\ufffd\u001d\ufffdM\ufffd\u0014\ufffdl\ufffdo\ufffd\ufffdz\ufffd닏\u0019eg{\ufffd\u001e\ufffdK\ufffd\ufffdx\ufffd\ufffd0s\ufffdI\ufffd\u0015c[y\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd9\ufffd\ufffd\ufffd\ufffd\u0013\ufffd\u001f+sX\ufffd\u0012H\ufffd\ufffd0I\ufffd\ufffd\ufffd\ufffdt5]\ufffd_\u001c9\ufffdϜU`\ufffdu\ufffd\ufffdX\u0016q:\ufffdJ\ufffd\ufffd\ufffd\ufffd\u0003\u0013\ufffd\ufffd\u0001\"\ufffdm\ufffd5\ufffdl+\u001b\ufffd?y嘞\ufffd\u0011㕇\ufffd\ufffd\ufffd\ufffd\ufffd25\ufffd\ufffdBV\u000b\ufffd\ufffd\ufffd\u0019\ufffdv\ufffd\ufffd/\ufffd\u001dm\ufffdu\ufffd\ufffdHC\ufffd-\ufffd\u001b\ufffd\ufffdG\ufffdzIg\ufffdw\ufffd\ufffd[\u00048\u0014\u001d[\ufffdnγ\ufffd\ufffd\ufffdd.u\ufffd\ufffd\ufffd\nRށ\ufffd}U\ufffd\ufffd<\ufffd`Ca\ufffd?;f2\u0003\u001dƫ\ufffd񗕤b\ufffd<\ufffdi\u0013hv\ufffd\u000f\ufffdg\ufffd9\ufffd\ufffd\u000e\ufffd\ufffd\ufffd$\ufffd\ufffd-J$\ufffd\\'\u0016\ufffd\ufffd\ufffd\ufffd\ufffd\u0000A\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffd\u000e` \ufffd1뫬\ufffd(S\ufffdB\ufffdޭ\ufffd\ufffd\ufffd\ufffd\u0000OLP'\ufffd7\ufffd{\ufffd\ufffdlH\ufffdr\u000c\ufffdE%FN\ufffd\u0018:&mi_RP\ufffdK\u0002\ufffd\ufffdG0*;\ufffd*H\ufffd\u0003\ufffd\ufffdZ\ufffdhSJB\t\ufffd\ufffd\u00167\ufffd\u000e_&e\ufffdz\ufffd\ufffd\ufffd\ufffd\u0007dě\ufffdl\ufffd\ufffdGw\u0010\u0017\\a\u0014m&i2\ufffd6\ufffd\u001dp\ufffd\")V\u0003\ufffdO\ufffd0\n\ufffd\ufffde\ufffd*\ufffd\ufffd\ufffd6<\ufffd\ufffdx\ufffd\ufffd\ufffd7\ufffd\ufffda\ufffd\ufffd\ufffd\ufffd<\ufffdQL-\ufffd\ufffdB\ufffdu\ufffd\ufffd\ufffdE\ufffd\u0011\ufffd\ufffd*\ufffdE\ufffdQ\ufffdJ\ufffdw,$\ufffd\u0006\u001e\ufffd\ufffdW\ufffd\ufffd+\ufffdd'V\ufffdE\ufffd\ufffdSf\ufffd\ufffdH\u000cO#\ufffd!\u001a\u0007\u0004\ufffd\ufffd\ufffd~\ufffd\ufffd%E\ufffd\ufffd-\u0013Gc\u001cf\ufffdd\ufffd\r/>U>\ufffd2\ufffd\ufffd\ufffd\r\ufffd\ufffd\ufffde\ufffd\ufffd\u0016\ufffd\ufffd\ufffd\ufffdҬ\ufffdu\ufffdۓ\ufffd%j\ufffdg\ufffd\ufffd\ufffdW\ufffd]R/\ufffd\ufffd\ufffd(\ufffdp:]^\ufffdi5\ufffd\ufffd\ufffd.>J\ufffd\ufffd\ufffds\ufffd\ufffd\ufffd\u0000\ufffd\ufffdܮj\ufffd\ufffd4p]e\ufffd+P\ufffd\ufffd7FAk\u0019;iY%\ufffdӟ\ufffd\ufffd,_5\ufffd\ufffd\u001c\ufffd\"\ufffdu\ufffdU\u00059\ufffd!w`\ufffd̬\ufffd1\ufffd\ufffd\ufffd\u0013א\u0002\ufffdhDw\u0001T\ufffd\ufffdƞ\ufffd\u001b\ufffd\u0017oسLP\ufffd\u001cm\u001e\u001fOm\ufffdݔ\ufffd\ufffd\u0003\u0018b:8\n/\u0002\u000e\ufffd\u001b\u0002EOr\ufffdbqʳ>\u000c\ufffdJ\ufffdR\u0011m\u001e\ufffd\ufffd\"\ufffd9\u0006Œv\ufffd\ufffdhKz\ufffds\ufffd\ufffd~\ufffd\ufffd-ތ=ֲqj\ufffd\ufffde\ufffd\u000f0\ufffd\ufffd\u0007\ufffd\ufffd/4E$\ufffd \ufffdK\ufffdk\u0019\ufffd\ufffd)䀖\ufffdE\ufffd\u001a\u0002gX\u000c\ufffd\ufffd\u001d\u0011\ufffd D\ufffd\ufffdW\ufffdg\u0003l~\ufffd\ufffd\ufffdQ\ufffd\ufffd\ufffd\ufffd\u0014\ufffd\u0000SK\ufffd\u0018\ufffd\ufffd\ufffd\u0004Ķ\u0011I\ufffd\ufffd\ufffdk\u001a\ufffd\ufffd\ufffd\ufffd卸\ufffdQ\ufffdw\ufffd\ufffd\ufffd\ufffd\n<\ufffd\ufffd$\ufffdς\ufffd\ufffd\u0013!\n \ufffdtO\u001c\ufffd\ufffd\ufffd\ufffd\ufffdrע\u0007\ufffd\ufffd'J͠b\ufffd\ufffd\u0004\ufffdt\ufffd\ufffd\u000c\ufffd\u001aE\ufffd4\ufffd\ufffdT\ufffd}(\ufffd\ufffd{}\ufffdr\ufffd\ufffdfG\ufffd\ufffd\u000c\ufffd\ufffd\u0014#\ufffd\ufffd$\ufffd5Бx\ufffdj~9ɗE\ufffd\ufffd\t\ufffdc\r\ufffd\ufffd\ufffd\u0006\ufffdy\ufffd\ufffd\ufffd\ufffd\ufffd=\ufffd\ufffd;t\ufffdmװ,/\u001b7\ufffd|;\ufffd\\\u001c\ufffd\ufffdA\u0006\ufffd\ufffd\ufffdp\ufffdz\ufffdc\ufffdָY\r\ufffdx\ufffd\ufffd1MΈj^\u0008P\ufffd.\ufffdi.\ufffd\u0005\n\ufffdOxQ\ufffd\"v\ufffd>\u0019\ufffd\ufffdc\u0013]\ufffd,Z\ufffd3\u001f\u0002h\ufffd\ufffd\ufffd\ufffdwL:\ufffdf\ufffd\ufffdr:\ufffd=\u001a\ufffd<K\ufffd;\u001d\ufffd\ufffd\ufffdpR\u0000\ufffd\u0013\ufffdg\ufffd\u0017]\ufffd\ufffd\ufffd\n\ufffd\u001d\ufffd\u001a\u000bA<`\ufffd@K\u0013\u0018\ufffd\u0012\ufffd\ufffd\ufffd\ufffd9:\u0016\u0015\ufffd\ufffd\ufffd\ufffd\ufffdB{\ufffdsi|\tC\ufffd\u000e\ufffd\ufffdr\ufffd\u001as\ufffd\ufffd/\u0011?\ufffd\ufffd\ufffdQP\ufffd?L\ufffdȄRw]\ufffdj\ufffdDDq\ufffdVR\ufffdl#\ufffd\ufffd\u0001\ufffd\u0001\ufffd\u0017\ufffdӽl\ufffd\ufffd\ufffdޕ\ufffd\u0016Uw\\\u0007+\u000e#\ufffd\ufffd4u\ufffd\ufffd\ufffd\ufffd\u0006\ufffd\ufffd+\ufffd\ufffdy\u0000`\ufffd\ufffd?\u001e[\ufffd\r\u000cD\ufffd\ufffd}'Z\ufffdF\ufffd\ufffd\ufffd⿺\ufffd.\ufffds\ufffd\ufffd$ړ\ufffd*\ufffdh\ufffd]\ufffd-h\ufffd\u000fuXr\ufffd\ufffd,f\ufffd\ufffd=\ufffd~\ufffd\ufffd\ufffdЩ\ufffdO\ufffd\ufffd\ufffdc\u0001\rIt\"ۓ\ufffdn\ufffd\u00053\u0013\ufffdI\ufffd`\n\ufffd猲\ufffd\"\ufffd\ufffd\u000cm\ufffd\"\ufffdޭ\u0007\ufffd \ufffdOS93\ufffd\u0019\ufffdF\ufffd\ufffd(zo\ufffd\u0003\ufffdz\u001c\u0007\ufffd\ufffd}\ufffd\u0005\ufffd\ufffd\u0002u\ufffd\ufffd\u001b`\u0002\ufffd\ufffd\ufffd\ufffd\u0019\ufffdq\ufffd\u0018\ufffdKHs\ufffdi\ufffdD\ufffdVN\ufffdd\ufffd-\u0011\\ \ufffd\ufffdc}1\u0011#\ufffd\ufffd\ufffdӋ\ufffd\ufffd\ufffd*[\ufffdF\ufffd[\ufffd\ufffdu\ufffd\ufffdwG\ufffd\ufffdh\ufffd\ufffdk\ufffd\ufffdb_\u001f\ufffd⛑\ufffda\ufffd\ufffdI\ufffd\ufffdH蟴\ufffde\ufffd%\u0016,\u000bPAa\\\ufffd:\ufffdP\u0014\ufffd\ufffd\ufffd<<`\u0016\ufffd\u0004\ufffdl]|d%\ufffdr\\\ufffdU\u000cV\ufffd\ufffdr/\u001a\u0015<\ufffd3\ufffd$\ufffd\u00140\ufffdc\ufffd\u0019<\u001b\ufffd{\ufffd\ufffd\ufffdtMzS\ufffd\ufffd\ufffd\ufffdf\ufffd\ufffd\ufffd[\ufffdcL\ufffd'\u000bF\ufffdh|\u0003\ufffd\u001d\u001cbp\u0010\ufffd\ufffd\ufffd&{\ufffdS\ufffd?#\ufffd\ufffdv\ufffd-\ufffdb\ufffd(\ufffd\ufffd\u0007\ufffd\u0018k\u0002\ufffd=چ&\ufffdە\ufffd.\ufffdCHY\ufffd\ufffd\ufffdzW\ufffd\u0003\ufffdԏ\ufffdiD/\ufffd\u000f\ufffd\\S\ufffd\ufffd\ufffd]\ufffd\ufffd\u0017\ufffd\ufffd`\ufffd\ufffd\ufffdo\ufffd\ufffd\ufffdV\ufffd͗\u0002J\ufffd\u0006\ufffd\ufffd\ufffdX@\ufffd\ufffdo\ufffd\ufffdWc+R-v\ufffd\r\ufffd\ufffd\ufffdL݇\ufffd\ufffd\ufffd$c\ufffdS(\ufffdS\ufffd9\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdXn\ufffd-\ufffdp;\ufffd\u0014\ufffdg!\ufffd;\ufffd\ufffdv\ufffd\ufffd\u0013/\u0019\ufffd\u000ek\ufffdp\ufffd\u0003\ufffda\u0005|\u000f\ufffd\ufffd\t\u0005\ufffdF\ufffd\ufffdg\ufffdgzoOm\ufffdnk\u0010u\ufffd\ufffd\u0003\ufffd\ufffd$\ufffd\ufffdk\ufffdg\ufffd:u\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdj\ufffd\ufffd\ufffd(<\ufffd\u0001\u0017\ufffd\u0013\ufffd9\ufffd\ufffdQkd7\ufffd{\ufffdI\ufffd\ufffd\ufffdh9\u0003\ufffdŽ\ufffd\ufffd\ufffdT]\u000f\ufffd\n\n\ufffd~P,\ufffd\ufffd_\tM.\ufffdU\u001fÿ\ufffd\u001f\ufffd&\ufffd{\ufffd\\q\ufffdyDnv\ufffd\u001b\u0011(\ufffd\ufffdA\ufffd\ufffdD\u001d\ufffdR\ufffd\u0004׃^\ufffd\ufffd\ufffd\u001a\ufffd\ufffd!\ufffd\ufffdc96\ufffd>\ufffdJ\ufffd\ufffd\u0015_\ufffd\ufffd>c\ufffdȯ\u000e\ufffdhF\ufffd\ufffdH\ufffdR\ufffdsk\ufffd\ufffd\u000cNtO\ufffdV\ufffd\nvt\ufffdR\ufffd\ufffd\ufffdz/<\u0002lU\ufffd\ufffd\ufffd\ufffdуy\u001eJ\ufffdn\ufffd\u000b>3}\ufffd\u000fD\ufffd\u001c\ufffd\ufffdus\u0016\ufffdd\ufffd<\ufffd\ufffd\ufffdiQ\ufffd\ufffd\ufffd\ufffd%\ufffdo\ufffd[\ufffd\ufffd\ufffd\ufffd\ufffdl\ufffda\"H\u000b\ufffd\ufffd\u0005\ufffd\ufffd3L\ufffda\ufffdzC\ufffd\u001d\ufffd\ufffd@B\ufffd\ufffdHS\ufffd\ufffdY\ufffd\ufffd\ufffd>D\ufffd\ufffd.\ufffd\ufffd\ufffd\u0012\ufffd\ufffd~\u0014*\ufffd\ufffdj\ufffd\ufffd\ufffd9\ufffd0\ufffd\ufffd\u000e6\ufffdٗ\ufffd*~\ufffdU\ufffd￿\ufffd\u0005\u000eŚ\ufffd\ufffdJ\u000bv\ufffd\ufffd\ufffdw\ufffd%\ufffd(vg<\ufffd\\\u0001\ufffd\ufffd\ufffd\ufffd\ufffd'\u0010\ufffd\ufffdj\ufffdO0\ufffd\ufffd=5/d\ufffd\u000c3\ufffdO\ufffdH\ufffd \ufffdc\u0006\ufffd\u0001{\ufffdޅ\ufffd\u001dr\ufffd\ufffd\u0019A\ufffd\ufffds\ufffdVL}i@\ufffd\ufffd\ufffd\ufffd;\ufffd\u0003\u0012\ufffd\ufffd\ufffd\ufffdqeLƄ\ufffd@\ufffd\ufffdt\ufffd\ufffd L\ufffd\ufffdlc\u0016A\ufffd\ufffd\ufffdP\ufffdp\ufffdc3\ufffd\u0012\u0017\ufffd\u0004\ufffdm\ufffd7\ufffd\ufffd_\ufffd\ufffd\ufffdh}P\r=\u0007[o\"\ufffd\ufffdG\ufffdw\ufffd\ufffd\ufffd:\r\ufffd\ufffd@\ufffdFib\ufffd-\ufffd\ufffd\ufffdp\ufffd߲}Z\u0017\u0005/R\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffd\u001b\ufffdi!S\ufffd3\u0005\ufffd\ufffd@\u0019\ufffd)i\"\ufffd\u0013\ufffd\ufffdʲ\ufffd8\ufffd\ufffd.ڼ\ufffd\rl\ufffd\u0000\ufffd\ufffd\ufffd\ufffdTB\ufffdf\u001e\ufffdF8\ufffd\ufffd\ufffd<>\ufffd\ufffd\ufffdc\ufffd\u001d\u0006\ufffd\ufffd6\ufffd\ufffd\u0005\ufffdV\ufffd\ufffd\u0006j\ufffdc\ufffd\ufffd\ufffd\ufffdpz_\ufffd\u0008\ufffd\ufffdEk\ufffdK7\ufffd\ufffdw\ufffdqn\ufffdV\u0016\ufffdY]k\ufffdT\ufffd\ufffd\ufffd\ufffd\ufffdd\u001c\ufffdQ\ufffd\ufffd\ufffdJG6\ufffd\"$\ufffdӘt\ufffd\ufffd#\ufffd\ufffd\u0005B\ufffd\ufffd6at,ٛ\ufffda\ufffd\ufffdO\ufffd\ufffd\ufffdմ\ufffd\ufffd\ufffd\u001a\ufffdp}\ufffd\ufffd\u0007\ufffd!\u0006\u0014&\ufffd`r\ufffd@ȡ/:v.\ufffd\ufffd)Y\ufffdX\ufffd\ufffd\ufffd8\ufffdz}U?@Vbɍ\ufffd\ufffd\ufffd\ufffdd\ufffd\ufffd\ufffdy\u001cӻ\ufffd\t\ufffd\ufffd\ufffdX\ufffd\ufffdQ\ufffd\u0008\u0002b\ufffd\ufffd\u0017\ufffd\ufffdc\ufffd\ufffd\ufffd\ufffdm\ufffd\u0019)\ufffd\u0012\ufffd\u0013\ufffd[1\ufffd\u0005\ufffd\ufffd\ufffd+\ufffd\ufffdc\ufffd\u0015\ufffdJ\ufffd\ufffd\u00000 \ufffd?\ufffdS\ufffdj]Zn~\ufffd\ufffd\ufffd\ufffd \ufffdx\ufffdjG\u001f!hi\ufffd\ufffdg\ufffd\ufffd\ufffd\u001b`\u0013N\ufffd'2d߆\ufffd;\u001f\ufffd\ufffd\ufffdl\ufffd\u0016\u0000\ufffd\ufffdH\u0001\ufffdd\u0012\ufffd\ufffd-\u0010Az\ufffd\ufffd+\u0005D.\ufffd\ufffd\u000eV_Vv\ufffd~7\ufffd\u001d\ufffd8\ufffd\u0012\ufffd\ufffdx\ufffd6\ufffd\ufffd\u0018\ufffdLDѣ\ufffd\ufffd,1q\ufffd\ufffdBP\ufffd\ufffd\ufffdcc1I볩3݆\ufffd\ufffd\u0013j\ufffd-\ufffd\ufffd_\ufffdh\ufffd{n$\u000e_B\ufffd6A\u001a\ufffd\ufffd\ufffd\ufffd\ufffd>PP7\u000b\r\u0004\ufffdv\ufffd\ufffd7\ufffdI\ufffd\ufffd\ufffd<2\ufffd{f\ufffd*\ufffd\ufffdO\ufffdI\ufffd\ufffd\ufffd\ufffd+^8\ufffdY%\ufffdn\u001f\ufffdƤ\u001fq$\ufffdV\ufffd~\ufffd\u0013_\u001b\ufffdk\ufffd\ufffd\ufffd\ufffdO\ufffd\ufffd\ufffd\u0007Xvh\ufffd\ufffdd\ufffdR\u001f㊓&m'\ufffd\ufffdCi\ufffd\ufffd\ufffdI{\ufffdyԛ\ufffd\ufffd:o\ufffd\u000c\ufffd\u0017TL\ufffdޟ\u000bD\ufffd\"/\ufffdŰ\ufffd\u001f\ufffd#\u000e|<\ufffd_\ufffd\ufffd`\ufffd\ufffd{\ufffd\ufffd\ufffd5\ufffd\ufffdy\ufffd\ufffd4i\ufffdDb\ufffd-\u00030\u0010\ufffd=nB5M\ufffd\u0008\ufffd:\ufffd\ufffd\ufffdԑ\u0018\ufffd\ufffd0\ufffd\ufffdX\u001a\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffdU2\ufffd\ufffd\u0011\u0003\ufffdP\ufffd':\ufffd\ufffdE\ufffd\u000c\ufffd*\ufffd\u0019\r\ufffd\ufffdM\ufffdsRc\u0013\ufffd\u001e\ufffd\ufffd\u000b:\ufffd\u001cQ\ufffd\ufffdr\ufffd\ufffdo\ufffd\ufffdC\u0008\ufffd4\ufffd\ufffd\ufffd\u000b\ufffdz\ufffd\u0005D\ufffd\ufffdlN+$\u001dg\ufffd\ufffd\ufffd\u000c\u0005\ufffdq{\ufffd\u001a\u000c\ufffd\ufffd\"\u000ewK?\ufffd\u001b\ufffd{M.M\ufffdR\ufffd\ufffd9\ufffd\u0001\ufffd\ufffd\ufffd\ufffd\u000b\ufffd\u001fd\ufffde\ufffdŏ\ufffdװ|i\ufffd?\n\ufffd2\u000bD\ufffdc\u000eR\ufffd\ufffd\ufffd\ufffdE9\u0015\ufffd)\ufffd\ufffd\u0003?\u000e\ufffdldr֬\ufffdl{\ufffdĮ\ufffd\ufffd\ufffd\ufffdR\ufffdWȧ\ufffd\ufffd\u0015\ufffdmoĦ.\u001b\ufffd\u0015\ufffd\u000cww\ufffdꚷ\u0001\ufffd\ufffd\ufffd\ufffd\ufffd\u001aÐ\ufffd\ufffd\ufffdR\u0017m\u0003tԠ\ufffd\ufffdgi\ufffd\ufffdI\ufffd\ufffd\u000f\ufffd\ufffd\ufffd]\ufffd\ufffd\ufffdj\u0012~\u0011\ufffd1\ufffdŬf\\\ufffdkwBk\ufffd\ufffd\ufffd\ufffd޲B\ufffd\ufffdM\ufffd\ufffd\u0013\ufffd7\u0006~\ufffdHayz\ufffd!okF\tA\ufffdX\ufffdw=\ufffd?\ufffds\ufffd\ufffdf\ufffd\ufffd\ufffdΘ\ufffd\u000c\ufffdu\ufffdȭ\r\ufffd\ufffdj\u0015\ufffddͻ*\ufffd\ufffd\ufffdL򯵰jÅ<\ufffd:\ufffdN\ufffdZr=\ufffd\u0010\ufffd7\u0010j\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0018\u0005\ufffdd\ufffd+\"\ufffd\u0014M\u001f4\u0013\ufffd|3\ufffd\u0011\ufffd$L\ufffd\ufffd\ufffd\ufffdO\u001d\ufffd\ufffd\ufffd\u001d\ufffd#3\ufffdD t-\u0006\ufffd\ufffd\u000e\ufffd\ufffd\ufffd\u0002 \u0006\ufffd\u001d\ufffdF\ufffd\u0005\tz\ufffd\ufffd5zU\ufffd7\ufffdMQ::E\u0010\ufffd\ufffdϷ\u0011M\ufffd΋\u001d\ufffd\u0002\u000c\ufffd\ufffdT8\"\ufffd57\ufffdO\u000f\u001f\ufffd8\n\ufffdy\ufffdv{\ufffdR\ufffd\ufffd\ufffd\ufffdnN\ufffd\ufffd-^=$\ufffd\ufffd\u000f)4\ufffdR\ufffd\ufffd\u0010:\ufffd\"Ӛ\u0016\ufffd\ufffd\u0003R\ufffdl._\ufffd\ufffd\ufffd\ufffd\ufffdAr\ufffdBF\ufffd\u0016(\u0004\u0019\ufffd\u0015%E\ufffdm\u0007\ufffd\ufffd\ufffdk\ufffd. \ufffdm}\u001dD>.\u0014aσ\ufffd\ufffd\ufffd\u001e\ufffd\ufffd\ufffd\u0015\u0011\ufffd\ufffd8<[\ufffdA\u0019/\ufffd\ufffd\ufffd݀Lݺ\ufffd\ufffd\ufffds\ufffd\r\ufffd{O?\ufffdE\u0019\ufffd\ufffd\u0007\u001d~qc\ufffd7\ufffdiE\ufffd\ufffd\ufffd\ufffd?\ufffd\ufffd\\F\ufffd\ufffd\ufffd%Q\ufffdF\ufffd<K\ufffd;.\ufffdk\ufffd\ufffd;,\u0018\ufffd\ufffdY\ufffdg\u0004\ufffd9μs\ufffd\ufffd(\u000f\ufffdDo\ufffd6\ufffd"}
2025-04-26 17:05:12.673	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 0, "total_records": 1}
2025-04-26 17:05:12.673	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 17:05:12.673	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.359022167s"}
2025-04-26 17:05:12.673	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 17:05:12.673	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x80378a28Cb6eBbB235F604530936EEd5D9Dec2ED", "username": "test_user", "encrypted_key_length": 6438, "encrypted_key_der": "\ufffdf\ufffd\ufffd\ufffdy\ufffd\ufffd\ufffd\ufffd\"?\ufffd\ufffdD\ufffd\ufffd\ufffdk\ufffdJ\ufffdsO\ufffd\ufffd+\u0004\ufffd\ufffd'\ufffd<\ufffdLp\u000c.D=\ufffdj\ufffdMF\u0002/4+\ufffdO\ufffdu>\ufffd\u0005\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdMQŰ\u001c\ufffd4\ufffd\ufffd\ufffdK\ufffd\\\t3?\u0012c\u0014\ufffd\ufffdX?=%\ufffd\ufffd0%\ufffd\ufffd]Tz\ufffdwl\ufffd\t9Kۊ\ufffd\u00192\ufffdӎ7\ufffd\ufffd\ufffdxL\ufffd\ufffd\ufffdG\ufffd)\ufffd\ufffd]\ufffd\u001a\ufffd\u0015\ufffd\ufffd\u0016\r\ufffdBE\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffdu\ufffd\ufffd\ufffdlڋ\ufffd\u0008\ufffd\ufffd_\ufffdZ\ufffd\ufffdo\ufffd\ufffd/\ufffdN\ufffdt\ufffd\ufffdE\ufffdB\ufffd\ufffd\u001aW\ufffd\ufffd\ufffd$K\ufffd}:\ufffd²K\ufffd\ufffd\ufffdk\ufffd9\u000c\ufffd\ufffd\ufffde\\D\ufffd\ufffdu\ufffd\ufffd\ufffd\ufffdE\ufffd\u0002yտ\ufffdNH\u0017x\ufffd\u001e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd0\u001c\u001b\u0007w`\ufffd婧\ufffd>\ufffd\ufffd\ufffd%\ufffd\ufffd\u0008[\ufffd\ufffd\ufffd\ufffdt\ufffd\u001a\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffdn33^(\ufffd\ufffd\ufffd}:\ufffd\u000fh\ufffd>\ufffdiQ\u000b\ufffd\ufffd?zh\ufffd\\\ufffd\ufffd_\ufffd\ufffd\ufffd7\u0015\ufffd^\ufffdPdPf<Uz\ufffd\ufffd\u0010O\ufffd\ufffd\ufffd\ufffd\u0005\u000fɛ}\ufffdʝ\ufffdP\ufffdPة\ufffd\u0006\u0011\ufffdF_\u0008\ufffdz\u0004G&\ufffd\ufffd-z\ufffd\tt&[\u0011\ufffd\ufffdK\ufffd\ufffd&\ufffd!J\ufffdx\t\ufffd\u000e\ufffdS\u0010\ufffd3\ufffd0\ufffd\u000f\t\ufffd!ٮ\u000f\ufffdZ\ufffd\ufffd\ufffdѨ\ufffd)*\ufffd\ufffdW\ufffdTf\ufffd.4霒=\"\ufffdeɶc\nW~\u000c4\ufffd\u0010\u0006\ufffd&\u0018\ufffd.'R\ufffd\ufffd\ufffd\ufffd\u0017\u0006\ufffd\ufffd\ufffd\u0011\ufffd5\ufffd\ufffde$\ufffd7pk\ufffd9\t\u00038\ufffd\ufffdPy\u0002\ufffdY$OZ\ufffd-\ufffd\ufffd\ufffd%\ufffdl\ufffdh>\ufffdK\ufffd\ufffdN\ufffdE\u001e\ufffddJ:ʢ\ufffd)\ufffd`傒ܳ\ufffd҆Ź\ufffd9\ufffda\u0015\ufffd}n\ufffd瓛\ufffd\ufffdJ\ufffd\"\ufffd\u0002\ufffd\ufffd\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd\u0017\ufffdjCw\ufffd\ufffdy\ufffdV\u0007\ufffd\u0013T\ufffd\ufffd>\u0000\ufffd\u0018\ufffd\ufffd۰\ufffd\ufffdS\ufffd3\n\ufffd\ufffd\ufffd=\ufffd\ufffd\ufffdU\r\ufffd\ufffd\ufffd\ufffdl\ufffd\ufffd\ufffd\ufffd\ufffdk\ufffd\u001d\"\ufffd\ufffdJ\u0014>\ufffd\\/\ufffd(Z\ufffdG\u0003 $H\ufffdS\ufffd<\ufffd\ufffdW\ufffdm\\\ufffd\u0016;\ufffd\ufffd\ufffd=\ufffd\u0012\u00188\u0005\ufffd\ufffd\ufffdְ0\ufffd\ufffd\ufffd\ufffd\ufffd6q\tT\ufffd\ufffd\u0002\ufffdw\ufffdL\r\ufffdFF\ufffd7#\ufffd\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffd\u001c\u0010\ufffd0%0\u0004\ufffdn.,'\u000f]\u000f\ufffd\ufffd*5L@N\ufffdu\ufffdC\ufffdέ{\u0002\ufffd\ufffd58\ufffd\ufffd0F\ufffd${.ڃ\ufffd0\ufffd<1\ufffdG\ufffd|\u0003\ufffd\ufffd>%֜\ufffd\ufffd\ufffd/ǎ\ufffd\u0014X\u000fd\ufffdJv6&*\ufffd\ufffd\ufffd'\u001b\u0018fL\ufffd\ufffdg\ufffd\ufffd\u0012\ufffd\ufffdŞ^\ufffd\ufffd\ufffd5\ufffdl3{=\u0001\ufffd\ufffdh\ufffd\ufffd\ufffd2\ufffd\u000e\ufffdI\ufffdj\ufffd<\ufffdN$\u0014c\ufffd\u000e\ufffd[v\ufffd\u0014z\ufffd\u0011\ufffd\ufffd\"\u0002)\ufffde\ufffd\u0019\ufffd\u0002\ufffd\ufffd\ufffd^\ufffd\ufffd[s6e\ufffd\ufffdU\ufffd\u001d\ufffd\ufffdg\ufffd\ufffd\u001bg\\\ufffd\ufffd\ufffd\ufffd3n\u001e4%\ufffd\ufffd\ufffdbf]\u0000\ufffd\ufffdV\ufffd\r\ufffdf\u0000\ufffdu\ufffdJ\ufffd\ufffdƟ\ufffd\ufffdT\ufffd5q\ufffd\ufffd\ufffdR\ufffd\ufffd\ufffd\ufffd2\ufffd\ufffdYk\ufffd׫O|J\ufffd\u000c&\ufffdM\ufffd\ufffdj]#\ufffd\ufffd\ufffd\ufffdrƙ\ufffd|\ufffd\ufffd\ufffdʠ\n\ufffd\\\u0014\ufffd\ufffd3\u000f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001e[\ufffd\u0006\ufffd\u0008\ufffd\u0002.\ufffdRX\ufffd\ufffd%\u0002\ufffd\ufffd`\u0018Lu\u001bv8\ufffdi\ufffd\u001b\ufffdOTH󄧑\u001d\ufffd\ufffdW\ufffd\ufffd \ufffd\u001c\ufffdh\ufffd\ufffd\ufffd\ufffdf(\ufffd;\ufffd\ufffd\ufffdq\ufffdL,\ufffdKD\ufffdw~\ufffd[1\ufffdy|\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd`\ufffd\u0008\ufffd-\u0007\ufffdb\u000e0\ufffd\ufffdVo\ufffd&q\ufffd2\"\ufffd\u0011 |=`\u0001\ufffdz\ufffd=7\ufffd\u0006\ufffd\ufffdY\u0000\ufffd\ufffdu\u001dKqR\ufffdW0\ufffd\ufffd\u001aG\u001b\ufffd\u001ab\u001ab\u0007\u0002O\u0000\ufffdQY]t\u000e:\ufffd\ufffd\"\ufffd8l\u000f\u000c-\ufffd\ufffd{\ufffdD\ufffd`\ufffdD\ufffd\ufffd\u001b\ufffd\u0001e\ufffdY\ufffd1gA\ufffd<\ufffd\ufffd\ufffd@~\ufffdbCA_\\\ufffd\ufffd,\ufffdjj;]6\\\u0000Mz\u0003\ufffd\ufffd\ufffd\u000bt\ufffd\ufffdz\ufffd\ufffdBu\ufffd(̵\ufffd\u00028\ufffdlJ(k[\ufffd\u001dIX\ufffd\ufffdJn\ufffdbp\ufffd\u0017\ufffd\ufffd\ufffd\ufffd\ufffdR\ufffd\u000f=\ufffdq\u001d\ufffd\u0001S\ufffd\ufffdTa\u001d\ufffd\ufffd8EXH\ufffdZ\u0016n@ܹ<\ufffdB\ufffdCM\ufffd\u0016\u0019\ufffd\u0005~+[\ufffd\ufffdM\u0017}\ufffd\ufffd\u0015\ufffdѤl\u0018GC\ufffd\ufffd^\u001d\ufffdև\t\ufffd\ufffd\ufffdg\ufffd\ufffdk\ufffd\u000e\ufffd'\ufffd\ufffd\ufffd\u0019\ufffd\ufffdq\ufffd\u00122\ufffd:\ufffd\ufffd\u001e°\ufffdT\ufffd\ufffd&\ufffd\ufffd\ufffd&/\ufffdg\ufffd\ufffd\ufffd\u001e9\u0005\ufffd\ufffd\ufffd\u001f\u000e\\a\ufffd\u0012a\ufffd\ufffd\ufffdm\ufffdGRg\ufffdc\ufffd\u0012\u0015\ufffdF\ufffd\ufffd{\ufffd-\ufffde\ufffd\ufffdǅ\ufffdb\u00132@\ufffd\u000f]\ufffd\ufffd\u0003g\ufffd\u0012\ufffdR\ufffd\ufffd\ufffd\u0005\ufffd\ufffd\ufffd\ufffdϪ|\u0004o\ufffd\ufffd\u0015\u0011\ufffd\ufffd'W\u0004~A\ufffdb\ufffd\ufffd\ufffd:Hio\ufffd+g`\ufffd(J\ufffdJ>pHhW\ufffd\ufffd\u0003\ufffd\ufffd~\u0000\ufffd\u0010\"\ufffd\ufffd\ufffd7\ufffd\ufffd%\ufffd|\ufffd\n\u000e\u0014۽\u0000\u0012\ufffd\ufffd\ufffd\ufffd\ufffd3\tw\ufffd&)\ufffdϐ\ufffd\ufffdo\ufffd\ufffd\ufffd\u0007\ufffdc8w@\ufffd\ufffd=\ufffd讧|\ufffd\ufffd\ufffdC\u0005ͷ\ufffd\u0007\ufffd\ufffd\ufffd6e\ufffd\ufffd\nѨ\t\ufffd\ufffd\ufffdP\u0013\ufffd\ufffd\u0003\ufffdd:\ufffd\ufffdJ\ufffdKEX\ufffdts\ufffdh4\u001b\u001c8\ufffd\ufffd\ufffd\ufffd\ufffdB#$\u001e\u0019(\ufffd\ufffd\u000c\ufffdBja\"\ufffd/\ufffd1$\ufffdJ\ufffd\ufffd\ufffd\ufffd2\ufffdy{\ufffd\u0006.:<cDݭ\ufffdB\ufffdX\ufffd<\ufffd\ufffd#~\u0008\ufffd\ufffdye֖\u001a\ufffd\u0015\ufffd9IP\ufffd\ufffd\u0007@\u0014\ufffd\ufffd>\ufffd\u0001\ufffd/\ufffd_\ufffd*\u0001(\u0006\ufffds\ufffd(_\n\ufffd\ufffdK\ufffd\u001c\ufffd\ufffdIg^\u001aB\ufffdN#\ufffd\ufffd\ufffd;\ufffdM\u0011\u0012\ufffd\ufffd\ufffd\u0005M\ufffd\ufffd3?\ufffd\u001a^;\ufffd\ufffd綩縸\ufffda\ufffdH\ufffd\ufffd\ufffd\u0016\ufffd\ufffdn\ufffd\ufffd)|{\ufffd5\ufffds0\ufffd\ufffd\ufffdO\ufffd\u0001\u0002\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffd<\ufffdwk\ufffd\ufffdŏ\u001f3P\ufffdr`\ufffd\t'\ufffd\ufffd\u0019\ufffd\ufffd\ufffd\ufffd%1\ufffdQ\ufffd\ufffd`\ufffdyb\ufffd\ufffdj\ufffd\ufffd;\ufffdG\ufffd\ufffd\ufffd\ufffd\ufffd&O\u0003\ufffd\ufffd\ufffd)\ufffd \ufffd\u0004\ufffdb\ufffd\ufffdTW/\ufffd@Gߟ\u0008\ufffd\ufffd^\ufffd0AԤ\ufffdv\ufffd\ufffd\u001b1\ufffd\ufffd\ufffd<\ufffdY\u0011\ufffd\ufffd5),Tc\ufffd\ufffdB\u001fD\ufffd\ufffd\ufffd\u0016\ufffd\ufffd:g\u0012Y\u0012\ufffds䁜=8+\u0003L\ufffdV\ufffd?\ufffd\u0012\ufffd\r\ufffd-ܔ\u001b\ufffd,\ufffd:\ufffd87 mzz*\u0013\ufffdԣ\ufffd\ufffdw\ufffd\u001cSI\ufffd\ufffd\u0005\ufffd\u0019l\ufffd\ufffdڛV_\u001cjZ1\ufffd\ufffd\ufffd\ufffd\ufffd\u000c\ufffd\ufffd\ufffdP\ufffd\ufffd6vo\ufffd\n\ufffd\ufffd銐\u0014\u0011\ufffd\ufffd\ufffd3\ufffd\u0006\ufffdJ\ufffd_(\ufffd\ufffd븼7ݡ\ufffd\ufffd\ufffd-\ufffd\u001f5\ufffd\ufffdeԇ6\ufffdl\ufffd\ufffd\ufffd4\ufffd\u001bl\ufffdDb\ufffd\u0015\u0007\ufffdI,1\u0004\\S\ufffd\ufffd\ufffd\u0019\ufffd%\ufffd\ufffd\ufffd4\ufffd\u00010\ufffdk\ufffd\ufffd\ufffd\ufffd\u000e\ufffdJ\ufffdA\ufffdqb~ϒǊ\ufffd\u001d㗹\u001b@\ufffd\ufffdG\ufffdd\ufffd6\ufffdJ!\ufffdZq\ufffd\ufffd'$#NO\ufffd8\u001b\ufffdBX\u0014\ufffd\ufffd\ufffd\ufffd(\ufffd&\u000cx\u0002m?s+=\ufffd\ufffdC\ufffd\ufffd\ufffdX\u0004ԓJ\ufffd\ufffd\ufffd<\ufffd\u001d\ufffdj.\ufffd\u0010#+Nnm\ufffd\ufffd\ufffdǍH\ufffd\ufffdWj\ufffd\ufffd!\ufffd/\ufffd\ufffdD\ufffd[\ufffd\u0014>\ufffd\ufffd\ufffd3\ufffd\u0000\ufffd\ufffd9L\ufffdB'\ufffds\ufffd\ufffd\ufffd\ufffd\ufffdx\ufffdC\ufffd\ufffd\ufffd\u0017>]\u001b~\u0012(\ufffd\"ēއQG\ufffd\u001c\ufffd\u0016\ufffdтw\ufffd\ufffdV*\ufffd\ufffd\ufffd\ufffd{Ŋ\ufffdz\ufffd?\ufffd[ \u000e\ufffd\u0014{\u001f\ufffdٛ\ufffd`\ufffd0\ufffd\ufffd,\ufffd\u0011\ufffd\t\ufffdy\ufffdX;\ufffdO\ufffd$\u00122\u000eD\ufffdiN\ufffd?h\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffd^%\ufffd#ON60A\ufffdo\ufffd\ufffd\ufffd[\ufffd\ufffd\ufffd>;\ufffd\ufffdq\ufffd\ufffd\u0003,m=t+(fó\ufffdBZ\u0008\ufffd\ufffdyC\ufffd\ufffd\ufffd/\ufffdb\u001e\ufffd\ufffd\ufffd\ufffd m\ufffd¿[\ufffd7Ё\ufffdTPm\ufffd\ufffd;\ufffd\ufffd\ufffd\u001a<9P&\ufffd\ufffd.,\u0001\u001d\u0010\ufffd\ufffd\ufffd\ufffd\u0012V\ufffd\ufffd\u0012\ufffd\u0005\ufffd3\ufffd-( X\ufffdb\ufffdc\ufffd!vt\ufffd.\ufffd\u000ev\u0007\ufffd\ufffd\ufffds\ufffd\u001dR\ufffd\ufffdm\ufffdQ\ufffd\u0016v\ufffd\u001e\u000e\u0000 \ufffd\u0014\ufffd\ufffdE[\ufffdt\ufffdkG\ufffd9]4K#\ufffd,\u001ej\u0011\ufffd\ufffd\ufffd0\u000f\ufffdd\ufffd\ufffd\ufffd\ufffd8\ufffd\ufffddL\ufffd\ufffd\ufffdj\u001b\ufffd\u0003j\tr|\ufffd\u001f\u0006\ufffd\u0016\ufffdY\ufffd\u001b\u0000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd*\ufffdE;#@\ufffd\ufffd\ufffd?\ufffd\u0004\ufffdS\ufffdw\ufffd\u0011\u000c\ufffd\ufffd\ufffd\ufffd嘌r\u0015\ufffdm\ufffd2\u001e\ufffd\ufffd\ufffdu\ufffdW|\ufffd\ufffd\ufffd\u00168\ufffd\ufffd\ufffd\ufffdj\ufffd6\ufffd*k\ufffdU9\ufffdn\u0001\ufffd\u0006M\ufffdr\"}\ufffdI|\ufffd?9\ufffd\ufffd\ufffd\ufffdc%7\ufffd]\ufffdk\ufffd\ufffdt\ufffdh\ufffd\ufffdhӞ\ufffd~\ufffd@\ufffdW(4T2\ufffd\ufffd'\u0015\ufffdJ\"\ufffd]\u0010\ufffd\ufffd\ufffdiƅL兮Cv\ufffd}\ufffd\ufffd\ufffd\u0000\ufffdͱ\u001cgb\"}?\ufffd\ufffdf\ufffd\ufffd\ufffd\ufffd\ufffd\u0015\ufffdP/d\u0007vFT\ufffd\ufffd\ufffd\ufffd\u000f./!\ufffd\u001eX6\ufffdν\u0007w\ufffd\ufffd\u0017\ufffd\ufffd\u0001(\u0008\u000eM\ufffda\ufffd\ufffdN\ufffd.u\ufffd(\ufffd,\ufffd\ufffd\u0013\u0012w\ufffd\u0013\ufffdV\u0005\u0000u|Og\u0017\ufffd\ufffd@G\ufffdj\ufffdG\ufffd\ufffd\ufffd\u0019\ufffd\ufffd\ufffdN\ufffd\u0001\u0001\u0018f\ufffd\\⣐[\ufffd;$\ufffdPI\ufffd\\)h\ufffd\ufffd.\ufffd\ufffd\ufffd\u0007,\ufffdK\ufffd\u0011\ufffd\ufffd:\u0011\ufffd:-\ufffdk\ufffd_f\ufffd\u001dQC_\ufffdE\ufffd\ufffd\ufffdٿJ\ufffd\"\ufffdI\ufffd\u001e\ufffd\ufffd\ufffdJ\ufffd\ufffd\ufffdg@)-z\u0005\ufffdw\ufffd\ufffd\n\u0003\u0002{\ufffd\ufffdTQM\ufffd\ufffd/\ufffd\ufffd;꾋\ufffdAǼO\ufffd\ufffd͌\ufffd \u0004\ufffd\ufffd\ufffd|\ufffd\ufffd\u0017?=g\ufffd1\ufffd\ufffd\ufffd\u000f-><F\ufffdb\u001d\ufffdp\ufffd\ufffdw\ufffd\ufffd\ufffd\ufffd<I\ufffdsX\ufffdw\ufffd\u0002\ufffd\ufffd\ufffd\ufffd].Ɉ]B\ufffd>j\ufffd~g\ufffd\ufffd\ufffd\ufffd\ufffd\u000b\ufffd\ufffd\u0015\ufffd(\r][\ufffd,r\ufffdE\ufffd\ufffd\u0001\ufffdw}\ufffd:\ufffd\ufffdم\u0014\u0015{\ufffdt\u001b\ufffd\ufffda\ufffd\"\ufffd\ufffdF\ufffd8\ufffdE%\ufffdCŴ\ufffd\u0008\ufffd\ufffdOS\ufffd\ufffd\ufffd9\ufffd\ufffdM\ufffde\ufffd\u001f\u0003\ufffd\ufffd_\ufffdXG^H\ufffd\ufffd\u0017F\u0013\ufffd\ufffdn\ufffdp\ufffd\u0007\u0001\ufffd\ufffd@]dy\u0003ܤ\ufffd \u0003r\ufffdٖ\ufffd%\ufffd{͎\ufffd)&\ufffd\ufffd\u001e\ufffd\ufffd\ufffd\ufffd7ф4\ufffd\ufffd\ufffd\ufffd4z@\ufffd\ufffdЈߣ-n\ufffd\u0010\ufffduI\ufffd\u001eR\ufffdب9\ufffdkC\u000e\tq\\\ufffd?'\ufffdV\ufffd@\ufffd\ufffdv\u0000Gs\ufffd\ufffd\ufffd#?e\ufffd^\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdJ{\ufffd_\ufffd\ufffd\ufffdNRB\ufffd\u000c\ufffd~:\ufffdC\u0012\ufffd\u0004\ufffd\ufffd4\u0007\u000b+Q\ufffd\ufffdП\ufffd \ufffd`\ufffd6O\ufffd;n\ufffd\ufffd\u0004\ufffd\ufffd\ufffdW\ufffd\ufffd\ufffd/\ufffdUJ+\ufffd\ufffd:\ufffd\ufffdB\u001f\ufffdW\t^ˉFס\ufffd8{\ufffdfv\ufffd\ufffd(\ufffd\ufffd[\ufffd\ufffd\ufffd\u0017\ufffdhc\ufffdf\"\u001aL]\u000e\ufffd;\ufffd\u000cGo\ufffd\ufffd(\ufffdN\ufffd\ufffd\u0001\ufffd~\ufffdE\ufffd\ufffdLh\u000cI\ufffd\ufffdGX\ufffd\ufffd\ufffdd\ufffd2~\ufffdxѽUw\ufffd\u0017F\ufffd\ufffd(Ϣ\ufffd@\u0012q\ufffd\ufffd0$ar/\u000ce3\ufffd\u000cC,S\ufffd3\ufffd\ufffd\u001d\ufffd\ufffd\u001aٛiƁ\ufffd\u0000\ufffd\ufffdAC좭ţc\ufffd;<\u0004S\u0007=\ufffd\u0006\ufffd\ufffd\ufffd\u0012\ufffdk\u0005\ufffd\ufffd \ufffdP|p\ufffd\ufffd\ufffd\ufffdu\ufffd\ufffd\ufffd%\u000f\ufffd:.bכ\u0018gD\u0007\ufffdO\ufffdJ\ufffd\ufffd\"\ufffd\ufffdJj#F\ufffd\u0003\ufffd\ufffd\ufffd<T@ɂ\ufffdq\u000e\ufffd_.\ufffd\ufffd\u0005$\ufffd\ufffd\ufffd\u0007(v&\ufffdĹ\ufffd2\ufffd\\I\ufffd@\ufffdO\ufffd\u0012I\ufffd8\ufffdp\ufffd\ufffddD\ufffd\ufffd\ufffd\ufffd\ufffdM\ufffd)\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdB\ufffd\ufffd\u0011x\ufffdj\ufffd\ufffd\ufffdP,\ufffd\ufffdm\ufffd\ufffd\ufffdo\ufffdkjWQ\ufffdeEuŞ \u000e\ufffdPy\ufffda.\ufffd\u0016l ^郢\ufffd\ufffd\ufffd\ufffd%\ufffd\ufffdx4n;i\ufffd\u001b\ufffd\ufffd\ufffdH\ufffdZ*;}3\u0019\ufffdQ\ufffd\ufffd\ufffd\ufffde\u00026</\ufffdS\ufffd-}-\ufffd\ufffdQ\ufffd\u001aю\ufffd\ufffd{W\ufffd\ufffd<K\u001e\ufffd\ufffdZ\ufffd\u0014\ufffdT\ufffd\ufffd\u0008\ufffdy\ufffdzӋÒ\ufffdL\ufffd1\ufffd\ufffdK\ufffdwN|\ufffdscw{axO`\n(\ufffdN4cC,\u0007\ufffd\ufffdw\ufffd\ufffd\ufffdIo\ufffd*\ufffd\ufffd\ufffd]\r\ufffd\u0019\ufffdX\u001e\ufffd\ufffd\ufffd\ufffd\u0000\ufffd:\ufffdS%$\ufffdS\ufffd=#\u000b\ufffdhI\ufffdM\ufffd\ufffd\u000b\ufffd\ufffd\ufffdm\ufffd\u0002M\ufffd$I \ufffd\u0018\u000b+$\ufffdi\ufffd\ufffd\ufffd[zW\ufffdk\ufffd\\\ufffd\ufffd\u0001Lؓ\ufffdf\ufffd{\ufffd\ufffd\\s/>L\u001e\ufffd\ufffd|\ufffdL'\n\ufffdu\u001f\ufffdY\u0019\ufffdaNrR\ufffd\u0002f\ufffd\ufffd\"|$\ufffd/\ufffd\ufffd\ufffd\"\ufffd3\ufffd\ufffd\ufffdN{\ufffd>И\ufffdy4\ufffd8WS\ufffd\ufffda\ufffd\ufffd\ufffd\ufffdu>\ufffd\ufffdo\ufffda\ufffd\ufffd2\u0000\ufffd~ͻJ\u0011A#0\u0002d`\ufffdq\ufffd\ufffd\ufffd,\u0017|\ufffd\u0008e8\ufffdt.\ufffd|h\ufffd\ufffd\u0019Ўc\ufffd\ufffd\ufffd\ufffd\ufffd=\ufffd`F\ufffdIkެ\u0018\ufffd\"\tT\ufffd\u0006\ufffdq\ufffd\ufffd(\ufffdJ+5\ufffd\ufffd\ufffd\ufffdd\ufffd\u001f5\ufffd\ufffd\ufffd}\ufffd&S\ufffd\ufffd\ufffd9-\ufffd,1Yr\ufffdt\ufffdT\ufffd޴_:\ufffd\ufffd\ufffd\ufffda4w\u0012=U9\ufffd\u000b\ufffdԤ\ufffd\u001c\ufffd]z\ufffd\ufffd\u0003\ufffd\ufffd\ufffd\ufffd\u001c\ufffdO\ufffd\ufffdׂ\ufffd\ufffdj\ufffd?\u000b\ufffdi\ufffd\ufffdا\\\u0007\u001c9\ufffd\u001e\ufffdN\ufffd\ufffd\u0018\ufffd\"\ufffd\u000fa\u0004$\ufffd\ufffd${\ufffd_\ufffd\ufffd\ufffdu\ufffd;\ufffd\ufffd\ufffdc\ufffd\ufffd\ufffdE,\u0000\ufffd\ufffd\ufffdXI\ufffd@\u0017\ufffdQ}\ufffd\u0011\ufffd \ufffd3\ufffd\u001fhf\ufffd\ufffd#w\ufffd\ufffd\ufffd`O\ufffd\ufffdr\ufffdf9|{\ufffd\ufffdjW\u0004\ufffdx\ufffd\ufffd\ufffd;q\ufffdھ\ufffd\u000eŐ\u0016\u0008}J\ufffd[\ufffd\ufffdzb\ufffdy\ufffd\ufffd!K\ufffd\ufffd|\ufffd\u000e\ufffd\ufffd*\u001fL\ufffd\ufffd\u0013\u0011\ufffd\ufffd\u001b}\ufffd\ufffd&\u0014\ufffdX\ufffd1bU\ufffd\ufffdĥ\ufffd=\ufffd|\ufffd3\ufffd\ufffdM\ufffd\ufffd\ufffdqj2\ufffdt\ufffd\ufffd_\ufffduӈ\ufffd\ufffd\u0015\ufffd\ufffd\ufffd\ufffd偧\ufffd\ufffd\ufffd\u001f\ufffdW\u001d\ufffd_\u0006\ufffd\u0007\ufffd\ufffd\r?\ufffd\ufffd\ufffdG\ufffdJ~e4l\ufffd*͵\ufffd8w\ufffd\ufffd\"S\ufffd\ufffd\ufffd\"qNk\ufffd\ufffdb\ufffd\ufffd\ufffd\ufffd\u000e\ufffd\ufffd\ufffd\ufffd2hG;Q\ufffdOI8\u001b~\ufffd\u0006\u0017\ufffdɉ\t\ufffd'\ufffd\u0015\ufffd|\ufffd\ufffd\ufffd\ufffd)\ufffdl\n\u0011c\u001d\ufffd\ufffdx\ufffd-+KQ\ufffd\ufffd\ufffd?g\nkY\u001b\ufffd\ufffdA6Tiψ`W\u0018A\ufffdNR\ufffd\u001b\u0010\ufffdau\u001d^\u0018\ufffd\ufffd\ufffdө\ufffd\ufffd5\r\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdй.\ufffd\u0000.\ufffdm\"\ufffd4m\ufffd\u0019\ufffd&\ufffd\ufffd1\ufffd_b\ufffd\ufffd\ufffdJ7\ufffds'\ufffd\u000e+\ufffd\ufffdW+S\ufffd\ufffd\ufffd][\ufffd\n\ufffdVmÃ\ufffdf\u0019\u0007\ufffdZ\ufffd}\ufffd\ufffd4\ufffd\u00077\ufffd5\ufffd`-\ufffd\ufffd]\ufffd\ufffdES\r\ufffd\ufffd3cR\ufffd\u0006W b\ufffdˆ\ufffd\ufffd\ufffd\u001d\ufffd\ufffdj\ufffd\tǰ\u0005\ufffd\u0019Y#\ufffd\ufffdЃ\ufffdUZ+\ufffd\ufffd\u0012\u0018x+\ufffdf\ufffdt́\ufffd\ufffdT\u0016E\ufffdԙJ\ufffd\ufffd\u000fvi\ufffdm\ufffdۣ]-Y)\ufffdq\u0007\ufffd\u0013\ufffd\u000e\ufffd\u0010\ufffd\u000c\ufffd\ufffd\u001a\u000fv\ufffdf\ufffd\ufffdl,\ufffd;V\ufffdU\ufffdZ\u000c\u001a\ufffdn\u001d$^\ufffdp\ufffd\ufffd\u0015;Is\ufffd^\u0012\ufffd\ufffd\ufffdm\ufffd\ufffd\ufffd4\u001exR\ufffdٴLl\ufffd2\ufffd&\ufffd\ufffdZ\ufffd\ufffd\ufffd\u001dr\r\ufffd\ufffd:\ufffd\u0005Ԗ5%\ufffd\ufffd\u0006\ufffd:\ufffd1\ufffd\ufffd\ufffd\r\ufffd\u001fI\u000c\ufffdOиv\ufffd\u000e\u0018\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdf\ufffd\ufffd?\ufffd\ufffd&\u0013\ufffd\ufffd\ufffd¨\ufffd\ufffd\ufffd\ufffdm\ufffd\u000b\ufffdO\ufffd\ufffd/\ufffdq\ufffd%&\u0015p\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdC\ufffd\ufffd~\ufffd́Z\ufffd\ufffd\ufffd\ufffd\ufffdjxJ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdO\u0001\ufffdd\ufffd&\ufffd\ufffd\ufffd\u0010`\ufffdX2\ufffd\ufffd\ufffd\u0005M\ufffd\ufffd\ufffd8^p!\ufffd\ufffdk/\ufffdV\ufffd\ufffd.疦8\ufffd\ufffd\u001d\ufffd\ufffd\ufffdI\ufffd\\\ufffd\ufffd:Y\ufffdOLx\ufffd\ufffd\u0004\ufffd\ufffd\ufffd\ufffdtr\t\ufffdHϸ\ufffdw\ufffd\ufffd \ufffd\ufffd\u001d\ufffd4/\ufffd\u001c\ufffdS 4\ufffd\ufffd\u0004\u0015\ufffdy\ufffd%\ufffd\u000c\ufffd-\ufffdcD\ufffd\\\ufffd&t\ufffd\ufffdW*ݰPSt[\ufffd+Z\u001f*\ufffdH\ufffdр\ufffdb\u0005`\u0018Wsw\ufffd\ufffd\u0019oԕ\ufffd\ufffd)\u0005\ufffd'\ufffd\ufffd\ufffd-\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdي\ufffd忇&ETc\ufffd\ufffdz\ufffd)\ufffdYz\ufffd\ufffd\ufffdK\ufffdg\ufffd\ufffd7\ufffd\ufffdk\ufffdG\u0007\ufffd\ufffd\ufffd\"\ufffd\ufffd6\ufffdqA\ufffdaJ\ufffdD=\u0017\u0014O\ufffd\ufffd\ufffd\r\ufffd\u0005+\ufffd\ufffdT\ufffd=i*\ufffd\ufffdx͕Ή\ufffdul#E\ufffdR\u001f|\ufffd#\ufffd\ufffd܂\ufffd\tU\ufffdJ\ufffdkb\ufffdp\ufffd\ufffd\u0012\u001d\u0012\ufffd\u0001!P\ufffd\t8\u0000\ufffd\ufffdB\ufffd\ufffdo A\ufffd\ufffd\ufffd\ufffd\"1*\ufffd\u000eK\ufffd\ufffd\u0019\ufffd\ufffdZUg\ufffd-yt\ufffd\u000b\r\t*\u0018\ufffd\ufffd\ufffd\ufffd>\ufffd\u0007\u001b\ufffd\ufffd\t׹\ufffd\ufffd\ufffd\ufffdFܠ\ufffd\ufffd\ufffd}\ufffd&\\9\\\ufffd\ufffdn\ufffd\ufffd<\ufffdcx^L\ufffd\ufffdT^\ufffd}\u0018d2 \u001f\ufffdy\ufffd\ufffd\ufffd\u0011\ufffd\ufffd\ufffd*\u000e\ufffdhaJK\ufffd/'\ufffdr\u0000a(\u0004\ufffd\ufffdz\u0015\ufffdi\ufffd\ufffd'\ufffdE\ufffd\ufffd^\"\ufffd\ufffd\u0000\ufffd\ufffd0\u0003\ufffdkL\n\ufffd\ufffd>\tHޖ\ufffdB!\u001c\ufffd:\u0012\ufffd\ufffd\"f\ufffd\ufffdd\u0002\ufffd\ufffd\r\ufffd\ufffdj\ufffd\ufffdT2\ufffd\ufffd\u000cDg\ufffd\u0015C\ufffd\ufffdm\u0003^\ufffd\ufffd\u000e\ufffd\ufffd\ufffd\u0016\ufffdT\ufffd\ufffd٨sd\u0002N\ufffd\ufffdP\ufffd\ufffdӺS\ufffd5<\ufffdZ\ufffd7\ufffd\ufffd\u0018\u000f\ufffdv~\ufffd\ufffd\u000f\ufffd\ufffd\u000chnM\u0003l\u0012CD\ufffd+\ufffd\u0004\ufffdE\ufffd\ufffd\u0012>\ufffd0\r\ufffd@\u001a'Ґ\ufffd\ufffd\ufffd\ufffd\u0012\ufffd\\\ufffd\u0015\ufffd\u0003'\ufffd\u0003\ufffde\ufffd\ufffdY\ufffdK\ufffd\ufffd\ufffd\u000b6y]˚\ufffdI\ufffd\u001b{2\ufffd\u0014\u0007\ufffd\ufffd\r\ufffdV{ҧ\rp\ufffd<bǶ9t\ufffd\ufffd^@\ufffd\ufffd\"/\u0001\u0013\u0007\ufffd\ufffd\ufffd\ufffd\\U\u00071ݖ$\ufffd\u0003\ufffd-\ufffd\ufffd*\ufffd_\ufffd\ufffd\ufffd\ufffd0w\ufffd\ufffdS\ufffd\u0001l\ufffdpP\\g\r\ufffd.<6\ufffd\u000c\u0013\ufffd1yd=L\u0007\ufffd\u0012\ufffd\ufffd\ufffd\ufffd\ufffdNM!\ufffd\ufffd{Ib\ufffd\u0000\u0008\ufffdf\ufffd\ufffd\ufffd\ufffd1]=\ufffd\u000f/\ufffd\u0012\ufffd\ufffd|\ufffd\ufffd\ufffdO?.\ufffd_\ufffd\u001e\ufffd\ufffdor~\ufffd\u0004`\ufffdRx\ufffd\ufffdS\ufffd#\u000f\u0017\ufffdd\ufffdd\ufffd@\ufffd\ufffd\ufffd\ufffdM\ufffdO߲\ufffd\ufffdT-ַJ;Eݩkl\ufffd\u0010S݃\rDƺ\ufffdPES\ufffdя7NٍZ\u000el\ufffd~\ufffd-\ufffd\ufffd\ufffd{v\ufffd\u001b \ufffdlr\ufffd\ufffd\u001c1\ufffd\r\nng\ufffd _9#\u001b\ufffd\"\ufffd\ufffd\u0016\ufffd\ufffdh\ufffdd\ufffd\ufffd?\ufffd\u001a\ufffdMZ\u0006dnt\ufffd`\t\ufffd\ufffd\ufffd\ufffd\ufffd=\ufffd\ufffdF\ufffdۣ\ufffdB `\ufffdɄ;\ufffdϺml\ufffdbcTR\ufffd{*\u0006\ufffd\ufffdh\ufffd\u0001\ufffd\u0001\ufffd\ufffd\ufffdY\u0001\ufffd\ufffd\ufffd2'\ufffd!\u0000_\ufffd\ufffdh\ufffdç\ufffd\u0000\ufffd\ufffd;\u0001\ufffd(\ufffd\ufffdĀ\ufffd)\ufffd\ufffd\ufffdc\u0007D\u0012\ufffd&\ufffd\ufffd\u00187\ufffd\ufffdz\ufffd}\ufffd\ufffd0\u0013\u0015f~mQ\ufffd^\ufffd\ufffd͔\ufffd\ufffdc\ufffd\ufffd\ufffd4\ufffdH\ufffd\ufffd\ufffd}\ufffdzf3\ufffd8\ufffd\t\ufffd\ufffd47\ufffdZ:]0,\rW\ufffd\ufffd\ufffd\ufffd\ufffd/X4\ufffdl]*\u0019\r\ufffd\\p+\ufffd\ufffd%\ufffd\ufffd5\rB\ufffd\ufffd˴\u0010ƄY\ufffd\ufffd\ufffd'\ufffd\ufffd\ufffd\ufffd՟\ufffd2\ufffd\ufffdSW\ufffd\u001e\ufffd):Ioyk\ufffd\ufffd~\u001eXA\ufffd\ufffd\u001e\ufffd\ufffd:\ufffd-\ufffd\rel\u000bw\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd^\u0018\ufffdA\u0010\ufffd\ufffd\ufffdn\ufffd\ufffdH\u0013\ufffd?3Rl\rի\ufffd\ufffd\u001c\ufffd\u0011\ufffdF\u001b\ufffd#nu\ufffdT\ufffd\ufffd\ufffd~ș\u001a\ufffd\u001b0a\ufffdO\ufffd<\ufffd=:\ufffd\ufffd+\ufffdTέ\u0013ٌA\ufffd\u000b\ufffd\u0006\u0019\ufffd\u0019\ufffd2ר\u0004\ufffd]\ufffd\ufffd\ufffdH\ufffd\ufffd\u001d\ufffdM\ufffd3\ufffd\u0000gZ\ufffd\ufffd\ufffdf\ufffd\u001b\u000b\ufffd\ufffd\u000bn\ufffd'%\u0016\ufffd\ufffd\ufffd+l6\ufffd\u0002\\.Ò\u0018I\ufffd\ufffdώ\ufffd\ufffd&\u000480^K\ufffd\ufffd\ufffd(\ufffd_\u0013\u0002D=8\ufffd\ufffd\ufffd\ufffd@\ufffd\ufffdKH\ufffd\ufffdm\ufffd0#I\ufffd\ufffd\ufffds\ufffdc7\ufffdRL\u000e\u0000\ufffd\u0010~\ufffd\u000cT\ufffd\ufffdc\ufffd\u0016L{\\\ufffd\ufffd\u0016\ufffd\ufffd(\ufffd\ufffd\ufffdi\ufffd\ufffd\u0000\ufffdE\ufffd@\u0011\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffdk?\ufffd*\ufffdKS\ufffdg=\ufffdBl\ufffdvK\ufffd\ufffd\ufffdeI@G\ufffd8\ufffd\ufffd\ufffd\ufffd#\ufffd\ufffdtR\ufffdU$M\ufffd3\ufffd\ufffd\ufffdZ\ufffd}/|\ufffdC\ufffd\ufffd\ufffd_k\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd;\u0012e\ufffd\u000c\ufffd\ufffd\ufffd\ufffd\ufffd!(db\ufffd\ufffd\u000c\ufffd\ufffd\ufffdF\ufffd%\ufffd\ufffd4\u001c\ufffdI\ufffd/2*ձ\ufffd6\ufffd!\u001cc\\\ufffdd\ufffd\ufffd\u0015\u000b\u0012\ufffd\u000f}\ufffd/4\ufffd\ufffdv!\ufffd\ufffdEo\ufffdo)\u0000l\u0004\ufffdBcr\ufffd\ufffd\u0015h\ufffd^\u0019a\ufffd\ufffd\ufffd\ufffdCB\ufffd\ufffdnt\u0002Iy[rw\u0011`\u0004\ufffd\u001dgb<\ufffd[\u00019\ufffdŻ\ufffd\ufffd\\\ufffd\ufffd/\ufffd\ufffd{\ufffd%\ufffd\ufffd\ufffd*\u001d4\ufffd,+\ufffd\ufffd\ufffd2\ufffd\ufffd\u0017\ufffdS\ufffdʬ\ufffdT\ufffdZ\ufffd\ufffd\ufffda\ufffdX\ufffdX\ufffd̑\ufffd@\ufffd~\ufffd6\ufffd\ufffd \ufffdc4\ufffdZP3[\ufffdg\ufffd\ufffdS'\ufffd\ufffd\ufffd\u000c(\ufffd\ufffd{\ufffd\ufffdd\ufffd0\ufffd\ufffdQ\ufffd\ufffdl\ufffd\u0003/\ufffd\u0006\ufffd\ufffd[f\ufffd\ufffd\ufffd\ufffd\ufffd4~\ufffd\np!\ufffdZ\ufffd\ufffd%ܜ\ufffd\ufffd\ufffd\u0002nx\ufffdg(\u000c\ufffd\ufffd'J\ufffd\u000b\ufffd\ufffd\ufffdQ\ufffd\ufffd\ufffd\ufffd\\\ufffd\u0011\ufffdp\ufffd\ufffd\ufffdC \u000c\ufffd\ufffd\ufffdo\ufffdl\ufffd\ufffdNY_d*Y \\\ufffd\u0008\ufffd}\ufffd\ufffd3R\ufffd\ufffd=\ufffd\ufffd\ufffd{\ufffd\\\ufffdz9:\ufffdT,ޤ\ufffdb\u0013\ufffd\ufffd\ufffd\ufffd\ufffdV\u0004i\u0011ѫ0\ufffdQq:$\ufffd\ufffdFԵ\ufffd\ufffdI\ufffd?\ufffd\ufffd{\ufffd\ufffd\ufffd>\u0001\ufffdf\ufffdΥ\ufffd\ufffd\ufffd\ufffdX\u0003*$\ufffdKNTC\ufffdo.\u0001\u0019+\u0008\ufffd\ufffd\ufffdL3\ufffd\ufffdd\ufffd\ufffd\ufffd#\ufffd\u0012v\u000ef8\ufffd\ufffd\ufffd\ufffd\t\ufffd\ufffd9\ufffd\ufffd;C\ufffd3X\ufffd\ufffd\u0015\ufffd\ufffd\ufffdi\u0007s\ufffd\ufffd}\ufffd\ufffdQ\ufffd\ufffd\ufffd\ufffd\u0003Z\ufffd\ufffd\u0007\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\\\ufffdxݫ\u001b.\ufffd\u0013\n\ufffd3\ufffd\ufffd,\u000f\ufffd\ufffdZ\nsJ\u001a\ufffd*|\u0001\u0014\ufffd/~VaxM\ufffd\u0003UN\t\ufffd\ufffd~z\u0011\ufffd\ufffd\ufffd;\ufffd\ufffdZL\ufffd\ufffdY\ufffd\ufffdV\u001a\ufffd\ufffd\ufffd\ufffd\ufffd2\ufffdS\u001f\ufffdP?.\ufffd\ufffd\ufffdl\u000eT7秺\n\ufffd\ufffdC\ufffd\u000c\ufffdr\ufffdw\ufffdy\ufffd\u0003\ufffd\r\ufffd\ufffd\ufffdMl\ufffdE\ufffd\ufffd\u0018\ufffd\ufffdH\ufffd\ufffd\ufffd3]#V\ufffd\ufffd*\u0018\ufffd}\ufffd?\ufffd2\ufffd\ufffd\ufffd/\ufffd\u001a\ufffd\ufffdh\ufffd.(\u001a\ufffdg\ufffdLq\ufffdS\ufffd\u001e\ufffd\ufffd\ufffdn\ufffd\ufffd\ufffdbX7\ufffd3\ufffdޓ'\ufffdd\ufffd\u001e\ufffd\ufffd\ufffd(v\ufffd_\ufffd\ufffd\ufffd\ufffdf}S\ufffdd\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffd7\u000c\ufffd\ufffdQ<\ufffdr5\ufffd\u0008O%\ufffd\ufffdq\ufffdq\ufffd\ufffd\u0003\ufffd\ufffd\ufffdc7A,\ufffdYm\ufffd\ufffd\ufffdxS\\ˢZ\ufffd654\ufffd\ufffd\n%\u0006U\ufffd\ufffdZK\ufffd\ufffdBM\u0008nh\ufffds\u0007\ufffd\ufffd\ufffd\n_\ufffdr\ufffdcbU\ufffd;"}
2025-04-26 17:05:12.693	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "376.001542ms"}
2025-04-26 17:55:07.041	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 17:55:07.041	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 17:55:07.041	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 17:55:07.041	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 17:55:15.548	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 17:55:15.549	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 17:55:15.549	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 17:55:15.570	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 17:55:15.572	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 17:55:15.575	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 17:55:15.575	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 17:55:15.575	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 17:55:15.575	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 17:55:15.575	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user"}
2025-04-26 17:55:15.575	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 17:55:15.575	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 17:55:15.575	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:55:15.575	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 17:55:15.575	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:55:16.547	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user"}
2025-04-26 17:55:16.547	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 17:55:16.547	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 17:55:16.547	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:55:16.547	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 17:55:16.548	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:55:17.547	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user"}
2025-04-26 17:55:17.548	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 17:55:17.548	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 17:55:17.548	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 17:55:17.548	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 17:55:17.548	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 17:55:17.813	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.265029291s"}
2025-04-26 17:55:17.813	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "264.592625ms"}
2025-04-26 17:55:17.813	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 17:55:17.813	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 17:55:17.813	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.237788917s"}
2025-04-26 17:55:17.813	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "02abfefa26f5e03af854b7673f728b15c624cd2b6c4a0d52ce7c3f1d3a712a3e54"}
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "02abfefa26f5e03af854b7673f728b15c624cd2b6c4a0d52ce7c3f1d3a712a3e54"}
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 17:55:17.813	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "02abfefa26f5e03af854b7673f728b15c624cd2b6c4a0d52ce7c3f1d3a712a3e54"}
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 17:55:17.813	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 17:55:17.813	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 17:55:17.813	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 17:55:17.814	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 17:55:17.814	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 17:55:17.814	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.65 KB"}
2025-04-26 17:55:17.814	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.23 KB"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.24 KB"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.26 KB"}
2025-04-26 17:55:17.820	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "message": "\ufffd\ufffd \ufffd\ufffdw\n\ufffd\ufffd\ufffdAX|\u000c\ufffd\ufffd\u000c\ufffd\ufffdxcN\ufffd\ufffd\u0010\ufffd\ufffd\ufffd\u0012\ufffd~\ufffd"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.27 KB"}
2025-04-26 17:55:17.820	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "message": "\ufffd&y,γ\ufffdJ0\u0011\ufffd\ufffd+\u000e\u001a\ufffdq\"\ufffd֖\ufffd\ufffdJ\ufffdmg֞Z;$"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "2cab3d2f1de7afb83525e532c4b06380b59a021e"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "c726792cceb3ac4a3011f9bc2b0e1a997122a1d696e8a34a806d67d69e5a3b24"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "2cab3d2f1de7afb83525e532c4b06380b59a021e"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "f0db2085ab770a989bee41587c0cd5ea0c95ed78634ed5d6108887bc12dd7ebe"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.23 KB"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.26 KB"}
2025-04-26 17:55:17.820	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "message": "\"\ufffd\ufffdp\ufffd@N\u0019\ufffd\ufffd\ufffd$l\ufffd\u0010\ufffd\ufffd\ufffd\ufffd\ufffdG2\u0018_\ufffd{G\ufffdqdώ"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "2cab3d2f1de7afb83525e532c4b06380b59a021e"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "22cec170c9404e19b48dd3246cbb10dafbf3c0fc4732185fd77b47a47164cf8e"}
2025-04-26 17:55:17.820	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 17:55:17.840	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 1, "total_records": 2}
2025-04-26 17:55:17.840	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 17:55:17.840	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 17:55:17.840	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "username": "test_user", "encrypted_key_length": 6417}
2025-04-26 17:55:17.840	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.292021208s"}
2025-04-26 17:55:17.845	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 1, "total_records": 2}
2025-04-26 17:55:17.845	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 17:55:17.845	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 17:55:17.845	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "username": "test_user", "encrypted_key_length": 6408}
2025-04-26 17:55:17.845	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "297.731167ms"}
2025-04-26 17:55:17.850	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 1, "total_records": 2}
2025-04-26 17:55:17.850	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 17:55:17.850	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 17:55:17.850	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "username": "test_user", "encrypted_key_length": 6406}
2025-04-26 17:55:17.850	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.303235875s"}
2025-04-26 18:02:33.881	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:02:33.881	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:02:33.881	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:02:33.881	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:02:38.744	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:02:38.744	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:02:38.744	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:02:38.744	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:03:01.697	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:03:01.697	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:03:01.697	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:03:01.697	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:03:22.901	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:03:22.901	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:03:22.901	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:03:22.901	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:03:51.186	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:03:51.187	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:03:51.187	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:03:51.187	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:03:56.710	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:03:56.711	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:03:56.711	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:03:56.711	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:04:13.328	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:04:13.328	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:04:13.328	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:04:13.328	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:04:25.750	[33mWARN[0m	middleware/logger.go:48	API请求	{"method": "POST", "uri": "/api/sign", "ip": "::1", "status": 404, "latency": "83ns"}
2025-04-26 18:04:25.752	[33mWARN[0m	middleware/logger.go:48	API请求	{"method": "POST", "uri": "/api/sign", "ip": "::1", "status": 404, "latency": "84ns"}
2025-04-26 18:04:25.752	[33mWARN[0m	middleware/logger.go:48	API请求	{"method": "POST", "uri": "/api/sign", "ip": "::1", "status": 404, "latency": "83ns"}
2025-04-26 18:07:11.860	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:07:11.860	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:07:11.860	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:07:11.860	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:07:21.115	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:07:21.115	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:07:21.115	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:07:21.115	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:07:33.176	[34mINFO[0m	controllers/mpc.go:131	服务未初始化，尝试初始化
2025-04-26 18:07:33.177	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:07:33.177	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:07:33.192	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:07:33.194	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:07:33.196	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:07:33.196	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:07:33.196	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:07:33.196	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:07:33.196	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662053", "filename": "keygen_result_1.json", "username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.196	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "71 B"}
2025-04-26 18:07:33.196	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_1.json"}
2025-04-26 18:07:33.196	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:07:33.196	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.196	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.196	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "A778882AE0D609CCAB804CA7C71ECB12EF4FDB7495A874279C0B2B95BDB66311"}
2025-04-26 18:07:33.196	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:07:33.196	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:07:33.204	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:07:33.204	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:07:33.204	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:07:33.204	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_1.json: no such file or directory", "path": "temp/keygen_result_1.json"}
2025-04-26 18:07:33.204	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.204	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "28.123375ms"}
2025-04-26 18:07:33.205	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662053", "filename": "keygen_result_2.json", "username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.205	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "71 B"}
2025-04-26 18:07:33.205	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_2.json"}
2025-04-26 18:07:33.205	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:07:33.205	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.205	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.205	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "20187BED43F722A6A9190C82CBB71B7C4F8165B18B7EF666CB7B04270E73CEF8"}
2025-04-26 18:07:33.205	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:07:33.205	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:07:33.213	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:07:33.213	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:07:33.214	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:07:33.214	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_2.json: no such file or directory", "path": "temp/keygen_result_2.json"}
2025-04-26 18:07:33.214	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.214	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.44625ms"}
2025-04-26 18:07:33.214	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662053", "filename": "keygen_result_3.json", "username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.214	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "72 B"}
2025-04-26 18:07:33.214	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_3.json"}
2025-04-26 18:07:33.214	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:07:33.214	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.214	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.214	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "ADB31FC6C1C772A1413DE5A5B2F8B2A388164C3514EC99588434B93131215A3A"}
2025-04-26 18:07:33.214	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:07:33.214	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "72 B"}
2025-04-26 18:07:33.223	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:07:33.223	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:07:33.223	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:07:33.223	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_3.json: no such file or directory", "path": "temp/keygen_result_3.json"}
2025-04-26 18:07:33.223	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:07:33.223	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.495542ms"}
2025-04-26 18:12:22.423	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:12:22.423	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:12:22.423	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:12:22.423	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:12:43.468	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:12:43.468	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:12:43.468	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:12:43.468	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:13:44.514	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:13:44.514	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:13:44.514	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:13:44.514	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:14:52.831	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:14:52.831	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:14:52.831	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:14:52.831	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:15:05.574	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:15:05.574	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:15:05.574	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:15:05.574	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:15:22.718	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:15:22.718	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:15:22.718	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:15:22.718	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:15:42.290	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:15:42.290	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:15:42.290	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:15:42.290	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:17:09.462	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:17:09.462	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:17:09.462	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:17:09.462	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:17:17.721	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:17:17.722	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:17:17.722	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:17:17.722	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:17:26.709	[34mINFO[0m	controllers/mpc.go:131	服务未初始化，尝试初始化
2025-04-26 18:17:26.710	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:17:26.710	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:17:26.737	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:17:26.739	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:17:26.741	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:17:26.741	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:17:26.741	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:17:26.741	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:17:26.742	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662646", "filename": "keygen_result_1.json", "username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.742	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "72 B"}
2025-04-26 18:17:26.742	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_1.json"}
2025-04-26 18:17:26.742	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:17:26.742	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.742	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.742	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "A778882AE0D609CCAB804CA7C71ECB12EF4FDB7495A874279C0B2B95BDB66311"}
2025-04-26 18:17:26.742	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:17:26.742	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "72 B"}
2025-04-26 18:17:26.750	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:17:26.750	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:17:26.750	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:17:26.750	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_1.json: no such file or directory", "path": "temp/keygen_result_1.json"}
2025-04-26 18:17:26.750	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.750	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "41.00275ms"}
2025-04-26 18:17:26.751	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662646", "filename": "keygen_result_2.json", "username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.751	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "71 B"}
2025-04-26 18:17:26.751	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_2.json"}
2025-04-26 18:17:26.751	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:17:26.751	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.751	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.751	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "20187BED43F722A6A9190C82CBB71B7C4F8165B18B7EF666CB7B04270E73CEF8"}
2025-04-26 18:17:26.751	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:17:26.751	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:17:26.759	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:17:26.759	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:17:26.759	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:17:26.759	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_2.json: no such file or directory", "path": "temp/keygen_result_2.json"}
2025-04-26 18:17:26.759	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.759	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.240125ms"}
2025-04-26 18:17:26.759	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662646", "filename": "keygen_result_3.json", "username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.759	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "72 B"}
2025-04-26 18:17:26.759	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_3.json"}
2025-04-26 18:17:26.759	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:17:26.759	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.759	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.759	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "ADB31FC6C1C772A1413DE5A5B2F8B2A388164C3514EC99588434B93131215A3A"}
2025-04-26 18:17:26.759	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:17:26.760	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "72 B"}
2025-04-26 18:17:26.768	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:17:26.768	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:17:26.768	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:17:26.768	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_3.json: no such file or directory", "path": "temp/keygen_result_3.json"}
2025-04-26 18:17:26.768	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:17:26.768	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.3515ms"}
2025-04-26 18:20:33.273	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:20:33.273	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:20:33.273	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:20:33.273	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:20:36.559	[34mINFO[0m	controllers/mpc.go:131	服务未初始化，尝试初始化
2025-04-26 18:20:36.560	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:20:36.560	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:20:36.579	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:20:36.581	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:20:36.583	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:20:36.583	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:20:36.583	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:20:36.583	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:20:36.583	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662836", "filename": "keygen_result_1.json", "username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.583	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "71 B"}
2025-04-26 18:20:36.583	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_1.json"}
2025-04-26 18:20:36.583	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:20:36.583	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.583	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.583	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "A778882AE0D609CCAB804CA7C71ECB12EF4FDB7495A874279C0B2B95BDB66311"}
2025-04-26 18:20:36.583	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:20:36.583	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:20:36.592	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:20:36.592	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:20:36.592	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:20:36.592	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_1.json: no such file or directory", "path": "temp/keygen_result_1.json"}
2025-04-26 18:20:36.592	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_1.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.592	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "32.743625ms"}
2025-04-26 18:20:36.592	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662836", "filename": "keygen_result_2.json", "username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.593	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "71 B"}
2025-04-26 18:20:36.593	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_2.json"}
2025-04-26 18:20:36.593	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:20:36.593	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.593	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.593	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "20187BED43F722A6A9190C82CBB71B7C4F8165B18B7EF666CB7B04270E73CEF8"}
2025-04-26 18:20:36.593	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:20:36.593	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:20:36.601	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:20:36.601	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:20:36.601	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:20:36.601	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_2.json: no such file or directory", "path": "temp/keygen_result_2.json"}
2025-04-26 18:20:36.601	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_2.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.601	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.344583ms"}
2025-04-26 18:20:36.601	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662836", "filename": "keygen_result_3.json", "username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.601	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "72 B"}
2025-04-26 18:20:36.601	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_3.json"}
2025-04-26 18:20:36.601	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:20:36.601	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.601	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.601	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "ADB31FC6C1C772A1413DE5A5B2F8B2A388164C3514EC99588434B93131215A3A"}
2025-04-26 18:20:36.602	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:20:36.602	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "72 B"}
2025-04-26 18:20:36.610	[31mERROR[0m	services/security.go:152	从安全芯片读取数据失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:20:36.610	[31mERROR[0m	services/mpc.go:176	从安全芯片读取密钥失败	{"error": "签名无效 (状态码: 0x6982)"}
2025-04-26 18:20:36.610	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:20:36.610	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_3.json: no such file or directory", "path": "temp/keygen_result_3.json"}
2025-04-26 18:20:36.610	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "从安全芯片读取密钥失败: 签名无效 (状态码: 0x6982)", "username": "user_keygen_result_3.json", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:20:36.610	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.402791ms"}
2025-04-26 18:21:28.374	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:21:28.374	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:21:28.374	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:21:28.374	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:21:34.126	[34mINFO[0m	controllers/mpc.go:131	服务未初始化，尝试初始化
2025-04-26 18:21:34.126	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:21:34.126	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:21:34.150	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:21:34.152	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:21:34.154	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:21:34.154	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:21:34.154	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:21:34.154	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:21:34.154	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662894", "filename": "keygen_result_1.json", "username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.154	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "72 B"}
2025-04-26 18:21:34.154	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_1.json"}
2025-04-26 18:21:34.154	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:21:34.154	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.154	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.154	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:21:34.154	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:21:34.154	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "72 B"}
2025-04-26 18:21:34.162	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:21:34.162	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:21:34.163	[31mERROR[0m	services/mpc.go:184	解密数据失败	{"error": "cipher: message authentication failed"}
2025-04-26 18:21:34.163	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:21:34.163	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_1.json: no such file or directory", "path": "temp/keygen_result_1.json"}
2025-04-26 18:21:34.163	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "解密数据失败: cipher: message authentication failed", "username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.163	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "37.514667ms"}
2025-04-26 18:21:34.163	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662894", "filename": "keygen_result_2.json", "username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.163	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "70 B"}
2025-04-26 18:21:34.163	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_2.json"}
2025-04-26 18:21:34.163	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:21:34.163	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.163	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.163	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:21:34.163	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:21:34.163	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "70 B"}
2025-04-26 18:21:34.171	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:21:34.171	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:21:34.171	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.23 KB"}
2025-04-26 18:21:34.171	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:21:34.171	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.64 KB"}
2025-04-26 18:21:34.171	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:21:34.172	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662894"}
2025-04-26 18:21:34.172	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662894", "local_share": "temp/keygen_result_2.json"}
2025-04-26 18:21:34.172	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2/3 -d 这是一条测试消息，时间戳: 1745662894 -l temp/keygen_result_2.json", "timeout": "60s"}
2025-04-26 18:21:34.186	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "13.866083ms"}
2025-04-26 18:21:34.186	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:21:34.186	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:21:34.186	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:21:34.186	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.186	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "22.872292ms"}
2025-04-26 18:21:34.186	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745662894", "filename": "keygen_result_3.json", "username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.186	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "70 B"}
2025-04-26 18:21:34.186	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E", "filename": "keygen_result_3.json"}
2025-04-26 18:21:34.186	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:21:34.186	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.186	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.186	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:21:34.186	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "2CAB3D2F1DE7AFB83525E532C4B06380B59A021E"}
2025-04-26 18:21:34.186	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "70 B"}
2025-04-26 18:21:34.195	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:21:34.195	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:21:34.195	[31mERROR[0m	services/mpc.go:184	解密数据失败	{"error": "cipher: message authentication failed"}
2025-04-26 18:21:34.195	[35mDEBUG[0m	services/mpc.go:166	清理临时文件	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:21:34.195	[33mWARN[0m	services/mpc.go:168	删除临时文件失败	{"error": "remove temp/keygen_result_3.json: no such file or directory", "path": "temp/keygen_result_3.json"}
2025-04-26 18:21:34.195	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "解密数据失败: cipher: message authentication failed", "username": "test_user", "address": "0x2Cab3D2F1De7AFb83525e532c4b06380B59A021E"}
2025-04-26 18:21:34.195	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.407583ms"}
2025-04-26 18:22:35.028	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:22:35.028	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:22:35.028	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:22:35.028	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:24:10.738	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:24:10.738	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:24:10.738	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:24:10.738	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:24:22.546	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:24:22.547	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:24:22.547	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:24:22.547	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:25:07.328	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:25:07.329	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:25:07.329	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:25:07.329	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:25:37.434	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:25:37.435	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:25:37.435	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:25:37.435	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:27:05.180	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:27:05.180	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:27:05.180	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:27:05.180	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:27:22.831	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:27:22.831	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:27:22.831	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:27:22.831	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:27:26.157	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 18:27:26.158	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:27:26.158	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:27:26.182	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:27:26.184	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:27:26.186	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:27:26.186	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:27:26.186	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:27:26.186	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:27:26.186	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user"}
2025-04-26 18:27:26.186	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 18:27:26.187	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:27:26.187	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:27:26.187	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 18:27:26.187	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:27:27.155	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user"}
2025-04-26 18:27:27.156	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 18:27:27.156	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:27:27.156	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:27:27.156	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 18:27:27.156	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:27:28.157	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user"}
2025-04-26 18:27:28.157	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 18:27:28.157	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:27:28.157	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:27:28.157	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 18:27:28.157	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:27:28.527	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.370669292s"}
2025-04-26 18:27:28.527	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:27:28.527	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.340246708s"}
2025-04-26 18:27:28.527	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:27:28.527	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "369.443541ms"}
2025-04-26 18:27:28.527	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "028e335f92e2aa4061351a4cbfd09e6a99dcbe2f626c59873785219593f08062de"}
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "028e335f92e2aa4061351a4cbfd09e6a99dcbe2f626c59873785219593f08062de"}
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "028e335f92e2aa4061351a4cbfd09e6a99dcbe2f626c59873785219593f08062de"}
2025-04-26 18:27:28.527	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540"}
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:27:28.527	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540"}
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.65 KB"}
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.65 KB"}
2025-04-26 18:27:28.527	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540"}
2025-04-26 18:27:28.527	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:27:28.528	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:27:28.528	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.66 KB"}
2025-04-26 18:27:28.528	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:27:28.533	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.25 KB"}
2025-04-26 18:27:28.533	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:27:28.533	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:27:28.533	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.28 KB"}
2025-04-26 18:27:28.533	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540", "message": "\ufffdvN\ufffdw\ufffd\ufffd&\ufffd\u0001j\ufffd\u000e\u0014^5Ǡs|ぼ\ufffd\ufffd\ufffd\ufffd\u0019T1\ufffdn"}
2025-04-26 18:27:28.533	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "1f5d3875805fe10487ee099552897ecba3cca540"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "a3764ef677abac26dc016af30e145e35c7a0737ce381bc9ff481da195431d96e"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.25 KB"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.28 KB"}
2025-04-26 18:27:28.534	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540", "message": "\ufffd\u001bv;\u001d\u0010e\"J\ufffd#[\ufffd\ufffd\ufffd\ufffdj\u000c\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffd\ufffd*\ufffdvW\ufffd"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "1f5d3875805fe10487ee099552897ecba3cca540"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "951b763b1d1065224aac235ba5eab6e66a0ceafa97861ca38acbc72af47657f8"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.25 KB"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.28 KB"}
2025-04-26 18:27:28.534	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540", "message": "\n\ufffdKXa\ufffd\ufffd\ufffdG\ufffd\ufffd/&\ufffd\u001ey\ufffd2\ufffd\ufffdE\ufffd\u000e\ufffd\ufffd\ufffdiLX\ufffd\ufffdD"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "1f5d3875805fe10487ee099552897ecba3cca540"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "0ae74b5861d4fddd47b6c22f26851e79aa32c7e645910ec8dfee694c58b9a544"}
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:27:28.534	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:27:28.553	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 2, "total_records": 3}
2025-04-26 18:27:28.553	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:27:28.553	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:27:28.553	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540", "username": "test_user", "encrypted_key_length": 6429}
2025-04-26 18:27:28.553	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.398146167s"}
2025-04-26 18:27:28.558	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 2, "total_records": 3}
2025-04-26 18:27:28.558	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:27:28.558	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:27:28.558	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540", "username": "test_user", "encrypted_key_length": 6426}
2025-04-26 18:27:28.558	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "401.673958ms"}
2025-04-26 18:27:28.563	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 2, "total_records": 3}
2025-04-26 18:27:28.563	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:27:28.563	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:27:28.563	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x1F5d3875805fe10487EE099552897eCBa3Cca540", "username": "test_user", "encrypted_key_length": 6430}
2025-04-26 18:27:28.563	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.406632s"}
2025-04-26 18:28:58.573	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:28:58.573	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:28:58.573	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:28:58.573	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:29:02.886	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:29:02.886	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:29:02.886	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:29:02.886	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:29:06.669	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 18:29:06.669	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:29:06.669	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:29:06.680	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:29:06.681	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:29:06.683	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:29:06.683	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:29:06.683	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:29:06.683	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:29:06.683	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user"}
2025-04-26 18:29:06.683	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 18:29:06.683	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:29:06.683	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:29:06.683	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 18:29:06.683	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:29:07.668	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user"}
2025-04-26 18:29:07.668	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 18:29:07.668	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:29:07.668	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:29:07.668	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 18:29:07.668	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:29:08.670	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user"}
2025-04-26 18:29:08.670	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 18:29:08.671	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:29:08.671	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:29:08.671	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 18:29:08.671	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:29:08.920	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.237021541s"}
2025-04-26 18:29:08.920	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:29:08.920	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:29:08.920	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.252660459s"}
2025-04-26 18:29:08.920	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "249.42325ms"}
2025-04-26 18:29:08.921	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:29:08.921	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "0344aad77d26992e7d829ffa5c75ce8aa4be927dc8bb6f84f6fe3271e5278805b0"}
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "0344aad77d26992e7d829ffa5c75ce8aa4be927dc8bb6f84f6fe3271e5278805b0"}
2025-04-26 18:29:08.921	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "0344aad77d26992e7d829ffa5c75ce8aa4be927dc8bb6f84f6fe3271e5278805b0"}
2025-04-26 18:29:08.921	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:29:08.921	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.63 KB"}
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.63 KB"}
2025-04-26 18:29:08.921	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:29:08.927	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.21 KB"}
2025-04-26 18:29:08.927	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.24 KB"}
2025-04-26 18:29:08.928	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "message": "`Ҡ}\u0014S\ufffd\u001bH\"\ufffd\ufffd\ufffd\ufffd\ufffdp\ufffd\ufffd\u0017\ufffd\ufffdX\",Y;:\ufffd^\u0013\ufffd\ufffd"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "e93ad7142155b03a53e3172e8e43edb0f06d78bc"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "60d2a07d1453fd1b4822a4c09ceba67082ff17ecf758222c593b3af45e13f4f3"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.20 KB"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.22 KB"}
2025-04-26 18:29:08.928	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "message": "T\ufffd^d\ufffd\ufffd\ufffd\ufffd2\ufffd,\u0011\u0008\ufffd\u0018m\u0016\ufffd\u0018\ufffdL\ufffd\u001aAw\\\u0014\ufffd\ufffdX\u001c\ufffd"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "e93ad7142155b03a53e3172e8e43edb0f06d78bc"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "54b35e6485fad0ff32ad2c1108a4186d16ea18874cdd1a41775c14e0b1581caa"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.19 KB"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.22 KB"}
2025-04-26 18:29:08.928	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "message": "@\ufffd\ufffd\ufffd\u0013\ufffdn_uBU)\u001c\ufffd\u0013\ufffd\ufffdh\u001a\ufffd\ufffd\ufffd\ufffd\t\ufffdC\ufffd\ufffdd\ufffd@x"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "e93ad7142155b03a53e3172e8e43edb0f06d78bc"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "40a8e5b2138c6e5f754255291cd8138dde681aa085beff09c64390ef64d24078"}
2025-04-26 18:29:08.928	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:29:08.947	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 3, "total_records": 4}
2025-04-26 18:29:08.947	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:29:08.947	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:29:08.947	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "username": "test_user", "encrypted_key_length": 6386}
2025-04-26 18:29:08.948	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.278785417s"}
2025-04-26 18:29:08.952	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 3, "total_records": 4}
2025-04-26 18:29:08.952	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:29:08.952	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:29:08.952	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "username": "test_user", "encrypted_key_length": 6374}
2025-04-26 18:29:08.952	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.284967209s"}
2025-04-26 18:29:08.957	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 3, "total_records": 4}
2025-04-26 18:29:08.957	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:29:08.957	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:29:08.957	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "username": "test_user", "encrypted_key_length": 6371}
2025-04-26 18:29:08.957	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "287.225666ms"}
2025-04-26 18:29:21.653	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:29:21.653	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:29:21.653	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:29:21.653	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:29:32.529	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:29:32.529	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:29:32.529	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:29:32.529	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:30:01.313	[34mINFO[0m	controllers/mpc.go:131	服务未初始化，尝试初始化
2025-04-26 18:30:01.313	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:30:01.313	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:30:01.329	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:30:01.331	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:30:01.333	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:30:01.333	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:30:01.333	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:30:01.333	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:30:01.334	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663401", "filename": "keygen_result_1.json", "username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.334	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "70 B"}
2025-04-26 18:30:01.334	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "filename": "keygen_result_1.json"}
2025-04-26 18:30:01.334	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:30:01.334	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.334	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.334	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:30:01.334	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "E93AD7142155B03A53E3172E8E43EDB0F06D78BC"}
2025-04-26 18:30:01.334	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "70 B"}
2025-04-26 18:30:01.343	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:30:01.343	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:30:01.343	[31mERROR[0m	services/mpc.go:184	解密数据失败	{"error": "cipher: message authentication failed"}
2025-04-26 18:30:01.343	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "解密数据失败: cipher: message authentication failed", "username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.343	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "30.203833ms"}
2025-04-26 18:30:01.343	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663401", "filename": "keygen_result_2.json", "username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.344	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "70 B"}
2025-04-26 18:30:01.344	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "filename": "keygen_result_2.json"}
2025-04-26 18:30:01.344	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:30:01.344	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.344	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.344	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:30:01.344	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "E93AD7142155B03A53E3172E8E43EDB0F06D78BC"}
2025-04-26 18:30:01.344	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "70 B"}
2025-04-26 18:30:01.353	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:30:01.353	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:30:01.353	[31mERROR[0m	services/mpc.go:184	解密数据失败	{"error": "cipher: message authentication failed"}
2025-04-26 18:30:01.353	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "解密数据失败: cipher: message authentication failed", "username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.353	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "9.421625ms"}
2025-04-26 18:30:01.354	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663401", "filename": "keygen_result_3.json", "username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.354	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-26 18:30:01.354	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC", "filename": "keygen_result_3.json"}
2025-04-26 18:30:01.354	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:30:01.354	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.354	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.354	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:30:01.354	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "E93AD7142155B03A53E3172E8E43EDB0F06D78BC"}
2025-04-26 18:30:01.354	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:30:01.363	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:30:01.363	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:30:01.363	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.19 KB"}
2025-04-26 18:30:01.363	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:30:01.363	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.63 KB"}
2025-04-26 18:30:01.363	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:30:01.363	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663401"}
2025-04-26 18:30:01.363	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663401", "local_share": "temp/keygen_result_3.json"}
2025-04-26 18:30:01.363	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2/3 -d 这是一条测试消息，时间戳: 1745663401 -l temp/keygen_result_3.json", "timeout": "60s"}
2025-04-26 18:30:01.373	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "9.392167ms"}
2025-04-26 18:30:01.373	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:30:01.373	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:30:01.373	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user", "address": "0xe93ad7142155b03a53e3172e8E43edB0f06D78bC"}
2025-04-26 18:30:01.373	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "19.565416ms"}
2025-04-26 18:31:04.385	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:31:04.385	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:31:04.385	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:31:04.385	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:31:20.264	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:31:20.265	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:31:20.265	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:31:20.265	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:31:33.798	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:31:33.799	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:31:33.799	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:31:33.799	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:31:45.513	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:31:45.513	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:31:45.513	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:31:45.513	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:32:48.364	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:32:48.364	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:32:48.364	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:32:48.364	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:33:16.194	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:33:16.194	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:33:16.194	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:33:16.194	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:33:20.790	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:33:20.790	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:33:20.790	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:33:20.790	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:33:22.913	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 18:33:22.913	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:33:22.913	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:33:22.926	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:33:22.928	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:33:22.930	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:33:22.930	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:33:22.930	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:33:22.930	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:33:22.930	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user"}
2025-04-26 18:33:22.930	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 18:33:22.930	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:33:22.930	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:33:22.930	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 18:33:22.930	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:33:23.913	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user"}
2025-04-26 18:33:23.913	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 18:33:23.914	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:33:23.914	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:33:23.914	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 18:33:23.914	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:33:24.914	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user"}
2025-04-26 18:33:24.914	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 18:33:24.914	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:33:24.914	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:33:24.914	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 18:33:24.915	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:33:25.211	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "296.362917ms"}
2025-04-26 18:33:25.211	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:33:25.211	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:33:25.211	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.297162791s"}
2025-04-26 18:33:25.211	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.2811435s"}
2025-04-26 18:33:25.211	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:33:25.211	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:33:25.211	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:33:25.211	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:33:25.211	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:33:25.211	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022f8c9677a13e130637ad761da187d76738f1333c6816bf9cc3ee2c2d3fe92e3d"}
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022f8c9677a13e130637ad761da187d76738f1333c6816bf9cc3ee2c2d3fe92e3d"}
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022f8c9677a13e130637ad761da187d76738f1333c6816bf9cc3ee2c2d3fe92e3d"}
2025-04-26 18:33:25.212	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:33:25.212	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:33:25.212	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.73 KB"}
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.73 KB"}
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.73 KB"}
2025-04-26 18:33:25.212	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:33:25.218	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.22 KB"}
2025-04-26 18:33:25.218	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.22 KB"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.25 KB"}
2025-04-26 18:33:25.219	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "message": "s\ufffd\ufffd߼IL۰xX~\u0011\ufffd\u0000\u001bDC]o\tnT\ufffd\ufffd\u0006~G`\ufffd\ufffd\ufffd"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.25 KB"}
2025-04-26 18:33:25.219	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "message": "\ufffd@\ufffd\ufffd\ufffd\ufffd\ufffdU\ufffd\ufffd\ufffd\u0013O\ufffdl\ufffd\ufffd;\ufffd3/\u0003wB\ufffd\ufffdX\ufffd\ufffd\ufffd\u0017\ufffd"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.23 KB"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.26 KB"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "498f3f845e29932eb74197e7b034a2200abb1140"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "739faedfbc494cdbb078587e11ba001b44435d6f096e54e8e6067e47608df1da"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "498f3f845e29932eb74197e7b034a2200abb1140"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "9d40e8dac3e5ee55abacdf134f946c9de23bde332f037742e78e58e2d2e217bc"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:33:25.219	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "message": "\ufffdZ \u0012\ufffd\ufffd@\ufffdC\ufffd\ufffd\u0003}\\\ufffd3\\\u001e\ufffd\\ϷǠP#\ufffdY\u0005\ufffd\u0005"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "1160130875fda0812c99c5e3f1a03516471a6370c4f97129b221938eb4763e63"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "498f3f845e29932eb74197e7b034a2200abb1140"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "fb5a2012fcc97f409243acc4037d5cfd335c1e945ccfb7c7a05023a15905b705"}
2025-04-26 18:33:25.219	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:33:25.239	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 4, "total_records": 5}
2025-04-26 18:33:25.239	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:33:25.239	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:33:25.239	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "username": "test_user", "encrypted_key_length": 6400}
2025-04-26 18:33:25.240	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "325.523208ms"}
2025-04-26 18:33:25.245	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 4, "total_records": 5}
2025-04-26 18:33:25.245	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:33:25.245	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:33:25.245	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "username": "test_user", "encrypted_key_length": 6396}
2025-04-26 18:33:25.245	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.33226775s"}
2025-04-26 18:33:25.251	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 4, "total_records": 5}
2025-04-26 18:33:25.251	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:33:25.251	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:33:25.251	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "username": "test_user", "encrypted_key_length": 6412}
2025-04-26 18:33:25.251	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.338826s"}
2025-04-26 18:33:25.916	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663605", "filename": "keygen_result_1.json", "username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.917	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "71 B"}
2025-04-26 18:33:25.917	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "filename": "keygen_result_1.json"}
2025-04-26 18:33:25.917	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:33:25.917	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.917	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.917	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:33:25.917	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "498F3F845E29932EB74197E7B034A2200ABB1140"}
2025-04-26 18:33:25.917	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:33:25.927	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:33:25.927	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:33:25.928	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.23 KB"}
2025-04-26 18:33:25.928	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:33:25.928	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.73 KB"}
2025-04-26 18:33:25.928	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:33:25.929	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663605"}
2025-04-26 18:33:25.929	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663605", "local_share": "temp/keygen_result_1.json"}
2025-04-26 18:33:25.930	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2/3 -d 这是一条测试消息，时间戳: 1745663605 -l temp/keygen_result_1.json", "timeout": "60s"}
2025-04-26 18:33:25.947	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "16.972833ms"}
2025-04-26 18:33:25.947	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:33:25.947	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:33:25.947	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.947	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "30.847167ms"}
2025-04-26 18:33:25.948	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663605", "filename": "keygen_result_2.json", "username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.948	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "70 B"}
2025-04-26 18:33:25.948	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "filename": "keygen_result_2.json"}
2025-04-26 18:33:25.948	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:33:25.948	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.948	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.948	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:33:25.948	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "498F3F845E29932EB74197E7B034A2200ABB1140"}
2025-04-26 18:33:25.948	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "70 B"}
2025-04-26 18:33:25.958	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:33:25.958	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:33:25.958	[31mERROR[0m	services/mpc.go:184	解密数据失败	{"error": "cipher: message authentication failed"}
2025-04-26 18:33:25.958	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "解密数据失败: cipher: message authentication failed", "username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.958	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "10.020875ms"}
2025-04-26 18:33:25.958	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745663605", "filename": "keygen_result_3.json", "username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.958	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-26 18:33:25.958	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140", "filename": "keygen_result_3.json"}
2025-04-26 18:33:25.958	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_3.json"}
2025-04-26 18:33:25.958	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.958	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.958	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "1160130875FDA0812C99C5E3F1A03516471A6370C4F97129B221938EB4763E63"}
2025-04-26 18:33:25.958	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "498F3F845E29932EB74197E7B034A2200ABB1140"}
2025-04-26 18:33:25.958	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:33:25.968	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:33:25.968	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:33:25.968	[31mERROR[0m	services/mpc.go:184	解密数据失败	{"error": "cipher: message authentication failed"}
2025-04-26 18:33:25.968	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "解密数据失败: cipher: message authentication failed", "username": "test_user", "address": "0x498F3f845e29932EB74197e7B034a2200abb1140"}
2025-04-26 18:33:25.968	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "9.526042ms"}
2025-04-26 18:38:57.794	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:38:57.794	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:38:57.794	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:38:57.794	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:39:12.322	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 18:39:12.322	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:39:12.322	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:39:12.339	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:39:12.341	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:39:12.343	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:39:12.343	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:39:12.343	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:39:12.343	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:39:12.343	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user_1"}
2025-04-26 18:39:12.343	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 18:39:12.343	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:39:12.343	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:39:12.343	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 18:39:12.343	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:39:12.352	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: join computation\n\nCaused by:\n    0: subscribe\n    1: ConnectFailed: failed to connect to the server\n", "execution_time": "8.4795ms"}
2025-04-26 18:39:12.352	[31mERROR[0m	utils/command.go:89	密钥生成失败	{"error": "exit status 1"}
2025-04-26 18:39:12.352	[31mERROR[0m	services/mpc.go:59	密钥生成命令失败	{"error": "exit status 1"}
2025-04-26 18:39:12.352	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:39:12.352	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user_1"}
2025-04-26 18:39:12.352	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "29.91375ms"}
2025-04-26 18:39:13.321	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user_2"}
2025-04-26 18:39:13.321	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 18:39:13.321	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:39:13.321	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:39:13.321	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 18:39:13.321	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:39:13.336	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: join computation\n\nCaused by:\n    0: subscribe\n    1: ConnectFailed: failed to connect to the server\n", "execution_time": "14.179708ms"}
2025-04-26 18:39:13.336	[31mERROR[0m	utils/command.go:89	密钥生成失败	{"error": "exit status 1"}
2025-04-26 18:39:13.336	[31mERROR[0m	services/mpc.go:59	密钥生成命令失败	{"error": "exit status 1"}
2025-04-26 18:39:13.336	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:39:13.336	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user_2"}
2025-04-26 18:39:13.336	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "15.219ms"}
2025-04-26 18:39:14.322	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user_3"}
2025-04-26 18:39:14.322	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 18:39:14.322	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:39:14.322	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:39:14.322	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 18:39:14.322	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:39:14.338	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: join computation\n\nCaused by:\n    0: subscribe\n    1: ConnectFailed: failed to connect to the server\n", "execution_time": "15.227166ms"}
2025-04-26 18:39:14.338	[31mERROR[0m	utils/command.go:89	密钥生成失败	{"error": "exit status 1"}
2025-04-26 18:39:14.338	[31mERROR[0m	services/mpc.go:59	密钥生成命令失败	{"error": "exit status 1"}
2025-04-26 18:39:14.338	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:39:14.338	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user_3"}
2025-04-26 18:39:14.338	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "15.806625ms"}
2025-04-26 18:39:59.432	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user_1"}
2025-04-26 18:39:59.433	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 18:39:59.433	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:39:59.433	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:39:59.433	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 18:39:59.433	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:40:00.432	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user_2"}
2025-04-26 18:40:00.432	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 18:40:00.432	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:40:00.432	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:40:00.432	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 18:40:00.432	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:40:01.433	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user_3"}
2025-04-26 18:40:01.433	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 18:40:01.433	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:40:01.433	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:40:01.433	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 18:40:01.433	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:40:01.684	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.251489833s"}
2025-04-26 18:40:01.684	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:40:01.684	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:40:01.684	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.251926583s"}
2025-04-26 18:40:01.684	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:40:01.684	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:40:01.684	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "250.934291ms"}
2025-04-26 18:40:01.684	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:40:01.684	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022c114b0539773228d96106300d3f0b7764476f98d102d6362c566ee7ce3e0c5d"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:40:01.685	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022c114b0539773228d96106300d3f0b7764476f98d102d6362c566ee7ce3e0c5d"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022c114b0539773228d96106300d3f0b7764476f98d102d6362c566ee7ce3e0c5d"}
2025-04-26 18:40:01.685	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:40:01.685	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.63 KB"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 18:40:01.685	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.21 KB"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.24 KB"}
2025-04-26 18:40:01.692	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_2", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df", "message": "(\ufffd,\ufffd\ufffd\ufffd\ufffdر\ufffdr\u00023\ufffd\ufffd\u000cg\ufffd\ufffd\ufffdU\ufffd\ufffd\u0001\ufffd1\ufffd\nT\ufffd5\ufffd"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "fc4c9bf90c4c836e70d769ba577fc4e0205df1df"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "28b52c909291dfd8b1cb720233ead90c67888afa55f1e401b031870a54f035df"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.22 KB"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.25 KB"}
2025-04-26 18:40:01.692	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_1", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df", "message": "\ufffd\ufffd/q\ufffdn\ufffdg\ufffd\u001c\ufffd?O\ufffd\u001bV\ufffd\ufffd\ufffd\ufffd8ޥ\ufffd\ufffd\ufffd\ufffd$d\u0006\u001b\u0003"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "fc4c9bf90c4c836e70d769ba577fc4e0205df1df"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "bfbc2f71cd6ea567e91c813f4f831b569af9969338dea5cfff8d942464061b03"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.22 KB"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.25 KB"}
2025-04-26 18:40:01.692	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_3", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df", "message": "ϟ\ufffd.\ufffd\ufffd\ufffd@\ufffd\ufffd\u0017\ufffd\ufffd\u000eŎ\ufffd\ufffd\ufffdG\ufffd\ufffd\u0019\ufffd\ufffdQD\u000cXo\ufffdf"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "fc4c9bf90c4c836e70d769ba577fc4e0205df1df"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "cf9fc12eddeaa940f6f017f2f00ec58e9ec0b2478ba719808c51440c586fca66"}
2025-04-26 18:40:01.692	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:40:01.711	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 5, "total_records": 6}
2025-04-26 18:40:01.711	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:40:01.712	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:40:01.712	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df", "username": "test_user_2", "encrypted_key_length": 6387}
2025-04-26 18:40:01.712	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.280071667s"}
2025-04-26 18:40:01.732	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 6, "total_records": 7}
2025-04-26 18:40:01.732	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:40:01.732	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:40:01.732	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df", "username": "test_user_1", "encrypted_key_length": 6396}
2025-04-26 18:40:01.732	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.299785541s"}
2025-04-26 18:40:01.753	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 7, "total_records": 8}
2025-04-26 18:40:01.753	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:40:01.753	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:40:01.753	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df", "username": "test_user_3", "encrypted_key_length": 6401}
2025-04-26 18:40:01.753	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "320.1705ms"}
2025-04-26 18:40:02.435	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664002", "filename": "keygen_result_1.json", "username": "test_user_1", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:02.435	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-26 18:40:02.435	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df", "filename": "keygen_result_1.json"}
2025-04-26 18:40:02.435	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:40:02.435	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user_1", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:02.435	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user_1", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:02.435	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0"}
2025-04-26 18:40:02.435	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "FC4C9BF90C4C836E70D769BA577FC4E0205DF1DF"}
2025-04-26 18:40:02.435	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:40:02.435	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664002", "filename": "keygen_result_2.json", "username": "test_user_2", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:02.436	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-26 18:40:02.436	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df", "filename": "keygen_result_2.json"}
2025-04-26 18:40:02.436	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:40:02.436	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user_2", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:02.436	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user_2", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:02.436	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E"}
2025-04-26 18:40:02.436	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "FC4C9BF90C4C836E70D769BA577FC4E0205DF1DF"}
2025-04-26 18:40:02.436	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:40:02.446	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:40:02.446	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:40:02.446	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.22 KB"}
2025-04-26 18:40:02.447	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:40:02.447	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.64 KB"}
2025-04-26 18:40:02.447	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:40:02.448	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664002"}
2025-04-26 18:40:02.449	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664002", "local_share": "temp/keygen_result_1.json"}
2025-04-26 18:40:02.450	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2/3 -d 这是一条测试消息，时间戳: 1745664002 -l temp/keygen_result_1.json", "timeout": "60s"}
2025-04-26 18:40:02.457	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:40:02.457	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:40:02.457	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.21 KB"}
2025-04-26 18:40:02.457	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:40:02.457	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.64 KB"}
2025-04-26 18:40:02.457	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:40:02.458	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664002"}
2025-04-26 18:40:02.458	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664002", "local_share": "temp/keygen_result_2.json"}
2025-04-26 18:40:02.458	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2/3 -d 这是一条测试消息，时间戳: 1745664002 -l temp/keygen_result_2.json", "timeout": "60s"}
2025-04-26 18:40:02.466	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "15.567042ms"}
2025-04-26 18:40:02.466	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:40:02.466	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:40:02.466	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:02.466	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "31.521ms"}
2025-04-26 18:40:02.469	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "10.974292ms"}
2025-04-26 18:40:02.469	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:40:02.469	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:40:02.469	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0xFC4c9Bf90c4c836e70d769bA577fC4E0205Df1Df"}
2025-04-26 18:40:02.469	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "34.07175ms"}
2025-04-26 18:44:02.363	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:44:02.363	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:44:02.363	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:44:02.363	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:44:09.672	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 18:44:09.672	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:44:09.672	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:44:09.684	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:44:09.685	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:44:09.687	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:44:09.687	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:44:09.687	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:44:09.687	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:44:09.688	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user_1"}
2025-04-26 18:44:09.688	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 18:44:09.688	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:44:09.688	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:44:09.688	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 18:44:09.688	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:44:10.671	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user_2"}
2025-04-26 18:44:10.671	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 18:44:10.672	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:44:10.672	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:44:10.672	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 18:44:10.672	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:44:11.673	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user_3"}
2025-04-26 18:44:11.673	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 18:44:11.673	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:44:11.673	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:44:11.673	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 18:44:11.674	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:44:11.926	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.238897875s"}
2025-04-26 18:44:11.927	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "252.945458ms"}
2025-04-26 18:44:11.927	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:44:11.927	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:44:11.926	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.254860125s"}
2025-04-26 18:44:11.927	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "03435eb280146c3f302e82ab989a00289ee61b998a4427e8b7df92fcf1910e1f99"}
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "03435eb280146c3f302e82ab989a00289ee61b998a4427e8b7df92fcf1910e1f99"}
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "03435eb280146c3f302e82ab989a00289ee61b998a4427e8b7df92fcf1910e1f99"}
2025-04-26 18:44:11.927	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:44:11.927	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:44:11.927	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:11.927	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:44:11.928	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 18:44:11.928	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:44:11.928	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 18:44:11.928	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.25 KB"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.27 KB"}
2025-04-26 18:44:11.934	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_3", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D", "message": "+\ufffd̹\ufffd!\ufffdw\ufffd\t{\u00178\u0008T\u0000\ufffd\r\ufffd\ufffd~\ufffd'\ufffd\ufffd=w\ufffd4\u001dO\u0017"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.24 KB"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "f27e7d281c16f580f736dc4d2d475107cf65c44d"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "2beeccb9c921887798097b1738085400ff0da6ef7eba27ea863d7798341d4f17"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.27 KB"}
2025-04-26 18:44:11.934	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_2", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D", "message": "\ufffd\u001bKa\ufffd\ufffdtOO\ufffdu´6\ufffd\ufffdZ\ufffd\ufffd\ufffd\ufffd2M\ufffd\n\ufffd\ufffdě\ufffd\ufffdu"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "f27e7d281c16f580f736dc4d2d475107cf65c44d"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "8e1b4b61b9fd744f4fd575c2b436e1b45a88e8a9e7324d9f0a949dc49bfcf275"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.24 KB"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.27 KB"}
2025-04-26 18:44:11.934	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_1", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D", "message": "\ufffd9*65\ufffdOsM\u000c\\s\ufffd&@2~\ufffd\u0003\ufffd0\ufffd\u001ac=\ufffd\ufffdV-\ufffd\ufffd\ufffd"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "f27e7d281c16f580f736dc4d2d475107cf65c44d"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "a0392a3635ee4f734d0c5c73922640327e8c03dd30ce1a633db995562dffc0f0"}
2025-04-26 18:44:11.934	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:44:11.956	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 8, "total_records": 9}
2025-04-26 18:44:11.956	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:44:11.956	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:44:11.956	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D", "username": "test_user_3", "encrypted_key_length": 6425}
2025-04-26 18:44:11.957	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "283.640625ms"}
2025-04-26 18:44:11.977	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 9, "total_records": 10}
2025-04-26 18:44:11.977	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:44:11.977	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:44:11.977	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D", "username": "test_user_2", "encrypted_key_length": 6417}
2025-04-26 18:44:11.977	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.305746083s"}
2025-04-26 18:44:11.997	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 10, "total_records": 11}
2025-04-26 18:44:11.997	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:44:11.997	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:44:11.998	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D", "username": "test_user_1", "encrypted_key_length": 6416}
2025-04-26 18:44:11.998	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.325592541s"}
2025-04-26 18:44:12.676	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664252", "filename": "keygen_result_1.json", "username": "test_user_1", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:12.676	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "71 B"}
2025-04-26 18:44:12.676	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D", "filename": "keygen_result_1.json"}
2025-04-26 18:44:12.676	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664252", "filename": "keygen_result_2.json", "username": "test_user_2", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:12.676	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "72 B"}
2025-04-26 18:44:12.676	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2/3", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D", "filename": "keygen_result_2.json"}
2025-04-26 18:44:12.676	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:44:12.677	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user_1", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user_1", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "F27E7D281C16F580F736DC4D2D475107CF65C44D"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:44:12.677	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user_2", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user_2", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "F27E7D281C16F580F736DC4D2D475107CF65C44D"}
2025-04-26 18:44:12.677	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "72 B"}
2025-04-26 18:44:12.690	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:44:12.690	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:44:12.690	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.24 KB"}
2025-04-26 18:44:12.690	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:44:12.690	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.64 KB"}
2025-04-26 18:44:12.691	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:44:12.691	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664252"}
2025-04-26 18:44:12.691	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664252", "local_share": "temp/keygen_result_1.json"}
2025-04-26 18:44:12.691	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2/3 -d \"这是一条测试消息，时间戳: 1745664252\" -l temp/keygen_result_1.json", "timeout": "60s"}
2025-04-26 18:44:12.699	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:44:12.700	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:44:12.700	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.24 KB"}
2025-04-26 18:44:12.700	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:44:12.700	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.64 KB"}
2025-04-26 18:44:12.700	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:44:12.701	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664252"}
2025-04-26 18:44:12.701	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2/3", "data": "这是一条测试消息，时间戳: 1745664252", "local_share": "temp/keygen_result_2.json"}
2025-04-26 18:44:12.701	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2/3 -d \"这是一条测试消息，时间戳: 1745664252\" -l temp/keygen_result_2.json", "timeout": "60s"}
2025-04-26 18:44:12.705	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "13.677833ms"}
2025-04-26 18:44:12.705	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:44:12.705	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:44:12.705	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:12.705	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "29.402375ms"}
2025-04-26 18:44:12.710	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "9.836833ms"}
2025-04-26 18:44:12.711	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:44:12.711	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:44:12.711	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0xf27E7D281c16f580F736dc4D2D475107cf65c44D"}
2025-04-26 18:44:12.711	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "34.773583ms"}
2025-04-26 18:48:38.678	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:48:38.678	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:48:38.678	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:48:38.678	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:50:25.232	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:50:25.232	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:50:25.232	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:50:25.232	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:50:29.355	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 18:50:29.357	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:50:29.357	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:50:29.379	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:50:29.381	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:50:29.383	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:50:29.383	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:50:29.383	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:50:29.383	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:50:29.383	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user_1"}
2025-04-26 18:50:29.383	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 18:50:29.383	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:50:29.383	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:50:29.383	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 18:50:29.383	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:50:30.354	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user_2"}
2025-04-26 18:50:30.354	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 18:50:30.354	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:50:30.354	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:50:30.354	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 18:50:30.354	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:50:31.355	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user_3"}
2025-04-26 18:50:31.355	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 18:50:31.355	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:50:31.355	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:50:31.355	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 18:50:31.355	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:50:31.670	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.286429125s"}
2025-04-26 18:50:31.670	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:50:31.670	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "314.626708ms"}
2025-04-26 18:50:31.670	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:50:31.670	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.31564725s"}
2025-04-26 18:50:31.670	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "03fad57dee04ed954ff27369026b8d3db7cd00aafdc4b4751748883a90ec4a04b6"}
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "03fad57dee04ed954ff27369026b8d3db7cd00aafdc4b4751748883a90ec4a04b6"}
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "03fad57dee04ed954ff27369026b8d3db7cd00aafdc4b4751748883a90ec4a04b6"}
2025-04-26 18:50:31.670	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:31.670	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:50:31.670	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:31.671	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:50:31.671	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.67 KB"}
2025-04-26 18:50:31.671	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.67 KB"}
2025-04-26 18:50:31.671	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:50:31.671	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:31.671	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:50:31.671	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.65 KB"}
2025-04-26 18:50:31.671	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:50:31.671	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.20 KB"}
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.22 KB"}
2025-04-26 18:50:31.677	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_1", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809", "message": "\u0006\ufffd\ufffd\ufffd\u000f\ufffd\u0005\ufffd\ufffd\u0003\ufffd+&X\ufffd\ufffdMU\ufffdgH\ufffdΙ\ufffd\ufffd\u001a*\ufffdG\ufffd\ufffd"}
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0"}
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.21 KB"}
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.21 KB"}
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "e12767c0c574a04337c1bc988e6b5f356ed0e809"}
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "06eaf4d30fb505bcd703ff2b2658c7d64d55b86748f5ce99cfd81a2af347a588"}
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.23 KB"}
2025-04-26 18:50:31.677	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_2", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809", "message": "]\ufffdy\t貦as\ufffd1\ufffd\ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd}\ufffd\ufffdkw3\ufffd\u001d\ufffd4}"}
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.24 KB"}
2025-04-26 18:50:31.678	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_3", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809", "message": "s\ufffd9N=\ufffd\ufffd\ufffd#\ufffd=\ufffdH\ufffd\ufffdي\ufffd\ufffd.\tv.\ufffd\u000bg\ufffd\ufffd\u0007-\ufffd/"}
2025-04-26 18:50:31.678	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:50:31.678	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df"}
2025-04-26 18:50:31.678	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "e12767c0c574a04337c1bc988e6b5f356ed0e809"}
2025-04-26 18:50:31.678	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "73c1394e3dd7ef9723c63df148b3bdd98aa2aa2e09762edc0b67b791072d952f"}
2025-04-26 18:50:31.678	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:50:31.677	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e"}
2025-04-26 18:50:31.678	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "e12767c0c574a04337c1bc988e6b5f356ed0e809"}
2025-04-26 18:50:31.678	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "5de57909e8b2a66173a331f1a3972dab9bb4f795967d9aa06b7733b91da3347d"}
2025-04-26 18:50:31.678	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:50:31.698	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 11, "total_records": 12}
2025-04-26 18:50:31.698	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:50:31.698	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:50:31.698	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809", "username": "test_user_1", "encrypted_key_length": 6374}
2025-04-26 18:50:31.698	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.343024083s"}
2025-04-26 18:50:31.724	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 12, "total_records": 13}
2025-04-26 18:50:31.724	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:50:31.724	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:50:31.724	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809", "username": "test_user_3", "encrypted_key_length": 6389}
2025-04-26 18:50:31.724	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "369.125792ms"}
2025-04-26 18:50:31.744	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 13, "total_records": 14}
2025-04-26 18:50:31.744	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:50:31.744	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:50:31.744	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809", "username": "test_user_2", "encrypted_key_length": 6383}
2025-04-26 18:50:31.744	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.390626375s"}
2025-04-26 18:50:32.357	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2,3", "data": "这是一条测试消息，时间戳: 1745664632", "filename": "keygen_result_1.json", "username": "test_user_1", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:32.357	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "2,3", "data": "这是一条测试消息，时间戳: 1745664632", "filename": "keygen_result_2.json", "username": "test_user_2", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2,3", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809", "filename": "keygen_result_1.json"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "2,3", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809", "filename": "keygen_result_2.json"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:50:32.357	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user_1", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user_1", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:50:32.357	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user_2", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user_2", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "E12767C0C574A04337C1BC988E6B5F356ED0E809"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "E12767C0C574A04337C1BC988E6B5F356ED0E809"}
2025-04-26 18:50:32.357	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:50:32.369	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:50:32.369	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:50:32.369	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.21 KB"}
2025-04-26 18:50:32.369	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:50:32.369	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.67 KB"}
2025-04-26 18:50:32.370	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:50:32.370	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2,3", "data": "这是一条测试消息，时间戳: 1745664632"}
2025-04-26 18:50:32.370	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2,3", "data": "这是一条测试消息，时间戳: 1745664632", "local_share": "temp/keygen_result_2.json"}
2025-04-26 18:50:32.370	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2,3 -d \"这是一条测试消息，时间戳: 1745664632\" -l temp/keygen_result_2.json", "timeout": "60s"}
2025-04-26 18:50:32.380	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:50:32.380	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:50:32.380	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.20 KB"}
2025-04-26 18:50:32.380	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:50:32.380	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.67 KB"}
2025-04-26 18:50:32.380	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:50:32.381	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "2,3", "data": "这是一条测试消息，时间戳: 1745664632"}
2025-04-26 18:50:32.381	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "2,3", "data": "这是一条测试消息，时间戳: 1745664632", "local_share": "temp/keygen_result_1.json"}
2025-04-26 18:50:32.381	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 2,3 -d \"这是一条测试消息，时间戳: 1745664632\" -l temp/keygen_result_1.json", "timeout": "60s"}
2025-04-26 18:50:32.494	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: protocol execution terminated with error: round proceed error: proceeding round: round 1: ErrorType { error_type: \"InvalidKey\", bad_actors: [] }\n", "execution_time": "123.194625ms"}
2025-04-26 18:50:32.494	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:50:32.494	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:50:32.494	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:32.494	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "137.245708ms"}
2025-04-26 18:50:42.360	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "signal: killed", "stdout": "", "stderr": "", "execution_time": "9.978725583s"}
2025-04-26 18:50:42.360	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "signal: killed"}
2025-04-26 18:50:42.360	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "signal: killed"}
2025-04-26 18:50:42.360	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: signal: killed", "username": "test_user_1", "address": "0xe12767C0C574A04337C1Bc988E6B5F356Ed0e809"}
2025-04-26 18:50:42.360	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "10.004026459s"}
2025-04-26 18:51:23.055	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:51:23.055	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:51:23.055	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:51:23.055	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:51:37.397	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-26 18:51:37.397	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-26 18:51:37.397	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-26 18:51:37.397	[34mINFO[0m	web-se/main.go:69	服务器启动	{"port": "8080"}
2025-04-26 18:52:19.579	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-26 18:52:19.579	[34mINFO[0m	services/security.go:24	初始化安全芯片服务
2025-04-26 18:52:19.579	[35mDEBUG[0m	services/security.go:32	创建卡片读取器
2025-04-26 18:52:19.604	[35mDEBUG[0m	services/security.go:40	连接读卡器
2025-04-26 18:52:19.606	[35mDEBUG[0m	services/security.go:48	选择安全芯片Applet
2025-04-26 18:52:19.609	[34mINFO[0m	services/security.go:56	安全芯片服务初始化成功
2025-04-26 18:52:19.609	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-26 18:52:19.609	[34mINFO[0m	services/mpc.go:23	创建MPC服务
2025-04-26 18:52:19.609	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-26 18:52:19.609	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json", "username": "test_user_1"}
2025-04-26 18:52:19.609	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 1, "filename": "keygen_test_1.json"}
2025-04-26 18:52:19.609	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:52:19.609	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:52:19.609	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 1, "output": "temp/keygen_test_1.json"}
2025-04-26 18:52:19.609	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 1 --number-of-parties 3 --output temp/keygen_test_1.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:52:20.577	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json", "username": "test_user_2"}
2025-04-26 18:52:20.578	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 2, "filename": "keygen_test_2.json"}
2025-04-26 18:52:20.578	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:52:20.578	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:52:20.578	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 2, "output": "temp/keygen_test_2.json"}
2025-04-26 18:52:20.578	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 2 --number-of-parties 3 --output temp/keygen_test_2.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:52:21.578	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json", "username": "test_user_3"}
2025-04-26 18:52:21.578	[35mDEBUG[0m	services/mpc.go:32	开始密钥生成过程	{"threshold": 2, "parties": 3, "index": 3, "filename": "keygen_test_3.json"}
2025-04-26 18:52:21.578	[35mDEBUG[0m	services/mpc.go:46	临时文件路径	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:52:21.578	[34mINFO[0m	services/mpc.go:57	执行密钥生成命令
2025-04-26 18:52:21.578	[34mINFO[0m	utils/command.go:79	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 2, "parties": 3, "index": 3, "output": "temp/keygen_test_3.json"}
2025-04-26 18:52:21.579	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --index 3 --number-of-parties 3 --output temp/keygen_test_3.json --threshold 2 --room default", "timeout": "60s"}
2025-04-26 18:52:21.975	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "2.365729125s"}
2025-04-26 18:52:21.975	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "396.092ms"}
2025-04-26 18:52:21.975	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:52:21.975	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:52:21.975	[34mINFO[0m	utils/command.go:56	命令执行成功	{"stdout": "", "execution_time": "1.396605125s"}
2025-04-26 18:52:21.975	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:52:21.975	[34mINFO[0m	utils/command.go:93	密钥生成成功
2025-04-26 18:52:21.975	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:52:21.975	[35mDEBUG[0m	services/mpc.go:64	解析JSON文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:52:21.975	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:52:21.975	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022835f49cdefb7369e0af84bd96321b84f533f7f102dc4e96b53c676b0a44fd71"}
2025-04-26 18:52:21.975	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:52:21.975	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:21.975	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.62 KB"}
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:52:21.975	[35mDEBUG[0m	services/mpc.go:72	从JSON提取公钥
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022835f49cdefb7369e0af84bd96321b84f533f7f102dc4e96b53c676b0a44fd71"}
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:80	从公钥提取以太坊地址	{"publicKey": "022835f49cdefb7369e0af84bd96321b84f533f7f102dc4e96b53c676b0a44fd71"}
2025-04-26 18:52:21.976	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:52:21.976	[34mINFO[0m	services/mpc.go:90	生成以太坊地址	{"address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:93	读取生成的密钥文件
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.64 KB"}
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:99	文件内容大小	{"size": "35.62 KB"}
2025-04-26 18:52:21.976	[35mDEBUG[0m	services/mpc.go:102	压缩文件内容
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.22 KB"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.24 KB"}
2025-04-26 18:52:21.982	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_3", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7", "message": " \t\ufffd\u0019\ufffd\ufffd\ufffdeYr9VՎF\ufffdb&\u0005_\ufffdr6o\u00127L\ufffdk\rG)"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "b1de7b21243547c6b2cd32992ea5ad2df61b7bc7"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "20098d19bcdcc96559723956d58e46ff6226055fca72366f12374caf6b0d4729"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.23 KB"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.26 KB"}
2025-04-26 18:52:21.982	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_2", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7", "message": "\ufffd\u0004\ufffd\"\ufffd\u000e7\ufffd\ufffd*3`\ufffd$\ufffd\ufffdR\u0011H\u001d3Uh\ufffd\ufffdE\ufffdCqTD\ufffd"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "b1de7b21243547c6b2cd32992ea5ad2df61b7bc7"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "ae04f222ab0e37b8ab2a3360c724fbb85211481d335568e0c245b143715444cc"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:108	压缩后数据大小	{"size": "6.20 KB"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:111	生成随机加密密钥
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:119	加密压缩数据
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/mpc.go:125	加密后数据大小	{"size": "6.23 KB"}
2025-04-26 18:52:21.982	[34mINFO[0m	services/mpc.go:128	存储密钥到安全芯片	{"userName": "test_user_1", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7", "message": "\ufffd\ufffd\ufffd-\u0008\ufffdI\ufffd\u0012\ufffd\ufffdG\u0017\u000c\ufffd_\ufffd\u0017\ufffdD\ufffd\ufffd\ufffd\u001c\"\ufffd\ufffdtw؇\r"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:92	❕准备存储数据到安全芯片❕
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:93	用户名字节	{"userBytes": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:94	地址字节	{"addrBytes": "b1de7b21243547c6b2cd32992ea5ad2df61b7bc7"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:95	密钥字节	{"key": "87feb52d08a0499512a99747170ce55fa1179944c2c8cf1c228eac7477d8870d"}
2025-04-26 18:52:21.982	[35mDEBUG[0m	services/security.go:105	调用安全芯片存储数据
2025-04-26 18:52:22.004	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 14, "total_records": 15}
2025-04-26 18:52:22.004	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:52:22.004	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_3.json"}
2025-04-26 18:52:22.004	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7", "username": "test_user_3", "encrypted_key_length": 6394}
2025-04-26 18:52:22.004	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "425.922875ms"}
2025-04-26 18:52:22.025	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 15, "total_records": 16}
2025-04-26 18:52:22.025	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:52:22.025	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_2.json"}
2025-04-26 18:52:22.025	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7", "username": "test_user_2", "encrypted_key_length": 6411}
2025-04-26 18:52:22.025	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.448121584s"}
2025-04-26 18:52:22.047	[34mINFO[0m	services/security.go:112	数据已存储到安全芯片	{"index": 16, "total_records": 17}
2025-04-26 18:52:22.047	[34mINFO[0m	services/mpc.go:137	密钥生成完成
2025-04-26 18:52:22.047	[35mDEBUG[0m	services/mpc.go:50	清理临时文件	{"path": "temp/keygen_test_1.json"}
2025-04-26 18:52:22.047	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7", "username": "test_user_1", "encrypted_key_length": 6379}
2025-04-26 18:52:22.047	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.468324s"}
2025-04-26 18:52:22.580	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745664742", "filename": "keygen_result_1.json", "username": "test_user_1", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:22.580	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-26 18:52:22.580	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "1,2", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7", "filename": "keygen_result_1.json"}
2025-04-26 18:52:22.580	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:52:22.581	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user_1", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:22.581	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user_1", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:22.581	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0"}
2025-04-26 18:52:22.581	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "B1DE7B21243547C6B2CD32992EA5AD2DF61B7BC7"}
2025-04-26 18:52:22.581	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "71 B"}
2025-04-26 18:52:22.593	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:52:22.593	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:52:22.593	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.20 KB"}
2025-04-26 18:52:22.593	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:52:22.594	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.62 KB"}
2025-04-26 18:52:22.594	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_1.json"}
2025-04-26 18:52:22.595	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745664742"}
2025-04-26 18:52:22.595	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "这是一条测试消息，时间戳: 1745664742", "local_share": "temp/keygen_result_1.json"}
2025-04-26 18:52:22.595	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 1,2 -d \"这是一条测试消息，时间戳: 1745664742\" -l temp/keygen_result_1.json", "timeout": "60s"}
2025-04-26 18:52:23.582	[34mINFO[0m	controllers/mpc.go:187	接收到签名请求	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745664742", "filename": "keygen_result_2.json", "username": "test_user_2", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:23.583	[35mDEBUG[0m	controllers/mpc.go:193	签名请求详情	{"encrypted_key_length": "6.3 KB", "signature_length": "72 B"}
2025-04-26 18:52:23.583	[35mDEBUG[0m	services/mpc.go:143	开始消息签名过程	{"parties": "1,2", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7", "filename": "keygen_result_2.json"}
2025-04-26 18:52:23.583	[35mDEBUG[0m	services/mpc.go:162	临时文件路径	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:52:23.583	[34mINFO[0m	services/mpc.go:173	从安全芯片读取密钥	{"userName": "test_user_2", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:23.583	[35mDEBUG[0m	services/security.go:125	准备从安全芯片读取数据	{"username": "test_user_2", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:23.583	[35mDEBUG[0m	services/security.go:144	用户名字节	{"userBytes": "6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E"}
2025-04-26 18:52:23.583	[35mDEBUG[0m	services/security.go:145	地址字节	{"addrBytes": "B1DE7B21243547C6B2CD32992EA5AD2DF61B7BC7"}
2025-04-26 18:52:23.583	[35mDEBUG[0m	services/security.go:148	调用安全芯片读取数据	{"signature_length": "72 B"}
2025-04-26 18:52:23.595	[34mINFO[0m	services/security.go:156	已从安全芯片读取数据	{"data_length": "32 B"}
2025-04-26 18:52:23.595	[35mDEBUG[0m	services/mpc.go:181	解密数据
2025-04-26 18:52:23.595	[35mDEBUG[0m	services/mpc.go:187	解密后数据大小	{"size": "6.23 KB"}
2025-04-26 18:52:23.595	[35mDEBUG[0m	services/mpc.go:190	解压数据
2025-04-26 18:52:23.595	[35mDEBUG[0m	services/mpc.go:196	解压后数据大小	{"size": "35.64 KB"}
2025-04-26 18:52:23.595	[35mDEBUG[0m	services/mpc.go:199	写入临时文件	{"path": "temp/keygen_result_2.json"}
2025-04-26 18:52:23.596	[34mINFO[0m	services/mpc.go:206	执行签名命令	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745664742"}
2025-04-26 18:52:23.596	[34mINFO[0m	utils/command.go:110	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "这是一条测试消息，时间戳: 1745664742", "local_share": "temp/keygen_result_2.json"}
2025-04-26 18:52:23.596	[34mINFO[0m	utils/command.go:35	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 1,2 -d \"这是一条测试消息，时间戳: 1745664742\" -l temp/keygen_result_2.json", "timeout": "60s"}
2025-04-26 18:52:23.919	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: protocol execution terminated with error: round proceed error: proceeding round: round 6: check sig: Phase6Error\n", "execution_time": "1.323887625s"}
2025-04-26 18:52:23.919	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:52:23.919	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:52:23.919	[31mERROR[0m	utils/command.go:47	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: protocol execution terminated with error: round proceed error: proceeding round: round 6: check sig: Phase6Error\n", "execution_time": "322.466542ms"}
2025-04-26 18:52:23.919	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:23.919	[31mERROR[0m	utils/command.go:119	签名操作失败	{"error": "exit status 1"}
2025-04-26 18:52:23.919	[31mERROR[0m	services/mpc.go:211	签名命令失败	{"error": "exit status 1"}
2025-04-26 18:52:23.919	[31mERROR[0m	controllers/mpc.go:209	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0xB1dE7b21243547c6B2cd32992EA5AD2dF61b7bc7"}
2025-04-26 18:52:23.919	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "1.339038334s"}
2025-04-26 18:52:23.919	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "336.986208ms"}

2025-04-28 13:19:44.114	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:19:44.114	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:19:44.114	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:19:44.115	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:19:48.919	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:19:48.920	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:48.920	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:48.942	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:48.942	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:48.942	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:48.942	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:48.942	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:48.942	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:48.944	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:48.944	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:48.944	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:48.944	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:48.944	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:48.946	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:48.946	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:48.946	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:48.946	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:48.947	[31mERROR[0m	controllers/mpc.go:245	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:48.947	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 500, "latency": "27.359541ms"}
2025-04-28 13:19:48.947	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:19:48.947	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:48.947	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:48.947	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:48.947	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:48.947	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:48.947	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:48.947	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:48.948	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:48.948	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:48.948	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:48.948	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:48.948	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:48.948	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:48.950	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:48.950	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:48.950	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:48.950	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:48.950	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:48.950	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "3.0225ms"}
2025-04-28 13:19:49.949	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:19:49.950	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:49.950	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:49.951	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:49.951	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:49.951	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:49.951	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:49.951	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:49.951	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:49.953	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:49.953	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:49.953	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:49.953	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:49.953	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:49.956	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:49.956	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:49.957	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:49.957	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:49.957	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:49.957	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "8.756625ms"}
2025-04-28 13:19:50.950	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:19:50.951	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:50.951	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:50.952	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:50.952	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:50.952	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:50.952	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:50.953	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:50.953	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:50.955	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:50.955	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:50.955	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:50.955	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:50.955	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:50.958	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:50.958	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:50.958	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:50.959	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:50.959	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:50.959	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "8.671292ms"}
2025-04-28 13:19:51.954	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:19:51.955	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:51.955	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:51.956	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:51.956	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:51.956	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:51.956	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:51.956	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:51.956	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:51.959	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:51.959	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:51.959	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:51.959	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:51.959	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:51.962	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:51.963	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:51.963	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:51.963	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:51.963	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:51.963	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "9.087416ms"}
2025-04-28 13:19:52.957	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:19:52.958	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:52.958	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:52.958	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:52.959	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:52.959	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:52.959	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:52.959	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:52.959	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:52.961	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:52.961	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:52.961	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:52.961	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:52.961	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:52.964	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:52.964	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:52.964	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:52.965	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:52.965	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:52.965	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "7.959208ms"}
2025-04-28 13:19:53.958	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:19:53.958	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:53.958	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:53.959	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:53.959	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:53.959	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:53.959	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:53.959	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:53.959	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:53.960	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:53.960	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:53.960	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:53.960	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:53.960	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:53.962	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:53.962	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:53.962	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:53.962	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:53.962	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:53.962	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "3.79075ms"}
2025-04-28 13:19:54.964	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:19:54.965	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:54.965	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:54.966	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:54.967	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:54.967	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:54.967	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:54.967	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:54.967	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:54.969	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:54.969	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:54.969	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:54.969	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:54.969	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:54.972	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:54.972	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:54.972	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:54.973	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:54.973	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:54.974	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "9.148459ms"}
2025-04-28 13:19:55.978	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:19:55.979	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:19:55.979	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:19:55.979	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:19:55.980	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:19:55.980	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:55.980	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:19:55.980	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:19:55.980	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:19:55.982	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:19:55.982	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:19:55.982	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:19:55.982	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:19:55.982	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:19:55.985	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:19:55.985	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:19:55.985	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:55.986	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:55.986	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:19:55.986	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "8.452334ms"}
2025-04-28 13:20:46.607	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:20:46.607	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:20:46.607	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:20:46.607	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:20:56.724	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:20:56.725	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:20:56.725	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:20:56.742	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:20:56.742	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:20:56.742	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:20:56.742	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:20:56.742	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:20:56.742	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:20:56.801	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:20:56.801	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:20:56.801	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:20:56.801	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:20:56.801	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 9F7F2A007F0002867F31140001408001326843A01600090000000900007F43A016013268000000406710037E82
2025-04-28 13:20:56.803	[35mDEBUG[0m	seclient/commands.go:234	获取CPLC数据成功	{"CPLC标签": "9F7F", "CPLC长度": 42, "CPLC数据": "007f0002867f31140001408001326843a01600090000000900007f43a016013268000000406710037e82"}
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:144	=== 选择Applet命令 ===
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:145	APDU: 00A4040008A000000062CF0101
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:146	命令解析:
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:147	  CLA: 0x00 (ISO标准命令)
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:148	  INS: 0xA4 (选择指令)
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:149	  P1: 0x04 (按名称选择)
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:150	  P2: 0x00 (首次选择)
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:151	  Lc: 0x08 (AID长度)
2025-04-28 13:20:56.803	[34mINFO[0m	seclient/cardreader.go:152	  Data: A000000062CF0101 (AID)
2025-04-28 13:20:56.805	[34mINFO[0m	seclient/cardreader.go:166	=== 选择Applet响应 ===
2025-04-28 13:20:56.805	[34mINFO[0m	seclient/cardreader.go:167	响应数据: 9000
2025-04-28 13:20:56.805	[34mINFO[0m	seclient/cardreader.go:168	状态码: 0x9000 (成功)
2025-04-28 13:20:56.805	[34mINFO[0m	seclient/cardreader.go:169	数据: 
2025-04-28 13:20:56.805	[34mINFO[0m	seclient/cardreader.go:170	成功选择Applet, AID: A000000062CF0101
2025-04-28 13:20:56.805	[35mDEBUG[0m	services/security.go:59	安全芯片服务初始化完成
2025-04-28 13:20:56.806	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-28 13:20:56.806	[35mDEBUG[0m	services/mpc.go:29	初始化MPC服务
2025-04-28 13:20:56.806	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-28 13:20:56.806	[34mINFO[0m	controllers/mpc.go:254	接收到获取CPLC信息请求	{"client_ip": "::1"}
2025-04-28 13:20:56.806	[35mDEBUG[0m	services/security.go:225	获取CPLC信息
2025-04-28 13:20:56.806	[35mDEBUG[0m	services/security.go:237	CPLC信息获取成功	{"长度": 42, "CPLC": "007f0002867f31140001408001326843a01600090000000900007f43a016013268000000406710037e82"}
2025-04-28 13:20:56.806	[34mINFO[0m	controllers/mpc.go:269	获取CPLC信息成功	{"cplc": "007F0002867F31140001408001326843A01600090000000900007F43A016013268000000406710037E82"}
2025-04-28 13:20:56.806	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 200, "latency": "81.863375ms"}
2025-04-28 13:20:56.807	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 1, "filename": "keygen_data_1.json", "username": "test_user_1"}
2025-04-28 13:20:56.807	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 1, "file": "keygen_data_1.json"}
2025-04-28 13:20:56.807	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_1.json"}
2025-04-28 13:20:56.807	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:20:56.807	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 1, "output": "temp/keygen_data_1.json"}
2025-04-28 13:20:56.807	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 1 --output temp/keygen_data_1.json", "timeout": "1m0s"}
2025-04-28 13:20:57.810	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 2, "filename": "keygen_data_2.json", "username": "test_user_2"}
2025-04-28 13:20:57.810	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 2, "file": "keygen_data_2.json"}
2025-04-28 13:20:57.810	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_2.json"}
2025-04-28 13:20:57.810	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:20:57.810	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 2, "output": "temp/keygen_data_2.json"}
2025-04-28 13:20:57.810	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 2 --output temp/keygen_data_2.json", "timeout": "1m0s"}
2025-04-28 13:20:58.811	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 3, "filename": "keygen_data_3.json", "username": "test_user_3"}
2025-04-28 13:20:58.811	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 3, "file": "keygen_data_3.json"}
2025-04-28 13:20:58.811	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_3.json"}
2025-04-28 13:20:58.811	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:20:58.811	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 3, "output": "temp/keygen_data_3.json"}
2025-04-28 13:20:58.812	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 3 --output temp/keygen_data_3.json", "timeout": "1m0s"}
2025-04-28 13:20:59.187	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "1.376318459s"}
2025-04-28 13:20:59.187	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:20:59.187	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "2.380268792s"}
2025-04-28 13:20:59.187	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:20:59.187	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:20:59.187	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "375.26475ms"}
2025-04-28 13:20:59.187	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:20:59.187	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:20:59.187	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:20:59.187	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "021a74c5b34a8626f3071ff4e2a6f386205739e148766b5c2d6fc20a6f7690f706"}
2025-04-28 13:20:59.187	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "021a74c5b34a8626f3071ff4e2a6f386205739e148766b5c2d6fc20a6f7690f706"}
2025-04-28 13:20:59.187	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "021a74c5b34a8626f3071ff4e2a6f386205739e148766b5c2d6fc20a6f7690f706"}
2025-04-28 13:20:59.188	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "021a74c5b34a8626f3071ff4e2a6f386205739e148766b5c2d6fc20a6f7690f706", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.188	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.188	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35953}
2025-04-28 13:20:59.188	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "021a74c5b34a8626f3071ff4e2a6f386205739e148766b5c2d6fc20a6f7690f706", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.188	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.188	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "021a74c5b34a8626f3071ff4e2a6f386205739e148766b5c2d6fc20a6f7690f706", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.188	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.188	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35970}
2025-04-28 13:20:59.188	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35951}
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6293}
2025-04-28 13:20:59.194	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:20:59.194	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "8f98fef5b6e598cffa537cc3d1991c5a902ac891da44f284ddd1d28e2062c305"}
2025-04-28 13:20:59.194	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "f829fc0015086b3484ab..."}
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6321}
2025-04-28 13:20:59.194	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_2", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "key_len": 32}
2025-04-28 13:20:59.194	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "0df22c436ead9daf4ccb83cc3a3092e1a69d3349", "message": "8f98fef5b6e598cffa537cc3d1991c5a902ac891da44f284ddd1d28e2062c305"}
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000546CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E0DF22C436EAD9DAF4CCB83CC3A3092E1A69D33498F98FEF5B6E598CFFA537CC3D1991C5A902AC891DA44F284DDD1D28E2062C305
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6290}
2025-04-28 13:20:59.194	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:20:59.194	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "2df82853d4c69ae7100f4031202c55a038d617081085c7d01e6212f75e9c0339"}
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6290}
2025-04-28 13:20:59.194	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:20:59.194	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "dfc200431874420bd2d09f2d3284ddce23abc5b6046a570da8a68d45c4d79b81"}
2025-04-28 13:20:59.194	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "c956ebd8ede7d06952fb..."}
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6318}
2025-04-28 13:20:59.194	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_3", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "key_len": 32}
2025-04-28 13:20:59.194	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:20:59.194	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "f9269f734c67a49b432a..."}
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6318}
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "0df22c436ead9daf4ccb83cc3a3092e1a69d3349", "message": "2df82853d4c69ae7100f4031202c55a038d617081085c7d01e6212f75e9c0339"}
2025-04-28 13:20:59.194	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:20:59.194	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_1", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "key_len": 32}
2025-04-28 13:20:59.194	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "0df22c436ead9daf4ccb83cc3a3092e1a69d3349", "message": "dfc200431874420bd2d09f2d3284ddce23abc5b6046a570da8a68d45c4d79b81"}
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000543852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DF0DF22C436EAD9DAF4CCB83CC3A3092E1A69D33492DF82853D4C69AE7100F4031202C55A038D617081085C7D01E6212F75E9C0339
2025-04-28 13:20:59.194	[34mINFO[0m	seclient/cardreader.go:179	命令: 8010000054C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A00DF22C436EAD9DAF4CCB83CC3A3092E1A69D3349DFC200431874420BD2D09F2D3284DDCE23ABC5B6046A570DA8A68D45C4D79B81
2025-04-28 13:20:59.220	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:20:59.220	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 1C1D
2025-04-28 13:20:59.220	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 28, "记录总数": 29}
2025-04-28 13:20:59.220	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 28, "记录总数": 29}
2025-04-28 13:20:59.220	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.220	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "username": "test_user_2", "encrypted_key_length": 6321}
2025-04-28 13:20:59.220	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.410013958s"}
2025-04-28 13:20:59.243	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:20:59.243	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 1D1E
2025-04-28 13:20:59.243	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 29, "记录总数": 30}
2025-04-28 13:20:59.243	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 29, "记录总数": 30}
2025-04-28 13:20:59.243	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.243	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "username": "test_user_3", "encrypted_key_length": 6318}
2025-04-28 13:20:59.243	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "432.342667ms"}
2025-04-28 13:20:59.264	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:20:59.264	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 1E1F
2025-04-28 13:20:59.264	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 30, "记录总数": 31}
2025-04-28 13:20:59.264	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 30, "记录总数": 31}
2025-04-28 13:20:59.264	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.264	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "username": "test_user_1", "encrypted_key_length": 6318}
2025-04-28 13:20:59.264	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.457364958s"}
2025-04-28 13:20:59.813	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745817659", "filename": "sign_data_1.json", "username": "test_user_1", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.813	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-28 13:20:59.813	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "file": "sign_data_1.json"}
2025-04-28 13:20:59.813	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_1.json"}
2025-04-28 13:20:59.813	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:20:59.813	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_1", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "sig_len": 71}
2025-04-28 13:20:59.813	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:20:59.813	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "0df22c436ead9daf4ccb83cc3a3092e1a69d3349", "signature": "304502207c82114d67795b3ab1cbe226566614aca9cf61384e68c6967b3815e592bd52eb022100d1620637b790ef5f905be2032564d9161aa3dd804ab1b5746acb2b842e1eb987"}
2025-04-28 13:20:59.813	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:20:59.813	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007BC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A00DF22C436EAD9DAF4CCB83CC3A3092E1A69D3349304502207C82114D67795B3AB1CBE226566614ACA9CF61384E68C6967B3815E592BD52EB022100D1620637B790EF5F905BE2032564D9161AA3DD804AB1B5746ACB2B842E1EB987
2025-04-28 13:20:59.828	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:20:59.828	[34mINFO[0m	seclient/cardreader.go:191	响应数据: DFC200431874420BD2D09F2D3284DDCE23ABC5B6046A570DA8A68D45C4D79B81
2025-04-28 13:20:59.828	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:20:59.828	[34mINFO[0m	seclient/commands.go:122	数据: dfc200431874420bd2d09f2d3284ddce23abc5b6046a570da8a68d45c4d79b81
2025-04-28 13:20:59.828	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:20:59.828	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:20:59.828	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "dfc200431874420bd2d09f2d3284ddce23abc5b6046a570da8a68d45c4d79b81", "ciphertext_preview": "f9269f734c67a49b432a..."}
2025-04-28 13:20:59.828	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:20:59.828	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6290}
2025-04-28 13:20:59.829	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35970}
2025-04-28 13:20:59.830	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:20:59.830	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "这是一条测试消息，时间戳: 1745817659", "local_share": "temp/sign_data_1.json"}
2025-04-28 13:20:59.830	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 --number-of-parties 1,2 --data-to-sign 这是一条测试消息，时间戳: 1745817659 --local-share temp/sign_data_1.json", "timeout": "1m0s"}
2025-04-28 13:20:59.852	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Found argument '--number-of-parties' which wasn't expected, or isn't valid in this context\n\nUSAGE:\n    gg20_signing --address <address> --data-to-sign <data-to-sign> --local-share <local-share>\n\nFor more information try --help\n", "execution_time": "21.782666ms"}
2025-04-28 13:20:59.852	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:20:59.852	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:20:59.852	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:20:59.852	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "39.485125ms"}
2025-04-28 13:21:00.814	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745817659", "filename": "sign_data_2.json", "username": "test_user_2", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:21:00.814	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-28 13:21:00.814	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "file": "sign_data_2.json"}
2025-04-28 13:21:00.814	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_2.json"}
2025-04-28 13:21:00.814	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:21:00.815	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_2", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "sig_len": 71}
2025-04-28 13:21:00.815	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:21:00.815	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "0df22c436ead9daf4ccb83cc3a3092e1a69d3349", "signature": "304502206667e0801690136bd4c8a8d02a3c31d364e0cf68d4309b3f65b1ffa8cab307b4022100a022d0c3d5c557d22a22e17e3976eaad2ac8f52ce5f1092ccf00ffd2fabf5fd5"}
2025-04-28 13:21:00.815	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:00.815	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007B6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E0DF22C436EAD9DAF4CCB83CC3A3092E1A69D3349304502206667E0801690136BD4C8A8D02A3C31D364E0CF68D4309B3F65B1FFA8CAB307B4022100A022D0C3D5C557D22A22E17E3976EAAD2AC8F52CE5F1092CCF00FFD2FABF5FD5
2025-04-28 13:21:00.829	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:21:00.829	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 8F98FEF5B6E598CFFA537CC3D1991C5A902AC891DA44F284DDD1D28E2062C305
2025-04-28 13:21:00.829	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:21:00.829	[34mINFO[0m	seclient/commands.go:122	数据: 8f98fef5b6e598cffa537cc3d1991c5a902ac891da44f284ddd1d28e2062c305
2025-04-28 13:21:00.829	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:21:00.829	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:21:00.829	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "8f98fef5b6e598cffa537cc3d1991c5a902ac891da44f284ddd1d28e2062c305", "ciphertext_preview": "f829fc0015086b3484ab..."}
2025-04-28 13:21:00.829	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:21:00.829	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6293}
2025-04-28 13:21:00.830	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35951}
2025-04-28 13:21:00.830	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:21:00.830	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "这是一条测试消息，时间戳: 1745817659", "local_share": "temp/sign_data_2.json"}
2025-04-28 13:21:00.830	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 --number-of-parties 1,2 --data-to-sign 这是一条测试消息，时间戳: 1745817659 --local-share temp/sign_data_2.json", "timeout": "1m0s"}
2025-04-28 13:21:00.846	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Found argument '--number-of-parties' which wasn't expected, or isn't valid in this context\n\nUSAGE:\n    gg20_signing --address <address> --data-to-sign <data-to-sign> --local-share <local-share>\n\nFor more information try --help\n", "execution_time": "15.265709ms"}
2025-04-28 13:21:00.846	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:21:00.846	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:21:00.846	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:21:00.846	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "32.139292ms"}
2025-04-28 13:21:01.816	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_1", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:21:01.817	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "72 B"}
2025-04-28 13:21:01.817	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_1", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "sig_len": 72}
2025-04-28 13:21:01.817	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:21:01.817	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "0df22c436ead9daf4ccb83cc3a3092e1a69d3349", "signature": "3046022100fae90b5ab59303a2c3d3d25f19b816c2b55ad297e8c8bcabd433cd180f98a949022100f946ec1592dcceb1fe4ed7b728eecd8219911dcc662f99826cf815be52d5d96b"}
2025-04-28 13:21:01.817	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:01.817	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007CC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A00DF22C436EAD9DAF4CCB83CC3A3092E1A69D33493046022100FAE90B5AB59303A2C3D3D25F19B816C2B55AD297E8C8BCABD433CD180F98A949022100F946EC1592DCCEB1FE4ED7B728EECD8219911DCC662F99826CF815BE52D5D96B
2025-04-28 13:21:01.838	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:21:01.838	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 1E1E
2025-04-28 13:21:01.838	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 30, "剩余记录数": 30}
2025-04-28 13:21:01.838	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 30, "记录总数": 30}
2025-04-28 13:21:01.838	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_1", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:21:01.838	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "21.741542ms"}
2025-04-28 13:21:02.840	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_2", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:21:02.840	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "72 B"}
2025-04-28 13:21:02.840	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_2", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "sig_len": 72}
2025-04-28 13:21:02.840	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:21:02.840	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "0df22c436ead9daf4ccb83cc3a3092e1a69d3349", "signature": "30460221008d0dfa347269561711752d3d9d6e589f3682288c99a0b6ee65cbb0c5a7a00ac502210096f54c336c15e03de4bf367f45c3c09f2bed82078b095c980a78628a5003da76"}
2025-04-28 13:21:02.840	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:02.840	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007C6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E0DF22C436EAD9DAF4CCB83CC3A3092E1A69D334930460221008D0DFA347269561711752D3D9D6E589F3682288C99A0B6EE65CBB0C5A7A00AC502210096F54C336C15E03DE4BF367F45C3C09F2BED82078B095C980A78628A5003DA76
2025-04-28 13:21:02.859	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:21:02.859	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 1C1D
2025-04-28 13:21:02.859	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 28, "剩余记录数": 29}
2025-04-28 13:21:02.859	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 28, "记录总数": 29}
2025-04-28 13:21:02.859	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_2", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:21:02.860	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "19.2985ms"}
2025-04-28 13:21:03.861	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_3", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:21:03.861	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "72 B"}
2025-04-28 13:21:03.862	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_3", "addr": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349", "sig_len": 72}
2025-04-28 13:21:03.862	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:21:03.862	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "0df22c436ead9daf4ccb83cc3a3092e1a69d3349", "signature": "3046022100d77fe7690839c14f6d582d401152cf12d4c6ece77383ddd6c9ab62c9deaf8b61022100c9abfd59578b79ed886e0d5607e6b761a3641c08087ffd77d07f91729bae8e15"}
2025-04-28 13:21:03.862	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:03.862	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007C3852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DF0DF22C436EAD9DAF4CCB83CC3A3092E1A69D33493046022100D77FE7690839C14F6D582D401152CF12D4C6ECE77383DDD6C9AB62C9DEAF8B61022100C9ABFD59578B79ED886E0D5607E6B761A3641C08087FFD77D07F91729BAE8E15
2025-04-28 13:21:03.882	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:21:03.883	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 1D1C
2025-04-28 13:21:03.883	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 29, "剩余记录数": 28}
2025-04-28 13:21:03.883	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 29, "记录总数": 28}
2025-04-28 13:21:03.883	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_3", "address": "0x0dF22C436EaD9DAf4CCB83cC3A3092e1A69d3349"}
2025-04-28 13:21:03.883	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "21.759042ms"}
2025-04-28 13:21:52.630	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:21:52.630	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:21:52.630	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:21:52.631	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:21:56.809	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:21:56.809	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:21:56.809	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:21:56.821	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:21:56.821	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:21:56.821	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:56.821	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:21:56.821	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:21:56.821	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:56.823	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:21:56.823	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:21:56.823	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:21:56.823	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:56.823	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:21:56.824	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:21:56.824	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:21:56.824	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:56.825	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:56.825	[31mERROR[0m	controllers/mpc.go:245	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:56.825	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 500, "latency": "15.912625ms"}
2025-04-28 13:21:56.826	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:21:56.826	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:21:56.826	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:21:56.826	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:21:56.826	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:21:56.826	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:56.826	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:21:56.826	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:21:56.826	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:56.826	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:21:56.826	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:21:56.826	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:21:56.826	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:56.826	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:21:56.828	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:21:56.828	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:21:56.828	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:56.828	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:56.828	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:56.828	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "2.586791ms"}
2025-04-28 13:21:57.826	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:21:57.827	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:21:57.827	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:21:57.827	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:21:57.827	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:21:57.827	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:57.827	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:21:57.827	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:21:57.827	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:57.828	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:21:57.828	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:21:57.828	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:21:57.828	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:57.828	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:21:57.830	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:21:57.830	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:21:57.830	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:57.830	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:57.830	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:57.830	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "3.817417ms"}
2025-04-28 13:21:58.828	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:21:58.829	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:21:58.829	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:21:58.830	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:21:58.830	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:21:58.830	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:58.830	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:21:58.830	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:21:58.830	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:58.832	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:21:58.832	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:21:58.832	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:21:58.832	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:58.832	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:21:58.835	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:21:58.835	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:21:58.835	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:58.835	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:58.835	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:58.835	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "7.523375ms"}
2025-04-28 13:21:59.848	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:21:59.848	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:21:59.848	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:21:59.849	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:21:59.849	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:21:59.849	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:59.849	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:21:59.849	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:21:59.849	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:21:59.850	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:21:59.850	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:21:59.850	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:21:59.850	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:21:59.850	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:21:59.852	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:21:59.852	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:21:59.852	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:59.852	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:59.852	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:21:59.852	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "4.1135ms"}
2025-04-28 13:22:00.851	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:22:00.851	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:22:00.852	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:22:00.852	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:22:00.853	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:22:00.853	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:00.853	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:22:00.853	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:22:00.853	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:00.855	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:22:00.855	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:22:00.855	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:22:00.855	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:22:00.855	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:22:00.858	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:22:00.858	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:22:00.858	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:00.859	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:00.859	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:00.859	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.439792ms"}
2025-04-28 13:22:01.852	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:22:01.853	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:22:01.853	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:22:01.853	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:22:01.853	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:22:01.854	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:01.854	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:22:01.854	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:22:01.854	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:01.858	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:22:01.858	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:22:01.858	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:22:01.858	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:22:01.858	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:22:01.860	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:22:01.860	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:22:01.860	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:01.860	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:01.860	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:01.861	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "8.36525ms"}
2025-04-28 13:22:02.863	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:22:02.864	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:22:02.864	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:22:02.865	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:22:02.865	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:22:02.866	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:02.866	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:22:02.866	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:22:02.866	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:02.869	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:22:02.869	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:22:02.870	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:22:02.870	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:22:02.870	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:22:02.872	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:22:02.872	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:22:02.873	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:02.873	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:02.873	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:02.874	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "10.313459ms"}
2025-04-28 13:22:03.878	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:22:03.879	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:22:03.879	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:22:03.879	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:22:03.880	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:22:03.880	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:03.880	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:22:03.880	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:22:03.880	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:03.882	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:22:03.882	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:22:03.882	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:22:03.882	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:22:03.882	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:22:03.885	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:22:03.885	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:22:03.885	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:03.886	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:03.886	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:22:03.886	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "8.298083ms"}
2025-04-28 13:22:39.685	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:22:39.685	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:22:39.685	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:22:39.686	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:22:57.852	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:22:57.853	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:22:57.853	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:22:57.865	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:22:57.865	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:22:57.865	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:57.865	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:22:57.865	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:22:57.865	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:22:57.922	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:22:57.922	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:22:57.922	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:22:57.923	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:22:57.923	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 9F7F2A007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301
2025-04-28 13:22:57.925	[35mDEBUG[0m	seclient/commands.go:234	获取CPLC数据成功	{"CPLC标签": "9F7F", "CPLC长度": 42, "CPLC数据": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:144	=== 选择Applet命令 ===
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:145	APDU: 00A4040008A000000062CF0101
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:146	命令解析:
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:147	  CLA: 0x00 (ISO标准命令)
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:148	  INS: 0xA4 (选择指令)
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:149	  P1: 0x04 (按名称选择)
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:150	  P2: 0x00 (首次选择)
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:151	  Lc: 0x08 (AID长度)
2025-04-28 13:22:57.925	[34mINFO[0m	seclient/cardreader.go:152	  Data: A000000062CF0101 (AID)
2025-04-28 13:22:57.927	[34mINFO[0m	seclient/cardreader.go:166	=== 选择Applet响应 ===
2025-04-28 13:22:57.927	[34mINFO[0m	seclient/cardreader.go:167	响应数据: 9000
2025-04-28 13:22:57.927	[34mINFO[0m	seclient/cardreader.go:168	状态码: 0x9000 (成功)
2025-04-28 13:22:57.927	[34mINFO[0m	seclient/cardreader.go:169	数据: 
2025-04-28 13:22:57.927	[34mINFO[0m	seclient/cardreader.go:170	成功选择Applet, AID: A000000062CF0101
2025-04-28 13:22:57.927	[35mDEBUG[0m	services/security.go:59	安全芯片服务初始化完成
2025-04-28 13:22:57.927	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-28 13:22:57.927	[35mDEBUG[0m	services/mpc.go:29	初始化MPC服务
2025-04-28 13:22:57.927	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-28 13:22:57.927	[34mINFO[0m	controllers/mpc.go:254	接收到获取CPLC信息请求	{"client_ip": "::1"}
2025-04-28 13:22:57.927	[35mDEBUG[0m	services/security.go:225	获取CPLC信息
2025-04-28 13:22:57.927	[35mDEBUG[0m	services/security.go:237	CPLC信息获取成功	{"长度": 42, "CPLC": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:22:57.927	[34mINFO[0m	controllers/mpc.go:269	获取CPLC信息成功	{"cplc": "007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301"}
2025-04-28 13:22:57.927	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 200, "latency": "74.316125ms"}
2025-04-28 13:22:57.928	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 1, "filename": "keygen_data_1.json", "username": "test_user_1"}
2025-04-28 13:22:57.928	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 1, "file": "keygen_data_1.json"}
2025-04-28 13:22:57.928	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_1.json"}
2025-04-28 13:22:57.928	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:22:57.928	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 1, "output": "temp/keygen_data_1.json"}
2025-04-28 13:22:57.928	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 1 --output temp/keygen_data_1.json", "timeout": "1m0s"}
2025-04-28 13:22:58.931	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 2, "filename": "keygen_data_2.json", "username": "test_user_2"}
2025-04-28 13:22:58.931	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 2, "file": "keygen_data_2.json"}
2025-04-28 13:22:58.931	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_2.json"}
2025-04-28 13:22:58.931	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:22:58.931	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 2, "output": "temp/keygen_data_2.json"}
2025-04-28 13:22:58.931	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 2 --output temp/keygen_data_2.json", "timeout": "1m0s"}
2025-04-28 13:22:59.932	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 3, "filename": "keygen_data_3.json", "username": "test_user_3"}
2025-04-28 13:22:59.932	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 3, "file": "keygen_data_3.json"}
2025-04-28 13:22:59.933	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_3.json"}
2025-04-28 13:22:59.933	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:22:59.933	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 3, "output": "temp/keygen_data_3.json"}
2025-04-28 13:22:59.933	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 3 --output temp/keygen_data_3.json", "timeout": "1m0s"}
2025-04-28 13:23:00.132	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "1.20077275s"}
2025-04-28 13:23:00.132	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "2.203498292s"}
2025-04-28 13:23:00.132	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:23:00.132	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:23:00.132	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:23:00.132	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:23:00.132	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "198.941083ms"}
2025-04-28 13:23:00.132	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:23:00.132	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:23:00.132	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "03242d236a02821d7f51fd0780a42248e3a9755a85754bb2e4336b225cfb84d91b"}
2025-04-28 13:23:00.132	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "03242d236a02821d7f51fd0780a42248e3a9755a85754bb2e4336b225cfb84d91b"}
2025-04-28 13:23:00.132	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "03242d236a02821d7f51fd0780a42248e3a9755a85754bb2e4336b225cfb84d91b"}
2025-04-28 13:23:00.132	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "03242d236a02821d7f51fd0780a42248e3a9755a85754bb2e4336b225cfb84d91b", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.132	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.132	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "03242d236a02821d7f51fd0780a42248e3a9755a85754bb2e4336b225cfb84d91b", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.132	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.132	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "03242d236a02821d7f51fd0780a42248e3a9755a85754bb2e4336b225cfb84d91b", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.132	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35948}
2025-04-28 13:23:00.132	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.132	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35940}
2025-04-28 13:23:00.133	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35951}
2025-04-28 13:23:00.138	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6308}
2025-04-28 13:23:00.138	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:23:00.138	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "e2cf07e7c7d34718446b7ff4d1a8a4a90c457c577a3479907db99b96f81ba07c"}
2025-04-28 13:23:00.138	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "4dd20c1d43f8b53ae861..."}
2025-04-28 13:23:00.138	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6336}
2025-04-28 13:23:00.138	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:23:00.138	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_1", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "key_len": 32}
2025-04-28 13:23:00.138	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:23:00.138	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "15273807bd663d0d34e1ac23ef7593f121bd49f5", "message": "e2cf07e7c7d34718446b7ff4d1a8a4a90c457c577a3479907db99b96f81ba07c"}
2025-04-28 13:23:00.139	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:23:00.139	[34mINFO[0m	seclient/cardreader.go:179	命令: 8010000054C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A015273807BD663D0D34E1AC23EF7593F121BD49F5E2CF07E7C7D34718446B7FF4D1A8A4A90C457C577A3479907DB99B96F81BA07C
2025-04-28 13:23:00.139	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6311}
2025-04-28 13:23:00.139	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:23:00.139	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "82bca469cb3724dacfd857c5be9502e53d4d9816d0de0819863f8d5a7c0466ba"}
2025-04-28 13:23:00.139	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "cc2beca811ae322e1513..."}
2025-04-28 13:23:00.139	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6339}
2025-04-28 13:23:00.139	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:23:00.139	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_3", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "key_len": 32}
2025-04-28 13:23:00.139	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:23:00.139	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "15273807bd663d0d34e1ac23ef7593f121bd49f5", "message": "82bca469cb3724dacfd857c5be9502e53d4d9816d0de0819863f8d5a7c0466ba"}
2025-04-28 13:23:00.139	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:23:00.139	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000543852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DF15273807BD663D0D34E1AC23EF7593F121BD49F582BCA469CB3724DACFD857C5BE9502E53D4D9816D0DE0819863F8D5A7C0466BA
2025-04-28 13:23:00.139	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6309}
2025-04-28 13:23:00.139	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:23:00.139	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "f88da9a82caa9e5879841edf4cb7ad837ee04e4d358c83293d7126f75017a788"}
2025-04-28 13:23:00.139	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "1c715cbb1c4e61122695..."}
2025-04-28 13:23:00.139	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6337}
2025-04-28 13:23:00.139	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:23:00.139	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_2", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "key_len": 32}
2025-04-28 13:23:00.139	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:23:00.139	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "15273807bd663d0d34e1ac23ef7593f121bd49f5", "message": "f88da9a82caa9e5879841edf4cb7ad837ee04e4d358c83293d7126f75017a788"}
2025-04-28 13:23:00.139	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:23:00.139	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000546CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E15273807BD663D0D34E1AC23EF7593F121BD49F5F88DA9A82CAA9E5879841EDF4CB7AD837EE04E4D358C83293D7126F75017A788
2025-04-28 13:23:00.170	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:23:00.170	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0708
2025-04-28 13:23:00.170	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:23:00.170	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:23:00.170	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.170	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "username": "test_user_1", "encrypted_key_length": 6336}
2025-04-28 13:23:00.170	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.241987458s"}
2025-04-28 13:23:00.208	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:23:00.208	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0809
2025-04-28 13:23:00.208	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:23:00.208	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:23:00.208	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.208	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "username": "test_user_3", "encrypted_key_length": 6339}
2025-04-28 13:23:00.208	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "276.025542ms"}
2025-04-28 13:23:00.246	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:23:00.246	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 090A
2025-04-28 13:23:00.246	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:23:00.246	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:23:00.246	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.246	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "username": "test_user_2", "encrypted_key_length": 6337}
2025-04-28 13:23:00.246	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.315817792s"}
2025-04-28 13:23:00.935	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745817780", "filename": "sign_data_1.json", "username": "test_user_1", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.936	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-28 13:23:00.936	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "file": "sign_data_1.json"}
2025-04-28 13:23:00.936	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_1.json"}
2025-04-28 13:23:00.936	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:23:00.936	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_1", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "sig_len": 71}
2025-04-28 13:23:00.936	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:23:00.936	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "15273807bd663d0d34e1ac23ef7593f121bd49f5", "signature": "3045022054917e3d0be7a62808079c5dcd72d80ca949ef1643f53b474c0cdfe7bced348f0221009b6fde3ebceea632ceb08b273631076e0fa51a10c620e9f1f99cb90a996c5916"}
2025-04-28 13:23:00.936	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:23:00.936	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007BC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A015273807BD663D0D34E1AC23EF7593F121BD49F53045022054917E3D0BE7A62808079C5DCD72D80CA949EF1643F53B474C0CDFE7BCED348F0221009B6FDE3EBCEEA632CEB08B273631076E0FA51A10C620E9F1F99CB90A996C5916
2025-04-28 13:23:00.951	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:23:00.951	[34mINFO[0m	seclient/cardreader.go:191	响应数据: E2CF07E7C7D34718446B7FF4D1A8A4A90C457C577A3479907DB99B96F81BA07C
2025-04-28 13:23:00.951	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:23:00.951	[34mINFO[0m	seclient/commands.go:122	数据: e2cf07e7c7d34718446b7ff4d1a8a4a90c457c577a3479907db99b96f81ba07c
2025-04-28 13:23:00.951	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:23:00.951	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:23:00.951	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "e2cf07e7c7d34718446b7ff4d1a8a4a90c457c577a3479907db99b96f81ba07c", "ciphertext_preview": "4dd20c1d43f8b53ae861..."}
2025-04-28 13:23:00.951	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:23:00.951	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6308}
2025-04-28 13:23:00.952	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35948}
2025-04-28 13:23:00.952	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:23:00.952	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "这是一条测试消息，时间戳: 1745817780", "local_share": "temp/sign_data_1.json"}
2025-04-28 13:23:00.952	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 --number-of-parties 1,2 --data-to-sign 这是一条测试消息，时间戳: 1745817780 --local-share temp/sign_data_1.json", "timeout": "1m0s"}
2025-04-28 13:23:00.970	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Found argument '--number-of-parties' which wasn't expected, or isn't valid in this context\n\nUSAGE:\n    gg20_signing --address <address> --data-to-sign <data-to-sign> --local-share <local-share>\n\nFor more information try --help\n", "execution_time": "18.096125ms"}
2025-04-28 13:23:00.970	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:23:00.970	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:23:00.970	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:00.970	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "35.34225ms"}
2025-04-28 13:23:01.937	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745817780", "filename": "sign_data_2.json", "username": "test_user_2", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:01.938	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "72 B"}
2025-04-28 13:23:01.938	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "file": "sign_data_2.json"}
2025-04-28 13:23:01.938	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_2.json"}
2025-04-28 13:23:01.938	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:23:01.938	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_2", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "sig_len": 72}
2025-04-28 13:23:01.938	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:23:01.938	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "15273807bd663d0d34e1ac23ef7593f121bd49f5", "signature": "3046022100b2544c21c9be5fa0287aa1149872b6a48110977eff69767045d837697fc9d593022100b70751638bafef433477f78ed91642eb8612e2574b6c9c76e6fb8c28639d7a1e"}
2025-04-28 13:23:01.938	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:23:01.938	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007C6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E15273807BD663D0D34E1AC23EF7593F121BD49F53046022100B2544C21C9BE5FA0287AA1149872B6A48110977EFF69767045D837697FC9D593022100B70751638BAFEF433477F78ED91642EB8612E2574B6C9C76E6FB8C28639D7A1E
2025-04-28 13:23:01.954	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:23:01.955	[34mINFO[0m	seclient/cardreader.go:191	响应数据: F88DA9A82CAA9E5879841EDF4CB7AD837EE04E4D358C83293D7126F75017A788
2025-04-28 13:23:01.955	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:23:01.955	[34mINFO[0m	seclient/commands.go:122	数据: f88da9a82caa9e5879841edf4cb7ad837ee04e4d358c83293d7126f75017a788
2025-04-28 13:23:01.955	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:23:01.955	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:23:01.955	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "f88da9a82caa9e5879841edf4cb7ad837ee04e4d358c83293d7126f75017a788", "ciphertext_preview": "1c715cbb1c4e61122695..."}
2025-04-28 13:23:01.955	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:23:01.955	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6309}
2025-04-28 13:23:01.956	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35951}
2025-04-28 13:23:01.957	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:23:01.957	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "这是一条测试消息，时间戳: 1745817780", "local_share": "temp/sign_data_2.json"}
2025-04-28 13:23:01.957	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 --number-of-parties 1,2 --data-to-sign 这是一条测试消息，时间戳: 1745817780 --local-share temp/sign_data_2.json", "timeout": "1m0s"}
2025-04-28 13:23:01.972	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Found argument '--number-of-parties' which wasn't expected, or isn't valid in this context\n\nUSAGE:\n    gg20_signing --address <address> --data-to-sign <data-to-sign> --local-share <local-share>\n\nFor more information try --help\n", "execution_time": "14.869958ms"}
2025-04-28 13:23:01.972	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:23:01.972	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:23:01.972	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:01.972	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "35.065958ms"}
2025-04-28 13:23:02.939	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_1", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:02.939	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "71 B"}
2025-04-28 13:23:02.939	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_1", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "sig_len": 71}
2025-04-28 13:23:02.940	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:23:02.940	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "15273807bd663d0d34e1ac23ef7593f121bd49f5", "signature": "3045022100eb5125d475952be3aa13192ffe5804b4da740c587f480c8ac655e49bce332b690220681739cfdcdadfb5f95e3fcf1dbb49dc958c2a52e510e07cde7aef5125847616"}
2025-04-28 13:23:02.940	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:23:02.940	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007BC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A015273807BD663D0D34E1AC23EF7593F121BD49F53045022100EB5125D475952BE3AA13192FFE5804B4DA740C587F480C8AC655E49BCE332B690220681739CFDCDADFB5F95E3FCF1DBB49DC958C2A52E510E07CDE7AEF5125847616
2025-04-28 13:23:02.969	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:23:02.969	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0709
2025-04-28 13:23:02.969	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 7, "剩余记录数": 9}
2025-04-28 13:23:02.969	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 7, "记录总数": 9}
2025-04-28 13:23:02.970	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_1", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:02.970	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "30.652792ms"}
2025-04-28 13:23:03.972	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_2", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:03.972	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "70 B"}
2025-04-28 13:23:03.972	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_2", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "sig_len": 70}
2025-04-28 13:23:03.972	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:23:03.972	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "15273807bd663d0d34e1ac23ef7593f121bd49f5", "signature": "304402204dd8b8df182f9a180e01360f9cc7d0a9ff1f46a203de850e464645ef5f238f65022020f9e02225b131137b7a17f9809fc07ed9e483266e94eface01e0a2a78a89a79"}
2025-04-28 13:23:03.972	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:23:03.972	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007A6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E15273807BD663D0D34E1AC23EF7593F121BD49F5304402204DD8B8DF182F9A180E01360F9CC7D0A9FF1F46A203DE850E464645EF5F238F65022020F9E02225B131137B7A17F9809FC07ED9E483266E94EFACE01E0A2A78A89A79
2025-04-28 13:23:03.996	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:23:03.996	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0908
2025-04-28 13:23:03.996	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 9, "剩余记录数": 8}
2025-04-28 13:23:03.996	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 9, "记录总数": 8}
2025-04-28 13:23:03.996	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_2", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:03.996	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "24.188ms"}
2025-04-28 13:23:04.998	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_3", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:04.998	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "70 B"}
2025-04-28 13:23:04.998	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_3", "addr": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5", "sig_len": 70}
2025-04-28 13:23:04.998	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:23:04.998	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "15273807bd663d0d34e1ac23ef7593f121bd49f5", "signature": "304402200349db7507b432235afeacf10cb7c8980a535c9db928415946d1f0eaf6f5a6c402200287e9642dd2b71ab2efc723bb0a73dbfe33f39765626d2dabd9609ea13417e6"}
2025-04-28 13:23:04.998	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:23:04.998	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007A3852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DF15273807BD663D0D34E1AC23EF7593F121BD49F5304402200349DB7507B432235AFEACF10CB7C8980A535C9DB928415946D1F0EAF6F5A6C402200287E9642DD2B71AB2EFC723BB0A73DBFE33F39765626D2DABD9609EA13417E6
2025-04-28 13:23:05.023	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:23:05.023	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0807
2025-04-28 13:23:05.023	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 8, "剩余记录数": 7}
2025-04-28 13:23:05.023	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 8, "记录总数": 7}
2025-04-28 13:23:05.023	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_3", "address": "0x15273807Bd663D0D34e1Ac23ef7593f121BD49F5"}
2025-04-28 13:23:05.023	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "25.277458ms"}
2025-04-28 13:25:36.916	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:25:36.917	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:25:36.917	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:25:36.917	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:25:50.783	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:25:50.784	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:50.784	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:50.795	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:50.795	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:50.795	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:50.795	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:50.795	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:50.795	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:50.797	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:50.797	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:50.797	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:50.797	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:50.797	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:50.799	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:50.799	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:50.799	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:50.799	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:50.799	[31mERROR[0m	controllers/mpc.go:245	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:50.799	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 500, "latency": "15.606709ms"}
2025-04-28 13:25:50.800	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:25:50.800	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:50.800	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:50.800	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:50.800	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:50.800	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:50.800	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:50.800	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:50.800	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:50.800	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:50.800	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:50.800	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:50.800	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:50.800	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:50.802	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:50.802	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:50.802	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:50.802	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:50.802	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:50.802	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "2.6475ms"}
2025-04-28 13:25:51.801	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:25:51.801	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:51.801	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:51.801	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:51.801	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:51.801	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:51.801	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:51.801	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:51.801	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:51.802	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:51.802	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:51.802	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:51.802	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:51.802	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:51.804	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:51.804	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:51.804	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:51.804	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:51.804	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:51.804	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "3.703708ms"}
2025-04-28 13:25:52.802	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:25:52.803	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:52.803	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:52.803	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:52.803	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:52.803	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:52.803	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:52.803	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:52.803	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:52.804	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:52.805	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:52.805	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:52.805	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:52.805	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:52.807	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:52.807	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:52.807	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:52.807	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:52.807	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:52.807	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "5.00525ms"}
2025-04-28 13:25:53.807	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:25:53.807	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:53.808	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:53.809	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:53.809	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:53.809	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:53.809	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:53.809	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:53.809	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:53.812	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:53.812	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:53.812	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:53.812	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:53.812	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:53.815	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:53.815	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:53.815	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:53.818	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:53.818	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:53.819	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "11.834625ms"}
2025-04-28 13:25:54.809	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:25:54.810	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:54.810	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:54.811	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:54.811	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:54.811	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:54.811	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:54.811	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:54.811	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:54.813	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:54.813	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:54.813	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:54.813	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:54.813	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:54.816	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:54.816	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:54.816	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:54.817	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:54.817	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:54.817	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "7.916958ms"}
2025-04-28 13:25:55.812	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:25:55.813	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:55.813	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:55.813	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:55.814	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:55.814	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:55.814	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:55.814	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:55.814	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:55.816	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:55.816	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:55.816	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:55.816	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:55.816	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:55.819	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:55.819	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:55.819	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:55.820	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:55.820	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:55.820	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "8.330541ms"}
2025-04-28 13:25:56.822	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:25:56.822	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:56.822	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:56.822	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:56.822	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:56.822	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:56.822	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:56.822	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:56.822	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:56.823	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:56.823	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:56.823	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:56.823	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:56.823	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:56.825	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:56.825	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:56.825	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:56.825	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:56.825	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:56.825	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "3.136917ms"}
2025-04-28 13:25:57.828	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:25:57.828	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:25:57.828	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:25:57.829	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:25:57.829	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:25:57.829	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:57.829	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:25:57.829	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:25:57.829	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:25:57.830	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:25:57.830	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:25:57.830	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:25:57.830	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:25:57.830	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:25:57.833	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:25:57.833	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:25:57.833	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:57.833	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:57.833	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:25:57.833	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "5.247625ms"}
2025-04-28 13:28:35.692	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:28:35.692	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:28:35.692	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:28:35.692	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:28:35.692	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:28:35.692	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:28:35.692	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:28:35.692	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:28:35.692	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:28:35.750	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:28:35.750	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:28:35.750	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:28:35.750	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:35.750	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 9F7F2A007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301
2025-04-28 13:28:35.752	[35mDEBUG[0m	seclient/commands.go:234	获取CPLC数据成功	{"CPLC标签": "9F7F", "CPLC长度": 42, "CPLC数据": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:144	=== 选择Applet命令 ===
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:145	APDU: 00A4040008A000000062CF0101
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:146	命令解析:
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:147	  CLA: 0x00 (ISO标准命令)
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:148	  INS: 0xA4 (选择指令)
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:149	  P1: 0x04 (按名称选择)
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:150	  P2: 0x00 (首次选择)
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:151	  Lc: 0x08 (AID长度)
2025-04-28 13:28:35.752	[34mINFO[0m	seclient/cardreader.go:152	  Data: A000000062CF0101 (AID)
2025-04-28 13:28:35.754	[34mINFO[0m	seclient/cardreader.go:166	=== 选择Applet响应 ===
2025-04-28 13:28:35.754	[34mINFO[0m	seclient/cardreader.go:167	响应数据: 9000
2025-04-28 13:28:35.754	[34mINFO[0m	seclient/cardreader.go:168	状态码: 0x9000 (成功)
2025-04-28 13:28:35.754	[34mINFO[0m	seclient/cardreader.go:169	数据: 
2025-04-28 13:28:35.754	[34mINFO[0m	seclient/cardreader.go:170	成功选择Applet, AID: A000000062CF0101
2025-04-28 13:28:35.754	[35mDEBUG[0m	services/security.go:59	安全芯片服务初始化完成
2025-04-28 13:28:35.754	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-28 13:28:35.754	[35mDEBUG[0m	services/mpc.go:29	初始化MPC服务
2025-04-28 13:28:35.754	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-28 13:28:35.754	[34mINFO[0m	controllers/mpc.go:254	接收到获取CPLC信息请求	{"client_ip": "::1"}
2025-04-28 13:28:35.754	[35mDEBUG[0m	services/security.go:225	获取CPLC信息
2025-04-28 13:28:35.754	[35mDEBUG[0m	services/security.go:237	CPLC信息获取成功	{"长度": 42, "CPLC": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:28:35.754	[34mINFO[0m	controllers/mpc.go:269	获取CPLC信息成功	{"cplc": "007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301"}
2025-04-28 13:28:35.754	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 200, "latency": "62.485708ms"}
2025-04-28 13:28:35.756	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 1, "filename": "keygen_data_1.json", "username": "test_user_1"}
2025-04-28 13:28:35.756	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 1, "file": "keygen_data_1.json"}
2025-04-28 13:28:35.756	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_1.json"}
2025-04-28 13:28:35.756	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:28:35.756	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 1, "output": "temp/keygen_data_1.json"}
2025-04-28 13:28:35.756	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 1 --output temp/keygen_data_1.json", "timeout": "1m0s"}
2025-04-28 13:28:36.759	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 2, "filename": "keygen_data_2.json", "username": "test_user_2"}
2025-04-28 13:28:36.759	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 2, "file": "keygen_data_2.json"}
2025-04-28 13:28:36.759	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_2.json"}
2025-04-28 13:28:36.760	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:28:36.760	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 2, "output": "temp/keygen_data_2.json"}
2025-04-28 13:28:36.760	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 2 --output temp/keygen_data_2.json", "timeout": "1m0s"}
2025-04-28 13:28:37.760	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 3, "filename": "keygen_data_3.json", "username": "test_user_3"}
2025-04-28 13:28:37.760	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 3, "file": "keygen_data_3.json"}
2025-04-28 13:28:37.761	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_3.json"}
2025-04-28 13:28:37.761	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:28:37.761	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 3, "output": "temp/keygen_data_3.json"}
2025-04-28 13:28:37.761	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 3 --output temp/keygen_data_3.json", "timeout": "1m0s"}
2025-04-28 13:28:38.014	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "1.253952042s"}
2025-04-28 13:28:38.014	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:28:38.014	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:28:38.014	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "2.257832666s"}
2025-04-28 13:28:38.014	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:28:38.014	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:28:38.014	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "252.90775ms"}
2025-04-28 13:28:38.014	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:28:38.014	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:28:38.014	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "035016a13216723b448852fc65ebef7fa2feb37e67a817e2e6c704533a7bf67f2d"}
2025-04-28 13:28:38.014	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "035016a13216723b448852fc65ebef7fa2feb37e67a817e2e6c704533a7bf67f2d"}
2025-04-28 13:28:38.015	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "035016a13216723b448852fc65ebef7fa2feb37e67a817e2e6c704533a7bf67f2d", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.015	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.015	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "035016a13216723b448852fc65ebef7fa2feb37e67a817e2e6c704533a7bf67f2d"}
2025-04-28 13:28:38.015	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35958}
2025-04-28 13:28:38.015	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "035016a13216723b448852fc65ebef7fa2feb37e67a817e2e6c704533a7bf67f2d", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.015	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.015	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "035016a13216723b448852fc65ebef7fa2feb37e67a817e2e6c704533a7bf67f2d", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.015	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35958}
2025-04-28 13:28:38.015	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.015	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35947}
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6254}
2025-04-28 13:28:38.021	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:28:38.021	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "e62ecb4decf2a9e763d5f134fee6687ca12f92cc1a8c58cde7e0c67308beb77c"}
2025-04-28 13:28:38.021	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "4dde00aab2c65bd87515..."}
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6282}
2025-04-28 13:28:38.021	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_3", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "key_len": 32}
2025-04-28 13:28:38.021	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "bb8dc9801b942c9df49c9c075ed94416ef7f9d4d", "message": "e62ecb4decf2a9e763d5f134fee6687ca12f92cc1a8c58cde7e0c67308beb77c"}
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000543852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DFBB8DC9801B942C9DF49C9C075ED94416EF7F9D4DE62ECB4DECF2A9E763D5F134FEE6687CA12F92CC1A8C58CDE7E0C67308BEB77C
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6261}
2025-04-28 13:28:38.021	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:28:38.021	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "05d13e139dc5a30d3394078b8dd6302122476dea2ac5e605cc8f1c6d5cd2f435"}
2025-04-28 13:28:38.021	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "d9867102c47b4d53b3e6..."}
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6289}
2025-04-28 13:28:38.021	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_2", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "key_len": 32}
2025-04-28 13:28:38.021	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "bb8dc9801b942c9df49c9c075ed94416ef7f9d4d", "message": "05d13e139dc5a30d3394078b8dd6302122476dea2ac5e605cc8f1c6d5cd2f435"}
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000546CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EBB8DC9801B942C9DF49C9C075ED94416EF7F9D4D05D13E139DC5A30D3394078B8DD6302122476DEA2AC5E605CC8F1C6D5CD2F435
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6252}
2025-04-28 13:28:38.021	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:28:38.021	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "01c8383411881bc9286b68321c4ebd4a9ed35e3701d02997d672aa5ae31052d0"}
2025-04-28 13:28:38.021	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "3416f361e1e6f59760b9..."}
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6280}
2025-04-28 13:28:38.021	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:28:38.021	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_1", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "key_len": 32}
2025-04-28 13:28:38.021	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "bb8dc9801b942c9df49c9c075ed94416ef7f9d4d", "message": "01c8383411881bc9286b68321c4ebd4a9ed35e3701d02997d672aa5ae31052d0"}
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:38.021	[34mINFO[0m	seclient/cardreader.go:179	命令: 8010000054C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0BB8DC9801B942C9DF49C9C075ED94416EF7F9D4D01C8383411881BC9286B68321C4EBD4A9ED35E3701D02997D672AA5AE31052D0
2025-04-28 13:28:38.057	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:38.058	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0708
2025-04-28 13:28:38.058	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:28:38.058	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:28:38.058	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.058	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "username": "test_user_3", "encrypted_key_length": 6282}
2025-04-28 13:28:38.058	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "297.51075ms"}
2025-04-28 13:28:38.096	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:38.096	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0809
2025-04-28 13:28:38.096	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:28:38.096	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:28:38.096	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.096	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "username": "test_user_2", "encrypted_key_length": 6289}
2025-04-28 13:28:38.096	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.336723042s"}
2025-04-28 13:28:38.133	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:38.133	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 090A
2025-04-28 13:28:38.133	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:28:38.133	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:28:38.133	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.133	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "username": "test_user_1", "encrypted_key_length": 6280}
2025-04-28 13:28:38.133	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.377145625s"}
2025-04-28 13:28:38.764	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745818118", "filename": "sign_data_1.json", "username": "test_user_1", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:38.764	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.1 KB", "signature_length": "71 B"}
2025-04-28 13:28:38.765	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "file": "sign_data_1.json"}
2025-04-28 13:28:38.765	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_1.json"}
2025-04-28 13:28:38.765	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:28:38.765	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_1", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "sig_len": 71}
2025-04-28 13:28:38.765	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:28:38.765	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "bb8dc9801b942c9df49c9c075ed94416ef7f9d4d", "signature": "304502210088bc6b731463cddcf9585cd43b5cb636f80ccc59edf3fdc3bf61ee7b6ff7169b0220166e2a168bc83b7902038e85b2dc0c5bc52c0bf2523de6dd632418d099fabaea"}
2025-04-28 13:28:38.765	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:38.765	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007BC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0BB8DC9801B942C9DF49C9C075ED94416EF7F9D4D304502210088BC6B731463CDDCF9585CD43B5CB636F80CCC59EDF3FDC3BF61EE7B6FF7169B0220166E2A168BC83B7902038E85B2DC0C5BC52C0BF2523DE6DD632418D099FABAEA
2025-04-28 13:28:38.781	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:38.781	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 01C8383411881BC9286B68321C4EBD4A9ED35E3701D02997D672AA5AE31052D0
2025-04-28 13:28:38.781	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:28:38.781	[34mINFO[0m	seclient/commands.go:122	数据: 01c8383411881bc9286b68321c4ebd4a9ed35e3701d02997d672aa5ae31052d0
2025-04-28 13:28:38.781	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:28:38.781	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:28:38.781	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "01c8383411881bc9286b68321c4ebd4a9ed35e3701d02997d672aa5ae31052d0", "ciphertext_preview": "3416f361e1e6f59760b9..."}
2025-04-28 13:28:38.781	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:28:38.781	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6252}
2025-04-28 13:28:38.782	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35947}
2025-04-28 13:28:38.782	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:28:38.782	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "这是一条测试消息，时间戳: 1745818118", "local_share": "temp/sign_data_1.json"}
2025-04-28 13:28:38.782	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 --parties 1,2 --data-to-sign 这是一条测试消息，时间戳: 1745818118 --local-share temp/sign_data_1.json", "timeout": "1m0s"}
2025-04-28 13:28:39.768	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "这是一条测试消息，时间戳: 1745818118", "filename": "sign_data_2.json", "username": "test_user_2", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:39.768	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.1 KB", "signature_length": "71 B"}
2025-04-28 13:28:39.768	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "file": "sign_data_2.json"}
2025-04-28 13:28:39.768	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_2.json"}
2025-04-28 13:28:39.768	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:28:39.768	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_2", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "sig_len": 71}
2025-04-28 13:28:39.768	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:28:39.768	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "bb8dc9801b942c9df49c9c075ed94416ef7f9d4d", "signature": "3045022100808fa34dc2cfc48a6fe5b47d7a9fbf413801081d9d161372aed2bbaa2d44057202204ab3e0a5355f34bc778d17943e22420e5a0f96caac9bef9d04a3fc234d174dc5"}
2025-04-28 13:28:39.768	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:39.768	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007B6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EBB8DC9801B942C9DF49C9C075ED94416EF7F9D4D3045022100808FA34DC2CFC48A6FE5B47D7A9FBF413801081D9D161372AED2BBAA2D44057202204AB3E0A5355F34BC778D17943E22420E5A0F96CAAC9BEF9D04A3FC234D174DC5
2025-04-28 13:28:39.784	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:39.784	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 05D13E139DC5A30D3394078B8DD6302122476DEA2AC5E605CC8F1C6D5CD2F435
2025-04-28 13:28:39.784	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:28:39.785	[34mINFO[0m	seclient/commands.go:122	数据: 05d13e139dc5a30d3394078b8dd6302122476dea2ac5e605cc8f1c6d5cd2f435
2025-04-28 13:28:39.785	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:28:39.785	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:28:39.785	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "05d13e139dc5a30d3394078b8dd6302122476dea2ac5e605cc8f1c6d5cd2f435", "ciphertext_preview": "d9867102c47b4d53b3e6..."}
2025-04-28 13:28:39.785	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:28:39.785	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6261}
2025-04-28 13:28:39.785	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35958}
2025-04-28 13:28:39.785	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:28:39.785	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "这是一条测试消息，时间戳: 1745818118", "local_share": "temp/sign_data_2.json"}
2025-04-28 13:28:39.785	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 --parties 1,2 --data-to-sign 这是一条测试消息，时间戳: 1745818118 --local-share temp/sign_data_2.json", "timeout": "1m0s"}
2025-04-28 13:28:40.113	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: online stage failed\n\nCaused by:\n    couldn't complete signing: round 7: InvalidSig\n", "execution_time": "327.531625ms"}
2025-04-28 13:28:40.113	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: online stage failed\n\nCaused by:\n    couldn't complete signing: round 7: InvalidSig\n", "execution_time": "1.33059025s"}
2025-04-28 13:28:40.113	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:28:40.113	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:28:40.113	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:28:40.113	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:28:40.113	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:40.113	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:40.113	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "1.349295834s"}
2025-04-28 13:28:40.113	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "346.064959ms"}
2025-04-28 13:28:40.768	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_1", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:40.768	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "70 B"}
2025-04-28 13:28:40.768	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_1", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "sig_len": 70}
2025-04-28 13:28:40.769	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:28:40.769	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "bb8dc9801b942c9df49c9c075ed94416ef7f9d4d", "signature": "304402206b68d731df47cfdf6ab451620e0941338cb691f206e81ff702e8c0ea64658b97022027481d4751047cfb5672459d4d1709e6c8fc921afe3de8d6625f3d6a2ad2f097"}
2025-04-28 13:28:40.769	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:40.769	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007AC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0BB8DC9801B942C9DF49C9C075ED94416EF7F9D4D304402206B68D731DF47CFDF6AB451620E0941338CB691F206E81FF702E8C0EA64658B97022027481D4751047CFB5672459D4D1709E6C8FC921AFE3DE8D6625F3D6A2AD2F097
2025-04-28 13:28:40.799	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:40.799	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0909
2025-04-28 13:28:40.799	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 9, "剩余记录数": 9}
2025-04-28 13:28:40.800	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 9, "记录总数": 9}
2025-04-28 13:28:40.800	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_1", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:40.800	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "31.495291ms"}
2025-04-28 13:28:41.801	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_2", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:41.801	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "72 B"}
2025-04-28 13:28:41.801	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_2", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "sig_len": 72}
2025-04-28 13:28:41.801	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:28:41.802	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "bb8dc9801b942c9df49c9c075ed94416ef7f9d4d", "signature": "30460221009f934b95d9a28ae7d57ba5d03d4d76494a320bfa7912a6f845959867cc891e76022100f13dc966b0c29c7a864dfeafceb7416f831ad39b8347f2664cc7851f2c26a223"}
2025-04-28 13:28:41.802	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:41.802	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007C6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EBB8DC9801B942C9DF49C9C075ED94416EF7F9D4D30460221009F934B95D9A28AE7D57BA5D03D4D76494A320BFA7912A6F845959867CC891E76022100F13DC966B0C29C7A864DFEAFCEB7416F831AD39B8347F2664CC7851F2C26A223
2025-04-28 13:28:41.830	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:41.830	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0808
2025-04-28 13:28:41.830	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 8, "剩余记录数": 8}
2025-04-28 13:28:41.830	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 8, "记录总数": 8}
2025-04-28 13:28:41.830	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_2", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:41.830	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "28.921041ms"}
2025-04-28 13:28:42.833	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_3", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:42.833	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "72 B"}
2025-04-28 13:28:42.833	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_3", "addr": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D", "sig_len": 72}
2025-04-28 13:28:42.833	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:28:42.833	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "bb8dc9801b942c9df49c9c075ed94416ef7f9d4d", "signature": "3046022100c0511b1e3fde5006a675c43268e9fe55020414edfc95dedd3f0de4ff790801400221009b75e3fa4493b039baff157af3da5c43be47132082619c385ff669102e6e7311"}
2025-04-28 13:28:42.833	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:28:42.833	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007C3852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DFBB8DC9801B942C9DF49C9C075ED94416EF7F9D4D3046022100C0511B1E3FDE5006A675C43268E9FE55020414EDFC95DEDD3F0DE4FF790801400221009B75E3FA4493B039BAFF157AF3DA5C43BE47132082619C385FF669102E6E7311
2025-04-28 13:28:42.863	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:28:42.863	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0707
2025-04-28 13:28:42.863	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 7, "剩余记录数": 7}
2025-04-28 13:28:42.863	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 7, "记录总数": 7}
2025-04-28 13:28:42.863	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_3", "address": "0xbB8dc9801b942c9dF49c9c075eD94416EF7f9D4D"}
2025-04-28 13:28:42.863	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "30.232417ms"}
2025-04-28 13:30:16.007	[34mINFO[0m	controllers/mpc.go:254	接收到获取CPLC信息请求	{"client_ip": "::1"}
2025-04-28 13:30:16.007	[35mDEBUG[0m	services/security.go:225	获取CPLC信息
2025-04-28 13:30:16.007	[35mDEBUG[0m	services/security.go:237	CPLC信息获取成功	{"长度": 42, "CPLC": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:30:16.007	[34mINFO[0m	controllers/mpc.go:269	获取CPLC信息成功	{"cplc": "007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301"}
2025-04-28 13:30:16.007	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 200, "latency": "158.792µs"}
2025-04-28 13:30:16.008	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 1, "filename": "keygen_data_1.json", "username": "test_user_1"}
2025-04-28 13:30:16.008	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 1, "file": "keygen_data_1.json"}
2025-04-28 13:30:16.008	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_1.json"}
2025-04-28 13:30:16.008	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:30:16.008	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 1, "output": "temp/keygen_data_1.json"}
2025-04-28 13:30:16.008	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 1 --output temp/keygen_data_1.json", "timeout": "1m0s"}
2025-04-28 13:30:17.011	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 2, "filename": "keygen_data_2.json", "username": "test_user_2"}
2025-04-28 13:30:17.011	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 2, "file": "keygen_data_2.json"}
2025-04-28 13:30:17.011	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_2.json"}
2025-04-28 13:30:17.011	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:30:17.011	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 2, "output": "temp/keygen_data_2.json"}
2025-04-28 13:30:17.012	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 2 --output temp/keygen_data_2.json", "timeout": "1m0s"}
2025-04-28 13:30:18.012	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 3, "filename": "keygen_data_3.json", "username": "test_user_3"}
2025-04-28 13:30:18.012	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 3, "file": "keygen_data_3.json"}
2025-04-28 13:30:18.012	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_3.json"}
2025-04-28 13:30:18.013	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:30:18.013	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 3, "output": "temp/keygen_data_3.json"}
2025-04-28 13:30:18.013	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 --threshold 1 --number-of-parties 3 --index 3 --output temp/keygen_data_3.json", "timeout": "1m0s"}
2025-04-28 13:30:18.364	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "2.356250958s"}
2025-04-28 13:30:18.364	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "1.352573958s"}
2025-04-28 13:30:18.364	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:30:18.364	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "351.440917ms"}
2025-04-28 13:30:18.364	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:30:18.364	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:30:18.364	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:30:18.364	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:30:18.364	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:30:18.365	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "0324a98209ca1916c2907966d6424a74c3a97edbcc524d041c11572b1c119d3386"}
2025-04-28 13:30:18.365	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "0324a98209ca1916c2907966d6424a74c3a97edbcc524d041c11572b1c119d3386"}
2025-04-28 13:30:18.365	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "0324a98209ca1916c2907966d6424a74c3a97edbcc524d041c11572b1c119d3386"}
2025-04-28 13:30:18.365	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "0324a98209ca1916c2907966d6424a74c3a97edbcc524d041c11572b1c119d3386", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.365	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.365	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "0324a98209ca1916c2907966d6424a74c3a97edbcc524d041c11572b1c119d3386", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.365	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.365	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "0324a98209ca1916c2907966d6424a74c3a97edbcc524d041c11572b1c119d3386", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.365	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35977}
2025-04-28 13:30:18.365	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35972}
2025-04-28 13:30:18.365	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.365	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35978}
2025-04-28 13:30:18.371	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6290}
2025-04-28 13:30:18.371	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6279}
2025-04-28 13:30:18.371	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:30:18.371	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "9466268c6b1e3e2ca65f3f5ac4a60a68c1ca41d318e3c91f398cd5083587e803"}
2025-04-28 13:30:18.371	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "575696ccbbca44721445..."}
2025-04-28 13:30:18.371	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6307}
2025-04-28 13:30:18.371	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:30:18.371	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "0e48ba465b72468707e99ccda66df062dcfa9d6851d4551724196aaf3d5dca33"}
2025-04-28 13:30:18.371	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:30:18.371	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_3", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "key_len": 32}
2025-04-28 13:30:18.371	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:30:18.371	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "3a94fed3b192432374e22bf769720dcf67b52762", "message": "9466268c6b1e3e2ca65f3f5ac4a60a68c1ca41d318e3c91f398cd5083587e803"}
2025-04-28 13:30:18.371	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "1fdd8d6a6d42be3cb0f4..."}
2025-04-28 13:30:18.371	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6318}
2025-04-28 13:30:18.372	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:30:18.371	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:30:18.372	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000543852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DF3A94FED3B192432374E22BF769720DCF67B527629466268C6B1E3E2CA65F3F5AC4A60A68C1CA41D318E3C91F398CD5083587E803
2025-04-28 13:30:18.372	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_2", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "key_len": 32}
2025-04-28 13:30:18.372	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:30:18.372	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "3a94fed3b192432374e22bf769720dcf67b52762", "message": "0e48ba465b72468707e99ccda66df062dcfa9d6851d4551724196aaf3d5dca33"}
2025-04-28 13:30:18.372	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:30:18.372	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000546CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E3A94FED3B192432374E22BF769720DCF67B527620E48BA465B72468707E99CCDA66DF062DCFA9D6851D4551724196AAF3D5DCA33
2025-04-28 13:30:18.372	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6293}
2025-04-28 13:30:18.372	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:30:18.372	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "998fd5436b1a4912ecb6840604c9109f84b160be7c48a0d390fdb9cbd1a35f31"}
2025-04-28 13:30:18.372	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "b9e129a35154fe6e188b..."}
2025-04-28 13:30:18.372	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6321}
2025-04-28 13:30:18.372	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:30:18.372	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_1", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "key_len": 32}
2025-04-28 13:30:18.372	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:30:18.372	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "3a94fed3b192432374e22bf769720dcf67b52762", "message": "998fd5436b1a4912ecb6840604c9109f84b160be7c48a0d390fdb9cbd1a35f31"}
2025-04-28 13:30:18.372	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:30:18.372	[34mINFO[0m	seclient/cardreader.go:179	命令: 8010000054C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A03A94FED3B192432374E22BF769720DCF67B52762998FD5436B1A4912ECB6840604C9109F84B160BE7C48A0D390FDB9CBD1A35F31
2025-04-28 13:30:18.404	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:30:18.404	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0708
2025-04-28 13:30:18.404	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:30:18.404	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:30:18.404	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.404	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "username": "test_user_3", "encrypted_key_length": 6307}
2025-04-28 13:30:18.404	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "391.938375ms"}
2025-04-28 13:30:18.437	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:30:18.437	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0809
2025-04-28 13:30:18.437	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:30:18.437	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:30:18.437	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.437	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "username": "test_user_2", "encrypted_key_length": 6318}
2025-04-28 13:30:18.437	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.426258375s"}
2025-04-28 13:30:18.469	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:30:18.469	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 090A
2025-04-28 13:30:18.469	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:30:18.469	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:30:18.469	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:18.470	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "username": "test_user_1", "encrypted_key_length": 6321}
2025-04-28 13:30:18.470	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.461910916s"}
2025-04-28 13:30:19.015	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_1.json", "username": "test_user_1", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:19.015	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "70 B"}
2025-04-28 13:30:19.015	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "file": "sign_data_1.json"}
2025-04-28 13:30:19.015	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_1.json"}
2025-04-28 13:30:19.015	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:30:19.015	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_1", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "sig_len": 70}
2025-04-28 13:30:19.015	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:30:19.015	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "3a94fed3b192432374e22bf769720dcf67b52762", "signature": "30440220423f93bb3566f2ef127f4d90eee74ef0ed72eb7bae523c27d489d5aff44c8ce902203c3b8da673fde17b209028eb19ddc9fe57256360ce397e97b5661193a517624d"}
2025-04-28 13:30:19.015	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:30:19.015	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007AC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A03A94FED3B192432374E22BF769720DCF67B5276230440220423F93BB3566F2EF127F4D90EEE74EF0ED72EB7BAE523C27D489D5AFF44C8CE902203C3B8DA673FDE17B209028EB19DDC9FE57256360CE397E97B5661193A517624D
2025-04-28 13:30:19.032	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:30:19.032	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 998FD5436B1A4912ECB6840604C9109F84B160BE7C48A0D390FDB9CBD1A35F31
2025-04-28 13:30:19.032	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:30:19.032	[34mINFO[0m	seclient/commands.go:122	数据: 998fd5436b1a4912ecb6840604c9109f84b160be7c48a0d390fdb9cbd1a35f31
2025-04-28 13:30:19.032	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:30:19.032	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:30:19.032	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "998fd5436b1a4912ecb6840604c9109f84b160be7c48a0d390fdb9cbd1a35f31", "ciphertext_preview": "b9e129a35154fe6e188b..."}
2025-04-28 13:30:19.033	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:30:19.033	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6293}
2025-04-28 13:30:19.033	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35978}
2025-04-28 13:30:19.034	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:30:19.034	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "hello", "local_share": "temp/sign_data_1.json"}
2025-04-28 13:30:19.034	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 --parties 1,2 --data-to-sign hello --local-share temp/sign_data_1.json", "timeout": "1m0s"}
2025-04-28 13:30:20.017	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_2.json", "username": "test_user_2", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:20.017	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-28 13:30:20.017	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "file": "sign_data_2.json"}
2025-04-28 13:30:20.017	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_2.json"}
2025-04-28 13:30:20.017	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:30:20.017	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_2", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "sig_len": 71}
2025-04-28 13:30:20.017	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:30:20.017	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "3a94fed3b192432374e22bf769720dcf67b52762", "signature": "304502202d8187edf94e1e7af6afcb6a6ce6b0f9cc12c86cca9203211b5b8865f5e3046002210090eabe4aa712356405a443cb4bccdc7026e09e60fc8c2ab692e546497254ce49"}
2025-04-28 13:30:20.017	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:30:20.017	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007B6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E3A94FED3B192432374E22BF769720DCF67B52762304502202D8187EDF94E1E7AF6AFCB6A6CE6B0F9CC12C86CCA9203211B5B8865F5E3046002210090EABE4AA712356405A443CB4BCCDC7026E09E60FC8C2AB692E546497254CE49
2025-04-28 13:30:20.034	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:30:20.034	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0E48BA465B72468707E99CCDA66DF062DCFA9D6851D4551724196AAF3D5DCA33
2025-04-28 13:30:20.034	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:30:20.034	[34mINFO[0m	seclient/commands.go:122	数据: 0e48ba465b72468707e99ccda66df062dcfa9d6851d4551724196aaf3d5dca33
2025-04-28 13:30:20.034	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:30:20.034	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:30:20.034	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "0e48ba465b72468707e99ccda66df062dcfa9d6851d4551724196aaf3d5dca33", "ciphertext_preview": "1fdd8d6a6d42be3cb0f4..."}
2025-04-28 13:30:20.034	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:30:20.034	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6290}
2025-04-28 13:30:20.035	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35977}
2025-04-28 13:30:20.035	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:30:20.035	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "hello", "local_share": "temp/sign_data_2.json"}
2025-04-28 13:30:20.035	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 --parties 1,2 --data-to-sign hello --local-share temp/sign_data_2.json", "timeout": "1m0s"}
2025-04-28 13:30:20.362	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: online stage failed\n\nCaused by:\n    couldn't complete signing: round 7: InvalidSig\n", "execution_time": "1.32802375s"}
2025-04-28 13:30:20.362	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: online stage failed\n\nCaused by:\n    couldn't complete signing: round 7: InvalidSig\n", "execution_time": "327.00025ms"}
2025-04-28 13:30:20.362	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:30:20.362	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:30:20.362	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:30:20.362	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:30:20.363	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:20.363	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:20.363	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "1.348242541s"}
2025-04-28 13:30:20.363	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "346.269833ms"}
2025-04-28 13:30:21.018	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_1", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:21.018	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "71 B"}
2025-04-28 13:30:21.018	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_1", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "sig_len": 71}
2025-04-28 13:30:21.019	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:30:21.019	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "3a94fed3b192432374e22bf769720dcf67b52762", "signature": "3045022015e075070d49fa7f213f3251fc7b5636d31561773a538f749ec754347398bd70022100821c81221785f136e374d22764aac5d63cfce0199a05694c804d7071cdc642d5"}
2025-04-28 13:30:21.019	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:30:21.019	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007BC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A03A94FED3B192432374E22BF769720DCF67B527623045022015E075070D49FA7F213F3251FC7B5636D31561773A538F749EC754347398BD70022100821C81221785F136E374D22764AAC5D63CFCE0199A05694C804D7071CDC642D5
2025-04-28 13:30:21.049	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:30:21.049	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0909
2025-04-28 13:30:21.049	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 9, "剩余记录数": 9}
2025-04-28 13:30:21.049	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 9, "记录总数": 9}
2025-04-28 13:30:21.049	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_1", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:21.049	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "30.802917ms"}
2025-04-28 13:30:22.051	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_2", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:22.051	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "70 B"}
2025-04-28 13:30:22.051	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_2", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "sig_len": 70}
2025-04-28 13:30:22.051	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:30:22.051	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "3a94fed3b192432374e22bf769720dcf67b52762", "signature": "304402207ca3ef1d697814d0d27d6d089ece5f21a2259111022766b901788bdd2de862050220096fe5deffed8d2ce9bb26547a184b5c6ad84309016f334753ec24fc8377a7b4"}
2025-04-28 13:30:22.051	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:30:22.051	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007A6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E3A94FED3B192432374E22BF769720DCF67B52762304402207CA3EF1D697814D0D27D6D089ECE5F21A2259111022766B901788BDD2DE862050220096FE5DEFFED8D2CE9BB26547A184B5C6AD84309016F334753EC24FC8377A7B4
2025-04-28 13:30:22.080	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:30:22.080	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0808
2025-04-28 13:30:22.080	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 8, "剩余记录数": 8}
2025-04-28 13:30:22.080	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 8, "记录总数": 8}
2025-04-28 13:30:22.080	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_2", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:22.080	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "29.188417ms"}
2025-04-28 13:30:23.083	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_3", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:23.083	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "71 B"}
2025-04-28 13:30:23.083	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_3", "addr": "0x3A94Fed3b192432374e22bF769720Dcf67B52762", "sig_len": 71}
2025-04-28 13:30:23.083	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:30:23.083	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "3a94fed3b192432374e22bf769720dcf67b52762", "signature": "304502210093261f231164f122c223e2e518d5a45a121a1b2276d72ebf6a1b675b2a5af8c8022003dc036dbb28d9290dc9fc61d5189d37fb9d98ce0925fbeb1ae8186ddaedd481"}
2025-04-28 13:30:23.083	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:30:23.083	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007B3852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DF3A94FED3B192432374E22BF769720DCF67B52762304502210093261F231164F122C223E2E518D5A45A121A1B2276D72EBF6A1B675B2A5AF8C8022003DC036DBB28D9290DC9FC61D5189D37FB9D98CE0925FBEB1AE8186DDAEDD481
2025-04-28 13:30:23.114	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:30:23.114	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0707
2025-04-28 13:30:23.114	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 7, "剩余记录数": 7}
2025-04-28 13:30:23.114	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 7, "记录总数": 7}
2025-04-28 13:30:23.114	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_3", "address": "0x3A94Fed3b192432374e22bF769720Dcf67B52762"}
2025-04-28 13:30:23.114	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "31.019833ms"}
2025-04-28 13:38:16.269	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:38:16.269	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:38:16.269	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:38:16.269	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:38:23.574	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:38:23.574	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:23.574	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:23.601	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:23.601	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:23.601	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:23.601	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:23.601	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:23.601	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:23.604	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:23.604	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:23.604	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:23.604	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:23.604	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:23.606	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:23.606	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:23.606	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:23.606	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:23.606	[31mERROR[0m	controllers/mpc.go:245	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:23.606	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 500, "latency": "32.309042ms"}
2025-04-28 13:38:23.607	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:38:23.607	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:23.607	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:23.607	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:23.607	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:23.607	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:23.607	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:23.607	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:23.607	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:23.608	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:23.608	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:23.608	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:23.608	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:23.608	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:23.610	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:23.610	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:23.610	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:23.610	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:23.610	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:23.610	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "3.20975ms"}
2025-04-28 13:38:24.608	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:38:24.609	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:24.609	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:24.610	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:24.611	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:24.611	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:24.611	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:24.611	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:24.611	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:24.613	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:24.613	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:24.613	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:24.613	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:24.613	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:24.617	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:24.617	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:24.617	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:24.618	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:24.618	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:24.618	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "9.381167ms"}
2025-04-28 13:38:25.610	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:38:25.611	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:25.611	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:25.612	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:25.612	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:25.612	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:25.612	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:25.612	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:25.612	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:25.617	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:25.617	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:25.617	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:25.617	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:25.617	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:25.620	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:25.620	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:25.620	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:25.621	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:25.621	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:25.621	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "11.597875ms"}
2025-04-28 13:38:26.613	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:38:26.614	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:26.614	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:26.615	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:26.615	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:26.615	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:26.615	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:26.615	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:26.615	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:26.618	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:26.618	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:26.618	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:26.618	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:26.618	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:26.621	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:26.621	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:26.621	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:26.622	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:26.622	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:26.622	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.710333ms"}
2025-04-28 13:38:27.616	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:38:27.617	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:27.617	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:27.618	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:27.618	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:27.618	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:27.618	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:27.618	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:27.618	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:27.620	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:27.620	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:27.620	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:27.620	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:27.620	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:27.623	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:27.623	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:27.623	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:27.624	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:27.624	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:27.624	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.053208ms"}
2025-04-28 13:38:28.618	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:38:28.619	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:28.619	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:28.620	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:28.620	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:28.620	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:28.620	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:28.620	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:28.620	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:28.622	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:28.622	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:28.622	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:28.622	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:28.622	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:28.624	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:28.624	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:28.624	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:28.625	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:28.625	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:28.625	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "6.748958ms"}
2025-04-28 13:38:29.626	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:38:29.627	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:29.627	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:29.627	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:29.627	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:29.627	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:29.627	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:29.627	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:29.627	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:29.628	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:29.628	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:29.628	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:29.628	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:29.628	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:29.630	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:29.630	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:29.630	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:29.630	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:29.630	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:29.631	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "4.384792ms"}
2025-04-28 13:38:30.634	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:38:30.635	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:30.635	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:30.635	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:30.636	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:30.636	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:30.636	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:30.636	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:30.636	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:30.638	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:30.638	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:30.638	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:30.638	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:30.638	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:30.641	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:30.641	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:30.641	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:30.641	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:30.642	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:30.642	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "7.67475ms"}
2025-04-28 13:38:33.560	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:38:33.561	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:33.561	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:33.561	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:33.561	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:33.561	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:33.561	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:33.561	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:33.561	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:33.562	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:33.562	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:33.562	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:33.562	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:33.562	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:33.564	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:33.564	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:33.564	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:33.564	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:33.564	[31mERROR[0m	controllers/mpc.go:245	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:33.564	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 500, "latency": "3.538083ms"}
2025-04-28 13:38:33.564	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:38:33.564	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:33.564	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:33.564	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:33.564	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:33.564	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:33.564	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:33.564	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:33.564	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:33.565	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:33.565	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:33.565	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:33.565	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:33.565	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:33.567	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:33.567	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:33.567	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:33.567	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:33.567	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:33.567	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "2.944166ms"}
2025-04-28 13:38:34.565	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:38:34.566	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:34.566	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:34.566	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:34.566	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:34.566	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:34.566	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:34.566	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:34.566	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:34.567	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:34.567	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:34.567	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:34.567	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:34.567	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:34.569	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:34.569	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:34.569	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:34.569	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:34.569	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:34.569	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "3.644875ms"}
2025-04-28 13:38:35.567	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:38:35.568	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:35.568	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:35.569	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:35.569	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:35.569	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:35.569	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:35.569	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:35.569	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:35.571	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:35.571	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:35.571	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:35.571	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:35.571	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:35.574	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:38:35.574	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:38:35.574	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:35.575	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:35.575	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:38:35.575	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "8.075459ms"}
2025-04-28 13:38:46.367	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:38:46.367	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:38:46.367	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:38:46.367	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:38:46.367	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:38:46.367	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:46.367	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:38:46.367	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:38:46.367	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:38:46.368	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:38:46.368	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:38:46.368	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:38:46.368	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:46.368	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 9F7F2A007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301
2025-04-28 13:38:46.370	[35mDEBUG[0m	seclient/commands.go:234	获取CPLC数据成功	{"CPLC标签": "9F7F", "CPLC长度": 42, "CPLC数据": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:144	=== 选择Applet命令 ===
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:145	APDU: 00A4040008A000000062CF0101
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:146	命令解析:
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:147	  CLA: 0x00 (ISO标准命令)
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:148	  INS: 0xA4 (选择指令)
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:149	  P1: 0x04 (按名称选择)
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:150	  P2: 0x00 (首次选择)
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:151	  Lc: 0x08 (AID长度)
2025-04-28 13:38:46.370	[34mINFO[0m	seclient/cardreader.go:152	  Data: A000000062CF0101 (AID)
2025-04-28 13:38:46.372	[34mINFO[0m	seclient/cardreader.go:166	=== 选择Applet响应 ===
2025-04-28 13:38:46.372	[34mINFO[0m	seclient/cardreader.go:167	响应数据: 9000
2025-04-28 13:38:46.372	[34mINFO[0m	seclient/cardreader.go:168	状态码: 0x9000 (成功)
2025-04-28 13:38:46.372	[34mINFO[0m	seclient/cardreader.go:169	数据: 
2025-04-28 13:38:46.372	[34mINFO[0m	seclient/cardreader.go:170	成功选择Applet, AID: A000000062CF0101
2025-04-28 13:38:46.372	[35mDEBUG[0m	services/security.go:59	安全芯片服务初始化完成
2025-04-28 13:38:46.372	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-28 13:38:46.372	[35mDEBUG[0m	services/mpc.go:29	初始化MPC服务
2025-04-28 13:38:46.372	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-28 13:38:46.372	[34mINFO[0m	controllers/mpc.go:254	接收到获取CPLC信息请求	{"client_ip": "::1"}
2025-04-28 13:38:46.372	[35mDEBUG[0m	services/security.go:225	获取CPLC信息
2025-04-28 13:38:46.372	[35mDEBUG[0m	services/security.go:237	CPLC信息获取成功	{"长度": 42, "CPLC": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:38:46.372	[34mINFO[0m	controllers/mpc.go:269	获取CPLC信息成功	{"cplc": "007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301"}
2025-04-28 13:38:46.372	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 200, "latency": "5.095333ms"}
2025-04-28 13:38:46.372	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 1, "filename": "keygen_data_1.json", "username": "test_user_1"}
2025-04-28 13:38:46.372	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 1, "file": "keygen_data_1.json"}
2025-04-28 13:38:46.372	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_1.json"}
2025-04-28 13:38:46.372	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:38:46.372	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 1, "output": "temp/keygen_data_1.json"}
2025-04-28 13:38:46.372	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 -t 1 -n 3 -i 1 --output temp/keygen_data_1.json", "timeout": "1m0s"}
2025-04-28 13:38:47.376	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 2, "filename": "keygen_data_2.json", "username": "test_user_2"}
2025-04-28 13:38:47.376	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 2, "file": "keygen_data_2.json"}
2025-04-28 13:38:47.376	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_2.json"}
2025-04-28 13:38:47.376	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:38:47.376	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 2, "output": "temp/keygen_data_2.json"}
2025-04-28 13:38:47.376	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 -t 1 -n 3 -i 2 --output temp/keygen_data_2.json", "timeout": "1m0s"}
2025-04-28 13:38:48.376	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 3, "filename": "keygen_data_3.json", "username": "test_user_3"}
2025-04-28 13:38:48.376	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 3, "file": "keygen_data_3.json"}
2025-04-28 13:38:48.376	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_3.json"}
2025-04-28 13:38:48.376	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:38:48.376	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 3, "output": "temp/keygen_data_3.json"}
2025-04-28 13:38:48.376	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--address http://127.0.0.1:8000 -t 1 -n 3 -i 3 --output temp/keygen_data_3.json", "timeout": "1m0s"}
2025-04-28 13:38:48.688	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "312.069125ms"}
2025-04-28 13:38:48.688	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "2.315741375s"}
2025-04-28 13:38:48.688	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:38:48.688	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:38:48.688	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "1.311512667s"}
2025-04-28 13:38:48.688	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:38:48.688	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:38:48.688	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:38:48.688	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:38:48.689	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "022adaa123d10ad17f576c53cf711a05f992dc772c13163e15811c0d93a51865be"}
2025-04-28 13:38:48.689	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "022adaa123d10ad17f576c53cf711a05f992dc772c13163e15811c0d93a51865be"}
2025-04-28 13:38:48.689	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "022adaa123d10ad17f576c53cf711a05f992dc772c13163e15811c0d93a51865be", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.689	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.689	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "022adaa123d10ad17f576c53cf711a05f992dc772c13163e15811c0d93a51865be"}
2025-04-28 13:38:48.689	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "022adaa123d10ad17f576c53cf711a05f992dc772c13163e15811c0d93a51865be", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.689	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.689	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35942}
2025-04-28 13:38:48.689	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "022adaa123d10ad17f576c53cf711a05f992dc772c13163e15811c0d93a51865be", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.689	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.689	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35937}
2025-04-28 13:38:48.689	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35941}
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6276}
2025-04-28 13:38:48.695	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:38:48.695	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "f8a4f34edcdd4cae63450f2655552955506df464f4fcdd984b48f29ac4d12c91"}
2025-04-28 13:38:48.695	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "07bb7b860f114e8bb3db..."}
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6304}
2025-04-28 13:38:48.695	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_1", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "key_len": 32}
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6284}
2025-04-28 13:38:48.695	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:38:48.695	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "68721fb17fd52ffae24995ca2b9fac0dda9275984b591847de23e215d3d02b1c"}
2025-04-28 13:38:48.695	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "5ca7f66fe94002fb52ce24824971d368cd0fd3f8", "message": "f8a4f34edcdd4cae63450f2655552955506df464f4fcdd984b48f29ac4d12c91"}
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/cardreader.go:179	命令: 8010000054C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A05CA7F66FE94002FB52CE24824971D368CD0FD3F8F8A4F34EDCDD4CAE63450F2655552955506DF464F4FCDD984B48F29AC4D12C91
2025-04-28 13:38:48.695	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "c7ea883f6b1c48a607e8..."}
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6312}
2025-04-28 13:38:48.695	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_2", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "key_len": 32}
2025-04-28 13:38:48.695	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "5ca7f66fe94002fb52ce24824971d368cd0fd3f8", "message": "68721fb17fd52ffae24995ca2b9fac0dda9275984b591847de23e215d3d02b1c"}
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000546CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E5CA7F66FE94002FB52CE24824971D368CD0FD3F868721FB17FD52FFAE24995CA2B9FAC0DDA9275984B591847DE23E215D3D02B1C
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6293}
2025-04-28 13:38:48.695	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:38:48.695	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "9385f3c11817d7fa2c8e331f9707511b30396c26e69d8f05500499beba1e4a79"}
2025-04-28 13:38:48.695	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "6a45d5b121f6bc09d236..."}
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6321}
2025-04-28 13:38:48.695	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:38:48.695	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_3", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "key_len": 32}
2025-04-28 13:38:48.695	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "5ca7f66fe94002fb52ce24824971d368cd0fd3f8", "message": "9385f3c11817d7fa2c8e331f9707511b30396c26e69d8f05500499beba1e4a79"}
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:48.695	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000543852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DF5CA7F66FE94002FB52CE24824971D368CD0FD3F89385F3C11817D7FA2C8E331F9707511B30396C26E69D8F05500499BEBA1E4A79
2025-04-28 13:38:48.731	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:48.731	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0708
2025-04-28 13:38:48.731	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:38:48.731	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:38:48.731	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.731	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "username": "test_user_1", "encrypted_key_length": 6304}
2025-04-28 13:38:48.731	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.359397334s"}
2025-04-28 13:38:48.765	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:48.765	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0809
2025-04-28 13:38:48.765	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:38:48.765	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:38:48.765	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.765	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "username": "test_user_2", "encrypted_key_length": 6312}
2025-04-28 13:38:48.765	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.388932209s"}
2025-04-28 13:38:48.803	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:48.803	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 090A
2025-04-28 13:38:48.803	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:38:48.803	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:38:48.803	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:48.803	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "username": "test_user_3", "encrypted_key_length": 6321}
2025-04-28 13:38:48.803	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "427.35675ms"}
2025-04-28 13:38:49.379	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_1.json", "username": "test_user_1", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:49.379	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "70 B"}
2025-04-28 13:38:49.379	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "file": "sign_data_1.json"}
2025-04-28 13:38:49.379	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_1.json"}
2025-04-28 13:38:49.379	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:38:49.379	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_1", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "sig_len": 70}
2025-04-28 13:38:49.379	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:38:49.379	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "5ca7f66fe94002fb52ce24824971d368cd0fd3f8", "signature": "3044022044c70c6d23e9c9729ac91fdb2cf0772bb63985091cc5671870b47f1282ab28870220409945b883b0290dfe97b28e95bed79864777106370a4dbe3012187672dd69ad"}
2025-04-28 13:38:49.379	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:49.379	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007AC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A05CA7F66FE94002FB52CE24824971D368CD0FD3F83044022044C70C6D23E9C9729AC91FDB2CF0772BB63985091CC5671870B47F1282AB28870220409945B883B0290DFE97B28E95BED79864777106370A4DBE3012187672DD69AD
2025-04-28 13:38:49.395	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:49.395	[34mINFO[0m	seclient/cardreader.go:191	响应数据: F8A4F34EDCDD4CAE63450F2655552955506DF464F4FCDD984B48F29AC4D12C91
2025-04-28 13:38:49.395	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:38:49.395	[34mINFO[0m	seclient/commands.go:122	数据: f8a4f34edcdd4cae63450f2655552955506df464f4fcdd984b48f29ac4d12c91
2025-04-28 13:38:49.395	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:38:49.395	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:38:49.395	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "f8a4f34edcdd4cae63450f2655552955506df464f4fcdd984b48f29ac4d12c91", "ciphertext_preview": "07bb7b860f114e8bb3db..."}
2025-04-28 13:38:49.395	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:38:49.395	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6276}
2025-04-28 13:38:49.395	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35941}
2025-04-28 13:38:49.396	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:38:49.396	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "hello", "local_share": "temp/sign_data_1.json"}
2025-04-28 13:38:49.396	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 -p 1,2 -d hello -l temp/sign_data_1.json", "timeout": "1m0s"}
2025-04-28 13:38:50.380	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_2.json", "username": "test_user_2", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:50.380	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "70 B"}
2025-04-28 13:38:50.381	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "file": "sign_data_2.json"}
2025-04-28 13:38:50.381	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_2.json"}
2025-04-28 13:38:50.381	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:38:50.381	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_2", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "sig_len": 70}
2025-04-28 13:38:50.381	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:38:50.381	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "5ca7f66fe94002fb52ce24824971d368cd0fd3f8", "signature": "304402206bd8c8a3a89a513da4e0a6f7a8eea6827872d7b4654c06cba10fe47f80b525620220642a02ff0c49a80b0d247738d34e31d6da48fbd97c79dd995a392eadbabbf68a"}
2025-04-28 13:38:50.381	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:50.381	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007A6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E5CA7F66FE94002FB52CE24824971D368CD0FD3F8304402206BD8C8A3A89A513DA4E0A6F7A8EEA6827872D7B4654C06CBA10FE47F80B525620220642A02FF0C49A80B0D247738D34E31D6DA48FBD97C79DD995A392EADBABBF68A
2025-04-28 13:38:50.398	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:50.399	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 68721FB17FD52FFAE24995CA2B9FAC0DDA9275984B591847DE23E215D3D02B1C
2025-04-28 13:38:50.399	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:38:50.399	[34mINFO[0m	seclient/commands.go:122	数据: 68721fb17fd52ffae24995ca2b9fac0dda9275984b591847de23e215d3d02b1c
2025-04-28 13:38:50.399	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:38:50.399	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:38:50.399	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "68721fb17fd52ffae24995ca2b9fac0dda9275984b591847de23e215d3d02b1c", "ciphertext_preview": "c7ea883f6b1c48a607e8..."}
2025-04-28 13:38:50.399	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:38:50.399	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6284}
2025-04-28 13:38:50.399	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35937}
2025-04-28 13:38:50.400	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:38:50.400	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "hello", "local_share": "temp/sign_data_2.json"}
2025-04-28 13:38:50.400	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "--address http://127.0.0.1:8000 -p 1,2 -d hello -l temp/sign_data_2.json", "timeout": "1m0s"}
2025-04-28 13:38:50.726	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: online stage failed\n\nCaused by:\n    couldn't complete signing: round 7: InvalidSig\n", "execution_time": "325.617375ms"}
2025-04-28 13:38:50.726	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "Error: online stage failed\n\nCaused by:\n    couldn't complete signing: round 7: InvalidSig\n", "execution_time": "1.329746458s"}
2025-04-28 13:38:50.726	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:38:50.726	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:38:50.726	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:38:50.726	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:38:50.726	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:50.726	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:50.726	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "1.348314625s"}
2025-04-28 13:38:50.726	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "346.048ms"}
2025-04-28 13:38:51.382	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_1", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:51.382	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "72 B"}
2025-04-28 13:38:51.382	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_1", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "sig_len": 72}
2025-04-28 13:38:51.382	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:38:51.382	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "5ca7f66fe94002fb52ce24824971d368cd0fd3f8", "signature": "3046022100a2c159561dc760e9dbe1112939091f75b6c0adf828f531d4812aca7d199af2aa022100b914123ee7e7f3c14abebd56910b37c5b3072c757e30b216e1d3ef89372b03d9"}
2025-04-28 13:38:51.382	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:51.383	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007CC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A05CA7F66FE94002FB52CE24824971D368CD0FD3F83046022100A2C159561DC760E9DBE1112939091F75B6C0ADF828F531D4812ACA7D199AF2AA022100B914123EE7E7F3C14ABEBD56910B37C5B3072C757E30B216E1D3EF89372B03D9
2025-04-28 13:38:51.413	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:51.414	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0709
2025-04-28 13:38:51.414	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 7, "剩余记录数": 9}
2025-04-28 13:38:51.414	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 7, "记录总数": 9}
2025-04-28 13:38:51.414	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_1", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:51.414	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "31.952167ms"}
2025-04-28 13:38:52.415	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_2", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:52.415	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "72 B"}
2025-04-28 13:38:52.415	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_2", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "sig_len": 72}
2025-04-28 13:38:52.415	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:38:52.415	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "5ca7f66fe94002fb52ce24824971d368cd0fd3f8", "signature": "3046022100e7b7b1f9a1a3d023d3955dfd24584ab691d78bbc7185605779b3dbcdfd51ec4f022100ee34c7e6abe8c9926fb7b0433969b2a8e2fcdcae182401a2792f4102c0bb91f0"}
2025-04-28 13:38:52.415	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:52.415	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007C6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88E5CA7F66FE94002FB52CE24824971D368CD0FD3F83046022100E7B7B1F9A1A3D023D3955DFD24584AB691D78BBC7185605779B3DBCDFD51EC4F022100EE34C7E6ABE8C9926FB7B0433969B2A8E2FCDCAE182401A2792F4102C0BB91F0
2025-04-28 13:38:52.439	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:52.439	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0808
2025-04-28 13:38:52.439	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 8, "剩余记录数": 8}
2025-04-28 13:38:52.439	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 8, "记录总数": 8}
2025-04-28 13:38:52.439	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_2", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:52.439	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "24.390875ms"}
2025-04-28 13:38:53.442	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_3", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:53.442	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "71 B"}
2025-04-28 13:38:53.442	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_3", "addr": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8", "sig_len": 71}
2025-04-28 13:38:53.442	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:38:53.442	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "5ca7f66fe94002fb52ce24824971d368cd0fd3f8", "signature": "3045022100c5c03736007e37dfc10f7b69c759758203b1cc6d868524e60622936cf32119da022067938ebd4017edbfdbbba5af6324d1c3f71ca9618a90c72ad9e9f767b7762986"}
2025-04-28 13:38:53.442	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:38:53.442	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007B3852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DF5CA7F66FE94002FB52CE24824971D368CD0FD3F83045022100C5C03736007E37DFC10F7B69C759758203B1CC6D868524E60622936CF32119DA022067938EBD4017EDBFDBBBA5AF6324D1C3F71CA9618A90C72AD9E9F767B7762986
2025-04-28 13:38:53.468	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:38:53.468	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0907
2025-04-28 13:38:53.468	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 9, "剩余记录数": 7}
2025-04-28 13:38:53.468	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 9, "记录总数": 7}
2025-04-28 13:38:53.468	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_3", "address": "0x5Ca7f66fe94002fb52cE24824971D368CD0fD3F8"}
2025-04-28 13:38:53.468	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "26.074917ms"}
2025-04-28 13:40:52.411	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:40:52.412	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:40:52.412	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:40:52.412	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:40:57.307	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:40:57.308	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:40:57.308	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:40:57.319	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:40:57.319	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:40:57.319	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:40:57.319	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:40:57.319	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:40:57.319	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:40:57.321	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:40:57.321	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:40:57.321	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:40:57.321	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:40:57.321	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:40:57.323	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:40:57.323	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:40:57.323	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:57.323	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:57.323	[31mERROR[0m	controllers/mpc.go:245	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:57.323	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 500, "latency": "15.555291ms"}
2025-04-28 13:40:57.323	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:40:57.324	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:40:57.324	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:40:57.324	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:40:57.324	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:40:57.324	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:40:57.324	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:40:57.324	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:40:57.324	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:40:57.324	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:40:57.324	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:40:57.324	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:40:57.324	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:40:57.324	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:40:57.326	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:40:57.326	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:40:57.326	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:57.326	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:57.326	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:57.326	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "2.805958ms"}
2025-04-28 13:40:58.325	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:40:58.325	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:40:58.325	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:40:58.325	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:40:58.325	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:40:58.325	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:40:58.325	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:40:58.325	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:40:58.325	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:40:58.326	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:40:58.326	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:40:58.326	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:40:58.326	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:40:58.326	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:40:58.328	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:40:58.328	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:40:58.328	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:58.328	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:58.328	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:58.328	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "3.602334ms"}
2025-04-28 13:40:59.326	[34mINFO[0m	controllers/mpc.go:54	服务未初始化，尝试初始化
2025-04-28 13:40:59.327	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:40:59.327	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:40:59.328	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:40:59.328	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:40:59.328	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:40:59.328	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:40:59.328	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:40:59.328	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:40:59.331	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:40:59.331	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:40:59.331	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:40:59.331	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:40:59.331	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:40:59.334	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:40:59.334	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:40:59.334	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:59.335	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:59.335	[31mERROR[0m	controllers/mpc.go:56	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:40:59.335	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "8.560708ms"}
2025-04-28 13:41:00.331	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:41:00.332	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:41:00.332	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:41:00.333	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:41:00.334	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:41:00.334	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:00.334	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:41:00.334	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:41:00.334	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:00.336	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:41:00.336	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:41:00.336	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:41:00.336	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:00.336	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:41:00.339	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:41:00.339	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:41:00.339	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:00.340	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:00.340	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:00.340	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.41525ms"}
2025-04-28 13:41:01.334	[34mINFO[0m	controllers/mpc.go:132	服务未初始化，尝试初始化
2025-04-28 13:41:01.335	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:41:01.335	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:41:01.335	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:41:01.336	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:41:01.336	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:01.336	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:41:01.336	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:41:01.336	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:01.338	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:41:01.339	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:41:01.339	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:41:01.339	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:01.339	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:41:01.341	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:41:01.341	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:41:01.342	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:01.342	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:01.342	[31mERROR[0m	controllers/mpc.go:134	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:01.342	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "8.550208ms"}
2025-04-28 13:41:02.335	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:41:02.335	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:41:02.335	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:41:02.335	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:41:02.335	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:41:02.335	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:02.335	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:41:02.335	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:41:02.335	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:02.336	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:41:02.336	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:41:02.336	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:41:02.336	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:02.336	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:41:02.338	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:41:02.338	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:41:02.338	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:02.338	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:02.338	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:02.338	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "3.179667ms"}
2025-04-28 13:41:03.340	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:41:03.341	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:41:03.341	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:41:03.342	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:41:03.342	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:41:03.342	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:03.342	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:41:03.342	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:41:03.343	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:03.345	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:41:03.345	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:41:03.345	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:41:03.345	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:03.345	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:41:03.351	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:41:03.351	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:41:03.351	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:03.355	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:03.355	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:03.355	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "14.794708ms"}
2025-04-28 13:41:04.358	[34mINFO[0m	controllers/mpc.go:282	服务未初始化，尝试初始化
2025-04-28 13:41:04.359	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:41:04.359	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:41:04.359	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:41:04.359	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:41:04.359	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:04.359	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:41:04.359	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:41:04.359	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:04.361	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:41:04.361	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:41:04.361	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:41:04.361	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:04.361	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:41:04.363	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6D00
2025-04-28 13:41:04.363	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:41:04.363	[31mERROR[0m	services/security.go:53	选择Applet失败	{"err": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:04.363	[31mERROR[0m	controllers/mpc.go:38	创建安全芯片服务失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:04.363	[31mERROR[0m	controllers/mpc.go:284	服务初始化失败	{"error": "获取CPLC数据失败: 获取CPLC数据返回错误状态码: 0x6D00"}
2025-04-28 13:41:04.363	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "5.255625ms"}
2025-04-28 13:41:14.010	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:41:14.010	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:41:14.010	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:41:14.010	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:41:14.010	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:41:14.010	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:14.010	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:41:14.010	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:41:14.010	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:41:14.011	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:41:14.011	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:41:14.011	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:41:14.011	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:14.011	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 9F7F2A007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301
2025-04-28 13:41:14.013	[35mDEBUG[0m	seclient/commands.go:234	获取CPLC数据成功	{"CPLC标签": "9F7F", "CPLC长度": 42, "CPLC数据": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:144	=== 选择Applet命令 ===
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:145	APDU: 00A4040008A000000062CF0101
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:146	命令解析:
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:147	  CLA: 0x00 (ISO标准命令)
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:148	  INS: 0xA4 (选择指令)
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:149	  P1: 0x04 (按名称选择)
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:150	  P2: 0x00 (首次选择)
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:151	  Lc: 0x08 (AID长度)
2025-04-28 13:41:14.013	[34mINFO[0m	seclient/cardreader.go:152	  Data: A000000062CF0101 (AID)
2025-04-28 13:41:14.015	[34mINFO[0m	seclient/cardreader.go:166	=== 选择Applet响应 ===
2025-04-28 13:41:14.015	[34mINFO[0m	seclient/cardreader.go:167	响应数据: 9000
2025-04-28 13:41:14.015	[34mINFO[0m	seclient/cardreader.go:168	状态码: 0x9000 (成功)
2025-04-28 13:41:14.015	[34mINFO[0m	seclient/cardreader.go:169	数据: 
2025-04-28 13:41:14.015	[34mINFO[0m	seclient/cardreader.go:170	成功选择Applet, AID: A000000062CF0101
2025-04-28 13:41:14.015	[35mDEBUG[0m	services/security.go:59	安全芯片服务初始化完成
2025-04-28 13:41:14.015	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-28 13:41:14.015	[35mDEBUG[0m	services/mpc.go:29	初始化MPC服务
2025-04-28 13:41:14.015	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-28 13:41:14.015	[34mINFO[0m	controllers/mpc.go:254	接收到获取CPLC信息请求	{"client_ip": "::1"}
2025-04-28 13:41:14.015	[35mDEBUG[0m	services/security.go:225	获取CPLC信息
2025-04-28 13:41:14.015	[35mDEBUG[0m	services/security.go:237	CPLC信息获取成功	{"长度": 42, "CPLC": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:41:14.015	[34mINFO[0m	controllers/mpc.go:269	获取CPLC信息成功	{"cplc": "007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301"}
2025-04-28 13:41:14.015	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 200, "latency": "5.070416ms"}
2025-04-28 13:41:14.015	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 1, "filename": "keygen_data_1.json", "username": "test_user_1"}
2025-04-28 13:41:14.015	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 1, "file": "keygen_data_1.json"}
2025-04-28 13:41:14.015	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_1.json"}
2025-04-28 13:41:14.015	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:41:14.015	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 1, "output": "temp/keygen_data_1.json"}
2025-04-28 13:41:14.015	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "-t 1 -n 3 -i 1 --output temp/keygen_data_1.json", "timeout": "1m0s"}
2025-04-28 13:41:15.017	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 2, "filename": "keygen_data_2.json", "username": "test_user_2"}
2025-04-28 13:41:15.017	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 2, "file": "keygen_data_2.json"}
2025-04-28 13:41:15.017	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_2.json"}
2025-04-28 13:41:15.017	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:41:15.017	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 2, "output": "temp/keygen_data_2.json"}
2025-04-28 13:41:15.017	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "-t 1 -n 3 -i 2 --output temp/keygen_data_2.json", "timeout": "1m0s"}
2025-04-28 13:41:16.018	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 3, "filename": "keygen_data_3.json", "username": "test_user_3"}
2025-04-28 13:41:16.018	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 3, "file": "keygen_data_3.json"}
2025-04-28 13:41:16.019	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_3.json"}
2025-04-28 13:41:16.019	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:41:16.019	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 3, "output": "temp/keygen_data_3.json"}
2025-04-28 13:41:16.019	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "-t 1 -n 3 -i 3 --output temp/keygen_data_3.json", "timeout": "1m0s"}
2025-04-28 13:41:16.204	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "185.832125ms"}
2025-04-28 13:41:16.205	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:41:16.204	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "1.187619792s"}
2025-04-28 13:41:16.205	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:41:16.205	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:41:16.205	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:41:16.205	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "2.189575084s"}
2025-04-28 13:41:16.205	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:41:16.205	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:41:16.205	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "0387ffa4416ca6e2aa7af419fe43922258babb675ef860fc086c44f7da43a586c0"}
2025-04-28 13:41:16.205	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "0387ffa4416ca6e2aa7af419fe43922258babb675ef860fc086c44f7da43a586c0"}
2025-04-28 13:41:16.206	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "0387ffa4416ca6e2aa7af419fe43922258babb675ef860fc086c44f7da43a586c0"}
2025-04-28 13:41:16.206	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "0387ffa4416ca6e2aa7af419fe43922258babb675ef860fc086c44f7da43a586c0", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.206	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "0387ffa4416ca6e2aa7af419fe43922258babb675ef860fc086c44f7da43a586c0", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.206	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.206	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "0387ffa4416ca6e2aa7af419fe43922258babb675ef860fc086c44f7da43a586c0", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.206	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.206	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.206	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35935}
2025-04-28 13:41:16.206	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35945}
2025-04-28 13:41:16.206	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35927}
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6312}
2025-04-28 13:41:16.212	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:41:16.212	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "2d47e8493e49afa85949f3cf10cccd71e8f62e87ff3c414adb3afe210fb1ee48"}
2025-04-28 13:41:16.212	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "abd04b6b549dd4e400f2..."}
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6340}
2025-04-28 13:41:16.212	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_3", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "key_len": 32}
2025-04-28 13:41:16.212	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "message": "2d47e8493e49afa85949f3cf10cccd71e8f62e87ff3c414adb3afe210fb1ee48"}
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000543852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DFFECB8AD0BE98124B9730A701238AE790DB57DC372D47E8493E49AFA85949F3CF10CCCD71E8F62E87FF3C414ADB3AFE210FB1EE48
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6289}
2025-04-28 13:41:16.212	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:41:16.212	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "6334cb497709ef7a86a06e9044f5f51be25b5d86af0845412fcb448d107b59b6"}
2025-04-28 13:41:16.212	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "f5bd4c793eee0ea3baa4..."}
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6317}
2025-04-28 13:41:16.212	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "key_len": 32}
2025-04-28 13:41:16.212	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "message": "6334cb497709ef7a86a06e9044f5f51be25b5d86af0845412fcb448d107b59b6"}
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6300}
2025-04-28 13:41:16.212	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:41:16.212	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "45109c520aa0e07546664f54d346015473bb94fe370e7d44e7454a85ecea6031"}
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000546CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EFECB8AD0BE98124B9730A701238AE790DB57DC376334CB497709EF7A86A06E9044F5F51BE25B5D86AF0845412FCB448D107B59B6
2025-04-28 13:41:16.212	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "d75a3b942dc2a0169640..."}
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6328}
2025-04-28 13:41:16.212	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:41:16.212	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_1", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "key_len": 32}
2025-04-28 13:41:16.212	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "message": "45109c520aa0e07546664f54d346015473bb94fe370e7d44e7454a85ecea6031"}
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:16.212	[34mINFO[0m	seclient/cardreader.go:179	命令: 8010000054C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0FECB8AD0BE98124B9730A701238AE790DB57DC3745109C520AA0E07546664F54D346015473BB94FE370E7D44E7454A85ECEA6031
2025-04-28 13:41:16.249	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:16.249	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0708
2025-04-28 13:41:16.249	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:41:16.249	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:41:16.249	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.249	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "username": "test_user_3", "encrypted_key_length": 6340}
2025-04-28 13:41:16.249	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "230.763542ms"}
2025-04-28 13:41:16.281	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:16.281	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0809
2025-04-28 13:41:16.281	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:41:16.281	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:41:16.281	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.281	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "username": "test_user_2", "encrypted_key_length": 6317}
2025-04-28 13:41:16.281	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.264761208s"}
2025-04-28 13:41:16.319	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:16.319	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 090A
2025-04-28 13:41:16.319	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:41:16.319	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:41:16.319	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:16.319	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "username": "test_user_1", "encrypted_key_length": 6328}
2025-04-28 13:41:16.319	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.304632875s"}
2025-04-28 13:41:17.021	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_1.json", "username": "test_user_1", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:17.021	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-28 13:41:17.021	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "file": "sign_data_1.json"}
2025-04-28 13:41:17.021	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_1.json"}
2025-04-28 13:41:17.021	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:41:17.021	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_1", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 71}
2025-04-28 13:41:17.021	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:41:17.021	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "3045022045fa84002397300671ea87c982e928f5895dd3b7ce9eda44ee40be1180ed4d77022100b9f4e9130af9bbc1aac27c41ba6e01ad877b81450a81fa307d721c9dac9c9fce"}
2025-04-28 13:41:17.021	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:17.021	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007BC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0FECB8AD0BE98124B9730A701238AE790DB57DC373045022045FA84002397300671EA87C982E928F5895DD3B7CE9EDA44EE40BE1180ED4D77022100B9F4E9130AF9BBC1AAC27C41BA6E01AD877B81450A81FA307D721C9DAC9C9FCE
2025-04-28 13:41:17.037	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:17.037	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 45109C520AA0E07546664F54D346015473BB94FE370E7D44E7454A85ECEA6031
2025-04-28 13:41:17.037	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:41:17.037	[34mINFO[0m	seclient/commands.go:122	数据: 45109c520aa0e07546664f54d346015473bb94fe370e7d44e7454a85ecea6031
2025-04-28 13:41:17.037	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:41:17.038	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:41:17.038	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "45109c520aa0e07546664f54d346015473bb94fe370e7d44e7454a85ecea6031", "ciphertext_preview": "d75a3b942dc2a0169640..."}
2025-04-28 13:41:17.038	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:41:17.038	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6300}
2025-04-28 13:41:17.038	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35945}
2025-04-28 13:41:17.039	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:41:17.039	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "hello", "local_share": "temp/sign_data_1.json"}
2025-04-28 13:41:17.039	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 1,2 -d hello -l temp/sign_data_1.json", "timeout": "1m0s"}
2025-04-28 13:41:18.022	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_2.json", "username": "test_user_2", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:18.022	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "70 B"}
2025-04-28 13:41:18.022	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "file": "sign_data_2.json"}
2025-04-28 13:41:18.022	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_2.json"}
2025-04-28 13:41:18.023	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:41:18.023	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 70}
2025-04-28 13:41:18.023	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:41:18.023	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "30440220150616ebe39579c40a90d9a849a3dfd202f258fb55b7e693a77263a7f2dff64802202cafba9ce859c2304acf124359d698c520b9466d3acd2cf290dd0dc50103c7c9"}
2025-04-28 13:41:18.023	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:18.023	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007A6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EFECB8AD0BE98124B9730A701238AE790DB57DC3730440220150616EBE39579C40A90D9A849A3DFD202F258FB55B7E693A77263A7F2DFF64802202CAFBA9CE859C2304ACF124359D698C520B9466D3ACD2CF290DD0DC50103C7C9
2025-04-28 13:41:18.038	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:18.039	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 6334CB497709EF7A86A06E9044F5F51BE25B5D86AF0845412FCB448D107B59B6
2025-04-28 13:41:18.039	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:41:18.039	[34mINFO[0m	seclient/commands.go:122	数据: 6334cb497709ef7a86a06e9044f5f51be25b5d86af0845412fcb448d107b59b6
2025-04-28 13:41:18.039	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:41:18.039	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:41:18.039	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "6334cb497709ef7a86a06e9044f5f51be25b5d86af0845412fcb448d107b59b6", "ciphertext_preview": "f5bd4c793eee0ea3baa4..."}
2025-04-28 13:41:18.039	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:41:18.039	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6289}
2025-04-28 13:41:18.039	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35927}
2025-04-28 13:41:18.039	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:41:18.039	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "hello", "local_share": "temp/sign_data_2.json"}
2025-04-28 13:41:18.039	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "-p 1,2 -d hello -l temp/sign_data_2.json", "timeout": "1m0s"}
2025-04-28 13:41:18.362	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "{\"r\":{\"curve\":\"secp256k1\",\"scalar\":[89,89,197,11,88,192,117,118,47,9,123,233,32,38,162,235,2,3,170,220,211,199,77,121,127,218,39,217,225,10,169,88]},\"s\":{\"curve\":\"secp256k1\",\"scalar\":[92,174,234,42,102,38,162,60,106,219,150,183,249,189,229,46,176,255,2,249,229,143,213,32,49,119,42,46,136,223,68,16]},\"recid\":0}\n", "execution_time": "322.383542ms"}
2025-04-28 13:41:18.362	[34mINFO[0m	utils/command.go:91	签名操作成功
2025-04-28 13:41:18.362	[35mDEBUG[0m	services/mpc.go:244	签名完成	{"sig": "0x{\"r\":{\"curve\":\"secp256k1\",\"scalar\":[89,89,197,11,88,192,117,118,47,9,123,233,32,38,162,235,2,3,170,220,211,199,77,121,127,218,39,217,225,10,169,88]},\"s\":{\"curve\":\"secp256k1\",\"scalar\":[92,174,234,42,102,38,162,60,106,219,150,183,249,189,229,46,176,255,2,249,229,143,213,32,49,119,42,46,136,223,68,16]},\"recid\":0}"}
2025-04-28 13:41:18.362	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "{\"r\":{\"curve\":\"secp256k1\",\"scalar\":[89,89,197,11,88,192,117,118,47,9,123,233,32,38,162,235,2,3,170,220,211,199,77,121,127,218,39,217,225,10,169,88]},\"s\":{\"curve\":\"secp256k1\",\"scalar\":[92,174,234,42,102,38,162,60,106,219,150,183,249,189,229,46,176,255,2,249,229,143,213,32,49,119,42,46,136,223,68,16]},\"recid\":0}\n", "execution_time": "1.323172875s"}
2025-04-28 13:41:18.362	[34mINFO[0m	utils/command.go:91	签名操作成功
2025-04-28 13:41:18.362	[35mDEBUG[0m	services/mpc.go:244	签名完成	{"sig": "0x{\"r\":{\"curve\":\"secp256k1\",\"scalar\":[89,89,197,11,88,192,117,118,47,9,123,233,32,38,162,235,2,3,170,220,211,199,77,121,127,218,39,217,225,10,169,88]},\"s\":{\"curve\":\"secp256k1\",\"scalar\":[92,174,234,42,102,38,162,60,106,219,150,183,249,189,229,46,176,255,2,249,229,143,213,32,49,119,42,46,136,223,68,16]},\"recid\":0}"}
2025-04-28 13:41:18.362	[34mINFO[0m	controllers/mpc.go:227	签名成功	{"username": "test_user_2", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:18.362	[34mINFO[0m	controllers/mpc.go:227	签名成功	{"username": "test_user_1", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:18.362	[35mDEBUG[0m	controllers/mpc.go:230	签名结果	{"signature": "0x{\"r\":{\"curve\":\"secp256k1\",\"scalar\":[89,89,197,11,88,192,117,118,47,9,123,233,32,38,162,235,2,3,170,220,211,199,77,121,127,218,39,217,225,10,169,88]},\"s\":{\"curve\":\"secp256k1\",\"scalar\":[92,174,234,42,102,38,162,60,106,219,150,183,249,189,229,46,176,255,2,249,229,143,213,32,49,119,42,46,136,223,68,16]},\"recid\":0}"}
2025-04-28 13:41:18.362	[35mDEBUG[0m	controllers/mpc.go:230	签名结果	{"signature": "0x{\"r\":{\"curve\":\"secp256k1\",\"scalar\":[89,89,197,11,88,192,117,118,47,9,123,233,32,38,162,235,2,3,170,220,211,199,77,121,127,218,39,217,225,10,169,88]},\"s\":{\"curve\":\"secp256k1\",\"scalar\":[92,174,234,42,102,38,162,60,106,219,150,183,249,189,229,46,176,255,2,249,229,143,213,32,49,119,42,46,136,223,68,16]},\"recid\":0}"}
2025-04-28 13:41:18.362	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 200, "latency": "340.380959ms"}
2025-04-28 13:41:18.362	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 200, "latency": "1.341937375s"}
2025-04-28 13:41:19.024	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_1", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:19.024	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "70 B"}
2025-04-28 13:41:19.025	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_1", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 70}
2025-04-28 13:41:19.025	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:41:19.025	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "304402206fd6ce33221806cea9ff45bc9ea447b6706d43f74dc5f2d98f937f4be9543f62022054dcea0827703a619cf0c8a317ff64b38fdbe24494b03dae376f0629c88470d7"}
2025-04-28 13:41:19.025	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:19.025	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007AC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0FECB8AD0BE98124B9730A701238AE790DB57DC37304402206FD6CE33221806CEA9FF45BC9EA447B6706D43F74DC5F2D98F937F4BE9543F62022054DCEA0827703A619CF0C8A317FF64B38FDBE24494B03DAE376F0629C88470D7
2025-04-28 13:41:19.055	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:19.056	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0909
2025-04-28 13:41:19.056	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 9, "剩余记录数": 9}
2025-04-28 13:41:19.056	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 9, "记录总数": 9}
2025-04-28 13:41:19.056	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_1", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:19.056	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "31.843875ms"}
2025-04-28 13:41:20.058	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_2", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:20.058	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "70 B"}
2025-04-28 13:41:20.058	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 70}
2025-04-28 13:41:20.058	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:41:20.058	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "304402207892afb6351664c8d6d30fff7a6d74529588979bd5428a2bf1901de2009a42f8022037a07bda6320aeff5c09517f83a03ac119c93455ef664c99e2a705eecb8e55f9"}
2025-04-28 13:41:20.058	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:20.058	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007A6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EFECB8AD0BE98124B9730A701238AE790DB57DC37304402207892AFB6351664C8D6D30FFF7A6D74529588979BD5428A2BF1901DE2009A42F8022037A07BDA6320AEFF5C09517F83A03AC119C93455EF664C99E2A705EECB8E55F9
2025-04-28 13:41:20.088	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:20.088	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0808
2025-04-28 13:41:20.088	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 8, "剩余记录数": 8}
2025-04-28 13:41:20.088	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 8, "记录总数": 8}
2025-04-28 13:41:20.088	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_2", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:20.088	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "30.180292ms"}
2025-04-28 13:41:21.091	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_3", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:21.091	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "71 B"}
2025-04-28 13:41:21.091	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_3", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 71}
2025-04-28 13:41:21.091	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:41:21.091	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "30450221008c7e8f67b1a3c0b39207562c261cb09c6fe412abffde8c9e5d165af63c8d937402204cac77677eaabc357d1122b9f80772ccdd17aaf005e8ca430bfab92ddf7338f7"}
2025-04-28 13:41:21.091	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:41:21.091	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007B3852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DFFECB8AD0BE98124B9730A701238AE790DB57DC3730450221008C7E8F67B1A3C0B39207562C261CB09C6FE412ABFFDE8C9E5D165AF63C8D937402204CAC77677EAABC357D1122B9F80772CCDD17AAF005E8CA430BFAB92DDF7338F7
2025-04-28 13:41:21.121	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:41:21.121	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0707
2025-04-28 13:41:21.121	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 7, "剩余记录数": 7}
2025-04-28 13:41:21.121	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 7, "记录总数": 7}
2025-04-28 13:41:21.121	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_3", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:41:21.121	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "30.603416ms"}
2025-04-28 13:42:57.244	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:42:57.244	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:42:57.244	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:42:57.244	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:43:04.716	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:43:04.717	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:43:04.717	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:43:04.728	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:43:04.728	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:43:04.728	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:43:04.728	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:43:04.728	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:43:04.728	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:43:04.787	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:43:04.787	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:43:04.787	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:43:04.787	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:43:04.787	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 9F7F2A007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301
2025-04-28 13:43:04.789	[35mDEBUG[0m	seclient/commands.go:234	获取CPLC数据成功	{"CPLC标签": "9F7F", "CPLC长度": 42, "CPLC数据": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:144	=== 选择Applet命令 ===
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:145	APDU: 00A4040008A000000062CF0101
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:146	命令解析:
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:147	  CLA: 0x00 (ISO标准命令)
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:148	  INS: 0xA4 (选择指令)
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:149	  P1: 0x04 (按名称选择)
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:150	  P2: 0x00 (首次选择)
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:151	  Lc: 0x08 (AID长度)
2025-04-28 13:43:04.789	[34mINFO[0m	seclient/cardreader.go:152	  Data: A000000062CF0101 (AID)
2025-04-28 13:43:04.791	[34mINFO[0m	seclient/cardreader.go:166	=== 选择Applet响应 ===
2025-04-28 13:43:04.791	[34mINFO[0m	seclient/cardreader.go:167	响应数据: 9000
2025-04-28 13:43:04.791	[34mINFO[0m	seclient/cardreader.go:168	状态码: 0x9000 (成功)
2025-04-28 13:43:04.791	[34mINFO[0m	seclient/cardreader.go:169	数据: 
2025-04-28 13:43:04.791	[34mINFO[0m	seclient/cardreader.go:170	成功选择Applet, AID: A000000062CF0101
2025-04-28 13:43:04.791	[35mDEBUG[0m	services/security.go:59	安全芯片服务初始化完成
2025-04-28 13:43:04.791	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-28 13:43:04.791	[35mDEBUG[0m	services/mpc.go:29	初始化MPC服务
2025-04-28 13:43:04.791	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-28 13:43:04.791	[34mINFO[0m	controllers/mpc.go:254	接收到获取CPLC信息请求	{"client_ip": "::1"}
2025-04-28 13:43:04.791	[35mDEBUG[0m	services/security.go:225	获取CPLC信息
2025-04-28 13:43:04.791	[35mDEBUG[0m	services/security.go:237	CPLC信息获取成功	{"长度": 42, "CPLC": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:43:04.791	[34mINFO[0m	controllers/mpc.go:269	获取CPLC信息成功	{"cplc": "007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301"}
2025-04-28 13:43:04.791	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 200, "latency": "74.671667ms"}
2025-04-28 13:43:04.792	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 1, "filename": "keygen_data_1.json", "username": "test_user_1"}
2025-04-28 13:43:04.792	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 1, "file": "keygen_data_1.json"}
2025-04-28 13:43:04.792	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_1.json"}
2025-04-28 13:43:04.792	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:43:04.792	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 1, "output": "temp/keygen_data_1.json"}
2025-04-28 13:43:04.792	[34mINFO[0m	utils/command.go:131	开始执行命令	{"command": "bin/gg20_keygen", "args": "--index 1 --number-of-parties 3 --output temp/keygen_data_1.json", "timeout": "1m0s"}
2025-04-28 13:43:04.805	[31mERROR[0m	utils/command.go:146	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: The following required arguments were not provided:\n    --threshold <threshold>\n\nUSAGE:\n    gg20_keygen --address <address> --index <index> --number-of-parties <number-of-parties> --output <output> --room <room> --threshold <threshold>\n\nFor more information try --help\n", "execution_time": "12.723542ms"}
2025-04-28 13:43:04.805	[31mERROR[0m	utils/command.go:65	密钥生成失败	{"error": "exit status 1"}
2025-04-28 13:43:04.805	[31mERROR[0m	services/mpc.go:78	密钥生成失败	{"error": "exit status 1"}
2025-04-28 13:43:04.805	[33mWARN[0m	services/mpc.go:71	清理临时文件失败	{"error": "remove temp/keygen_data_1.json: no such file or directory"}
2025-04-28 13:43:04.805	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user_1"}
2025-04-28 13:43:04.805	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "13.024666ms"}
2025-04-28 13:43:05.793	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 2, "filename": "keygen_data_2.json", "username": "test_user_2"}
2025-04-28 13:43:05.794	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 2, "file": "keygen_data_2.json"}
2025-04-28 13:43:05.794	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_2.json"}
2025-04-28 13:43:05.794	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:43:05.794	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 2, "output": "temp/keygen_data_2.json"}
2025-04-28 13:43:05.794	[34mINFO[0m	utils/command.go:131	开始执行命令	{"command": "bin/gg20_keygen", "args": "--index 2 --number-of-parties 3 --output temp/keygen_data_2.json", "timeout": "1m0s"}
2025-04-28 13:43:05.805	[31mERROR[0m	utils/command.go:146	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: The following required arguments were not provided:\n    --threshold <threshold>\n\nUSAGE:\n    gg20_keygen --address <address> --index <index> --number-of-parties <number-of-parties> --output <output> --room <room> --threshold <threshold>\n\nFor more information try --help\n", "execution_time": "11.366917ms"}
2025-04-28 13:43:05.805	[31mERROR[0m	utils/command.go:65	密钥生成失败	{"error": "exit status 1"}
2025-04-28 13:43:05.805	[31mERROR[0m	services/mpc.go:78	密钥生成失败	{"error": "exit status 1"}
2025-04-28 13:43:05.805	[33mWARN[0m	services/mpc.go:71	清理临时文件失败	{"error": "remove temp/keygen_data_2.json: no such file or directory"}
2025-04-28 13:43:05.805	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user_2"}
2025-04-28 13:43:05.805	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "11.814334ms"}
2025-04-28 13:43:06.795	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 3, "filename": "keygen_data_3.json", "username": "test_user_3"}
2025-04-28 13:43:06.795	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 3, "file": "keygen_data_3.json"}
2025-04-28 13:43:06.795	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_3.json"}
2025-04-28 13:43:06.795	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:43:06.795	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 3, "output": "temp/keygen_data_3.json"}
2025-04-28 13:43:06.795	[34mINFO[0m	utils/command.go:131	开始执行命令	{"command": "bin/gg20_keygen", "args": "--index 3 --number-of-parties 3 --output temp/keygen_data_3.json", "timeout": "1m0s"}
2025-04-28 13:43:06.812	[31mERROR[0m	utils/command.go:146	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: The following required arguments were not provided:\n    --threshold <threshold>\n\nUSAGE:\n    gg20_keygen --address <address> --index <index> --number-of-parties <number-of-parties> --output <output> --room <room> --threshold <threshold>\n\nFor more information try --help\n", "execution_time": "17.300208ms"}
2025-04-28 13:43:06.813	[31mERROR[0m	utils/command.go:65	密钥生成失败	{"error": "exit status 1"}
2025-04-28 13:43:06.813	[31mERROR[0m	services/mpc.go:78	密钥生成失败	{"error": "exit status 1"}
2025-04-28 13:43:06.813	[33mWARN[0m	services/mpc.go:71	清理临时文件失败	{"error": "remove temp/keygen_data_3.json: no such file or directory"}
2025-04-28 13:43:06.813	[31mERROR[0m	controllers/mpc.go:95	密钥生成失败	{"error": "密钥生成失败: exit status 1", "username": "test_user_3"}
2025-04-28 13:43:06.813	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 500, "latency": "17.988209ms"}
2025-04-28 13:43:07.800	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_1.json", "username": "test_user_1", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:07.800	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-28 13:43:07.800	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "file": "sign_data_1.json"}
2025-04-28 13:43:07.800	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_1.json"}
2025-04-28 13:43:07.800	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:43:07.800	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_1", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 71}
2025-04-28 13:43:07.801	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:43:07.801	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "3045022050ebab42d046d8c70c7f1ef62618b9c410d6519023d84a5f68dcc6f6f17eb12c022100e7b9aa2b4925157cdacbce9b4d33cfc0538aa94e5b0eb2ba47e55adc98c0f88f"}
2025-04-28 13:43:07.801	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:43:07.801	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007BC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0FECB8AD0BE98124B9730A701238AE790DB57DC373045022050EBAB42D046D8C70C7F1EF62618B9C410D6519023D84A5F68DCC6F6F17EB12C022100E7B9AA2B4925157CDACBCE9B4D33CFC0538AA94E5B0EB2BA47E55ADC98C0F88F
2025-04-28 13:43:07.821	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6A83
2025-04-28 13:43:07.821	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:43:07.821	[31mERROR[0m	services/security.go:166	读取数据失败	{"err": "记录未找到 (状态码: 0x6A83)"}
2025-04-28 13:43:07.821	[31mERROR[0m	services/mpc.go:203	读取密钥失败	{"error": "记录未找到 (状态码: 0x6A83)"}
2025-04-28 13:43:07.821	[33mWARN[0m	services/mpc.go:195	清理临时文件失败	{"error": "remove temp/sign_data_1.json: no such file or directory"}
2025-04-28 13:43:07.821	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "从安全芯片读取密钥失败: 记录未找到 (状态码: 0x6A83)", "username": "test_user_1", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:07.821	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "21.632083ms"}
2025-04-28 13:43:08.803	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_2.json", "username": "test_user_2", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:08.803	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-28 13:43:08.803	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "file": "sign_data_2.json"}
2025-04-28 13:43:08.803	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_2.json"}
2025-04-28 13:43:08.803	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:43:08.803	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 71}
2025-04-28 13:43:08.803	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:43:08.803	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "304502210080d5b4606af859c4809be17faad7628448d454a5f878101371bd247d5152909c0220085d469c6a2a6675e3c5f803ffce8a52dfe77c289151d2a2ee8ae96369dbfc48"}
2025-04-28 13:43:08.803	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:43:08.803	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007B6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EFECB8AD0BE98124B9730A701238AE790DB57DC37304502210080D5B4606AF859C4809BE17FAAD7628448D454A5F878101371BD247D5152909C0220085D469C6A2A6675E3C5F803FFCE8A52DFE77C289151D2A2EE8AE96369DBFC48
2025-04-28 13:43:08.823	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6A83
2025-04-28 13:43:08.823	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:43:08.823	[31mERROR[0m	services/security.go:166	读取数据失败	{"err": "记录未找到 (状态码: 0x6A83)"}
2025-04-28 13:43:08.823	[31mERROR[0m	services/mpc.go:203	读取密钥失败	{"error": "记录未找到 (状态码: 0x6A83)"}
2025-04-28 13:43:08.824	[33mWARN[0m	services/mpc.go:195	清理临时文件失败	{"error": "remove temp/sign_data_2.json: no such file or directory"}
2025-04-28 13:43:08.824	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "从安全芯片读取密钥失败: 记录未找到 (状态码: 0x6A83)", "username": "test_user_2", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:08.824	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "21.436792ms"}
2025-04-28 13:43:09.804	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_1", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:09.805	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "70 B"}
2025-04-28 13:43:09.805	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_1", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 70}
2025-04-28 13:43:09.805	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:43:09.805	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "304402201ffab7fb92b4907c82b8655a95f59bc2cc2f385f93af8ed866a5641749df5d9e02207cc106b755a786563d585af439e251e834b9966a8301239e8df0db04991f961d"}
2025-04-28 13:43:09.805	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:43:09.805	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007AC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0FECB8AD0BE98124B9730A701238AE790DB57DC37304402201FFAB7FB92B4907C82B8655A95F59BC2CC2F385F93AF8ED866A5641749DF5D9E02207CC106B755A786563D585AF439E251E834B9966A8301239E8DF0DB04991F961D
2025-04-28 13:43:09.825	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6A83
2025-04-28 13:43:09.826	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:43:09.826	[31mERROR[0m	services/security.go:212	删除数据失败	{"err": "记录未找到 (状态码: 0x6A83)"}
2025-04-28 13:43:09.826	[31mERROR[0m	controllers/mpc.go:334	删除数据失败	{"error": "记录未找到 (状态码: 0x6A83)", "username": "test_user_1", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:09.826	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "21.751708ms"}
2025-04-28 13:43:10.828	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_2", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:10.828	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "71 B"}
2025-04-28 13:43:10.828	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_2", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 71}
2025-04-28 13:43:10.828	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:43:10.828	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "30450220134fe77b44f730a57ad32f44753cbc51ef847dae8343f9a176814c9ca2af1b8f022100b506966c7c059d8f93de1dd1e973916344ca58e393134f9d4faac22b25340216"}
2025-04-28 13:43:10.828	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:43:10.828	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007B6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EFECB8AD0BE98124B9730A701238AE790DB57DC3730450220134FE77B44F730A57AD32F44753CBC51EF847DAE8343F9A176814C9CA2AF1B8F022100B506966C7C059D8F93DE1DD1E973916344CA58E393134F9D4FAAC22B25340216
2025-04-28 13:43:10.848	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6A83
2025-04-28 13:43:10.848	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:43:10.848	[31mERROR[0m	services/security.go:212	删除数据失败	{"err": "记录未找到 (状态码: 0x6A83)"}
2025-04-28 13:43:10.848	[31mERROR[0m	controllers/mpc.go:334	删除数据失败	{"error": "记录未找到 (状态码: 0x6A83)", "username": "test_user_2", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:10.848	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "19.492ms"}
2025-04-28 13:43:11.851	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_3", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:11.852	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "72 B"}
2025-04-28 13:43:11.852	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_3", "addr": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37", "sig_len": 72}
2025-04-28 13:43:11.852	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:43:11.852	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "fecb8ad0be98124b9730a701238ae790db57dc37", "signature": "3046022100a3092a25a51a0b4ff7191349bdfdd234f1999b9ffa353b4b7b01e4ff5a089d0b022100bc44555998adb7b151abe265c492730a8e931814271aa9c77ca852275cfa95d6"}
2025-04-28 13:43:11.852	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:43:11.852	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007C3852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DFFECB8AD0BE98124B9730A701238AE790DB57DC373046022100A3092A25A51A0B4FF7191349BDFDD234F1999B9FFA353B4B7B01E4FF5A089D0B022100BC44555998ADB7B151ABE265C492730A8E931814271AA9C77CA852275CFA95D6
2025-04-28 13:43:11.872	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x6A83
2025-04-28 13:43:11.872	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 
2025-04-28 13:43:11.872	[31mERROR[0m	services/security.go:212	删除数据失败	{"err": "记录未找到 (状态码: 0x6A83)"}
2025-04-28 13:43:11.872	[31mERROR[0m	controllers/mpc.go:334	删除数据失败	{"error": "记录未找到 (状态码: 0x6A83)", "username": "test_user_3", "address": "0xFeCB8ad0Be98124b9730A701238Ae790dB57DC37"}
2025-04-28 13:43:11.872	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 500, "latency": "20.711584ms"}
2025-04-28 13:44:22.688	[34mINFO[0m	web-se/main.go:30	系统启动
2025-04-28 13:44:22.688	[34mINFO[0m	web-se/main.go:31	配置加载成功	{"port": "8080", "debug": true, "log_file": "web-se.log", "log_dir": "./logs"}
2025-04-28 13:44:22.688	[35mDEBUG[0m	web-se/main.go:41	Gin设置为调试模式
2025-04-28 13:44:22.689	[34mINFO[0m	web-se/main.go:71	服务器启动	{"port": "8080"}
2025-04-28 13:44:29.674	[34mINFO[0m	controllers/mpc.go:243	服务未初始化，尝试初始化
2025-04-28 13:44:29.675	[35mDEBUG[0m	services/security.go:30	初始化安全芯片服务	{"debug": true}
2025-04-28 13:44:29.675	[34mINFO[0m	services/security.go:35	创建卡片读取器
2025-04-28 13:44:29.686	[34mINFO[0m	services/security.go:43	连接读卡器
2025-04-28 13:44:29.686	[34mINFO[0m	seclient/cardreader.go:105	可用读卡器列表:
2025-04-28 13:44:29.686	[34mINFO[0m	seclient/cardreader.go:107	  0: GOODIX GSE SmartCard Reader 01
2025-04-28 13:44:29.686	[34mINFO[0m	seclient/cardreader.go:109	  >>> 自动选择了第一个读卡器
2025-04-28 13:44:29.686	[34mINFO[0m	seclient/cardreader.go:107	  1: GOODIX GSE SmartCard Reader
2025-04-28 13:44:29.686	[34mINFO[0m	seclient/cardreader.go:116	使用读卡器: GOODIX GSE SmartCard Reader 01
2025-04-28 13:44:29.744	[34mINFO[0m	seclient/cardreader.go:128	成功连接到读卡器，使用协议: 2
2025-04-28 13:44:29.744	[34mINFO[0m	services/security.go:51	选择安全芯片Applet
2025-04-28 13:44:29.744	[35mDEBUG[0m	seclient/commands.go:199	CPLC数据未缓存，尝试获取
2025-04-28 13:44:29.744	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:29.744	[34mINFO[0m	seclient/cardreader.go:179	命令: 80CA9F7F00
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 9F7F2A007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301
2025-04-28 13:44:29.746	[35mDEBUG[0m	seclient/commands.go:234	获取CPLC数据成功	{"CPLC标签": "9F7F", "CPLC长度": 42, "CPLC数据": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:144	=== 选择Applet命令 ===
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:145	APDU: 00A4040008A000000062CF0101
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:146	命令解析:
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:147	  CLA: 0x00 (ISO标准命令)
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:148	  INS: 0xA4 (选择指令)
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:149	  P1: 0x04 (按名称选择)
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:150	  P2: 0x00 (首次选择)
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:151	  Lc: 0x08 (AID长度)
2025-04-28 13:44:29.746	[34mINFO[0m	seclient/cardreader.go:152	  Data: A000000062CF0101 (AID)
2025-04-28 13:44:29.748	[34mINFO[0m	seclient/cardreader.go:166	=== 选择Applet响应 ===
2025-04-28 13:44:29.748	[34mINFO[0m	seclient/cardreader.go:167	响应数据: 9000
2025-04-28 13:44:29.748	[34mINFO[0m	seclient/cardreader.go:168	状态码: 0x9000 (成功)
2025-04-28 13:44:29.748	[34mINFO[0m	seclient/cardreader.go:169	数据: 
2025-04-28 13:44:29.748	[34mINFO[0m	seclient/cardreader.go:170	成功选择Applet, AID: A000000062CF0101
2025-04-28 13:44:29.748	[35mDEBUG[0m	services/security.go:59	安全芯片服务初始化完成
2025-04-28 13:44:29.748	[34mINFO[0m	controllers/mpc.go:41	安全芯片服务初始化成功
2025-04-28 13:44:29.748	[35mDEBUG[0m	services/mpc.go:29	初始化MPC服务
2025-04-28 13:44:29.748	[34mINFO[0m	controllers/mpc.go:45	MPC控制器初始化成功
2025-04-28 13:44:29.748	[34mINFO[0m	controllers/mpc.go:254	接收到获取CPLC信息请求	{"client_ip": "::1"}
2025-04-28 13:44:29.748	[35mDEBUG[0m	services/security.go:225	获取CPLC信息
2025-04-28 13:44:29.748	[35mDEBUG[0m	services/security.go:237	CPLC信息获取成功	{"长度": 42, "CPLC": "007f0001867f203100012313064a3765000200090000000900007f2b240009a537000000306100800301"}
2025-04-28 13:44:29.748	[34mINFO[0m	controllers/mpc.go:269	获取CPLC信息成功	{"cplc": "007F0001867F203100012313064A3765000200090000000900007F2B240009A537000000306100800301"}
2025-04-28 13:44:29.748	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "GET", "uri": "/api/v1/mpc/cplc", "ip": "::1", "status": 200, "latency": "73.779083ms"}
2025-04-28 13:44:29.750	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 1, "filename": "keygen_data_1.json", "username": "test_user_1"}
2025-04-28 13:44:29.750	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 1, "file": "keygen_data_1.json"}
2025-04-28 13:44:29.750	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_1.json"}
2025-04-28 13:44:29.750	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:44:29.750	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 1, "output": "temp/keygen_data_1.json"}
2025-04-28 13:44:29.750	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--threshold 1 --number-of-parties 3 --index 1 --output temp/keygen_data_1.json", "timeout": "1m0s"}
2025-04-28 13:44:30.752	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 2, "filename": "keygen_data_2.json", "username": "test_user_2"}
2025-04-28 13:44:30.752	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 2, "file": "keygen_data_2.json"}
2025-04-28 13:44:30.752	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_2.json"}
2025-04-28 13:44:30.752	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:44:30.752	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 2, "output": "temp/keygen_data_2.json"}
2025-04-28 13:44:30.752	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--threshold 1 --number-of-parties 3 --index 2 --output temp/keygen_data_2.json", "timeout": "1m0s"}
2025-04-28 13:44:31.754	[34mINFO[0m	controllers/mpc.go:78	接收到密钥生成请求	{"threshold": 1, "parties": 3, "index": 3, "filename": "keygen_data_3.json", "username": "test_user_3"}
2025-04-28 13:44:31.754	[35mDEBUG[0m	services/mpc.go:52	开始密钥生成	{"threshold": 1, "parties": 3, "index": 3, "file": "keygen_data_3.json"}
2025-04-28 13:44:31.754	[35mDEBUG[0m	services/mpc.go:66	临时文件路径	{"path": "temp/keygen_data_3.json"}
2025-04-28 13:44:31.754	[34mINFO[0m	services/mpc.go:76	执行密钥生成
2025-04-28 13:44:31.754	[34mINFO[0m	utils/command.go:56	开始密钥生成	{"command": "bin/gg20_keygen", "threshold": 1, "parties": 3, "index": 3, "output": "temp/keygen_data_3.json"}
2025-04-28 13:44:31.754	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_keygen", "args": "--threshold 1 --number-of-parties 3 --index 3 --output temp/keygen_data_3.json", "timeout": "1m0s"}
2025-04-28 13:44:32.036	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "2.285923709s"}
2025-04-28 13:44:32.036	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:44:32.036	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "281.07525ms"}
2025-04-28 13:44:32.036	[34mINFO[0m	utils/command.go:140	命令执行成功	{"stdout": "", "execution_time": "1.283461917s"}
2025-04-28 13:44:32.036	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:44:32.036	[34mINFO[0m	utils/command.go:69	密钥生成成功
2025-04-28 13:44:32.036	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:44:32.036	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:44:32.036	[34mINFO[0m	services/mpc.go:83	解析生成的密钥文件
2025-04-28 13:44:32.036	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "020efe4b1846031c99a88d343c35f8308148f7e999bd5c7d6275da3c79bd27fdd6"}
2025-04-28 13:44:32.036	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "020efe4b1846031c99a88d343c35f8308148f7e999bd5c7d6275da3c79bd27fdd6"}
2025-04-28 13:44:32.036	[35mDEBUG[0m	services/mpc.go:96	提取公钥	{"pubkey": "020efe4b1846031c99a88d343c35f8308148f7e999bd5c7d6275da3c79bd27fdd6"}
2025-04-28 13:44:32.036	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "020efe4b1846031c99a88d343c35f8308148f7e999bd5c7d6275da3c79bd27fdd6", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.036	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.036	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "020efe4b1846031c99a88d343c35f8308148f7e999bd5c7d6275da3c79bd27fdd6", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.036	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.036	[35mDEBUG[0m	utils/crypto.go:146	从公钥提取以太坊地址成功	{"public_key": "020efe4b1846031c99a88d343c35f8308148f7e999bd5c7d6275da3c79bd27fdd6", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.036	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35966}
2025-04-28 13:44:32.036	[34mINFO[0m	services/mpc.go:109	生成以太坊地址	{"addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.036	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35939}
2025-04-28 13:44:32.037	[35mDEBUG[0m	services/mpc.go:117	密钥文件大小	{"size": 35954}
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6271}
2025-04-28 13:44:32.043	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:44:32.043	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "104285677d080b17d52c64e5ac759d6dc1f9a0545d3cecd40cde44b9d54ff3a1"}
2025-04-28 13:44:32.043	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "fa7acb080576e9cce4f8..."}
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6299}
2025-04-28 13:44:32.043	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_3", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "key_len": 32}
2025-04-28 13:44:32.043	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "a86a26a9f4c5d95f36280dbd4a62dd91ee8a7109", "message": "104285677d080b17d52c64e5ac759d6dc1f9a0545d3cecd40cde44b9d54ff3a1"}
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000543852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DFA86A26A9F4C5D95F36280DBD4A62DD91EE8A7109104285677D080B17D52C64E5AC759D6DC1F9A0545D3CECD40CDE44B9D54FF3A1
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6277}
2025-04-28 13:44:32.043	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:44:32.043	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "1e8cb1cdebeafeb8226673e5868448f5b3a9a606ef658f775c5406c77e9ebb0b"}
2025-04-28 13:44:32.043	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "da5ebfec337628419335..."}
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6305}
2025-04-28 13:44:32.043	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_2", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "key_len": 32}
2025-04-28 13:44:32.043	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "a86a26a9f4c5d95f36280dbd4a62dd91ee8a7109", "message": "1e8cb1cdebeafeb8226673e5868448f5b3a9a606ef658f775c5406c77e9ebb0b"}
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/cardreader.go:179	命令: 80100000546CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EA86A26A9F4C5D95F36280DBD4A62DD91EE8A71091E8CB1CDEBEAFEB8226673E5868448F5B3A9A606EF658F775C5406C77E9EBB0B
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/mpc.go:125	压缩后数据大小	{"size": 6276}
2025-04-28 13:44:32.043	[34mINFO[0m	services/mpc.go:135	加密密钥数据
2025-04-28 13:44:32.043	[35mDEBUG[0m	utils/crypto.go:30	开始AES加密	{"key_hex": "dc41ce2e4cddfafefc1a4ab4b2a0380a8acf82362ff3de10791b3278a62cd0f7"}
2025-04-28 13:44:32.043	[35mDEBUG[0m	utils/crypto.go:60	AES加密完成	{"ciphertext_preview": "6b27687674ba2c64c540..."}
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/mpc.go:141	加密后数据大小	{"size": 6304}
2025-04-28 13:44:32.043	[34mINFO[0m	services/mpc.go:144	存储密钥到安全芯片
2025-04-28 13:44:32.043	[35mDEBUG[0m	services/security.go:83	存储数据	{"username": "test_user_1", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "key_len": 32}
2025-04-28 13:44:32.043	[34mINFO[0m	services/security.go:116	向安全芯片写入数据
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/commands.go:29	❕存储数据到安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "a86a26a9f4c5d95f36280dbd4a62dd91ee8a7109", "message": "dc41ce2e4cddfafefc1a4ab4b2a0380a8acf82362ff3de10791b3278a62cd0f7"}
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:32.043	[34mINFO[0m	seclient/cardreader.go:179	命令: 8010000054C71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0A86A26A9F4C5D95F36280DBD4A62DD91EE8A7109DC41CE2E4CDDFAFEFC1A4AB4B2A0380A8ACF82362FF3DE10791B3278A62CD0F7
2025-04-28 13:44:32.074	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:32.074	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0708
2025-04-28 13:44:32.074	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:44:32.074	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 7, "记录总数": 8}
2025-04-28 13:44:32.074	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.074	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "username": "test_user_3", "encrypted_key_length": 6299}
2025-04-28 13:44:32.074	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "320.56275ms"}
2025-04-28 13:44:32.107	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:32.107	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0809
2025-04-28 13:44:32.107	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:44:32.107	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 8, "记录总数": 9}
2025-04-28 13:44:32.107	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.108	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "username": "test_user_2", "encrypted_key_length": 6305}
2025-04-28 13:44:32.108	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "1.355855083s"}
2025-04-28 13:44:32.140	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:32.140	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 090A
2025-04-28 13:44:32.140	[34mINFO[0m	seclient/commands.go:65	❕存储数据成功❕	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:44:32.140	[35mDEBUG[0m	services/security.go:123	数据存储成功	{"记录索引": 9, "记录总数": 10}
2025-04-28 13:44:32.140	[35mDEBUG[0m	services/mpc.go:150	密钥生成完成	{"addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.140	[34mINFO[0m	controllers/mpc.go:105	密钥生成成功	{"address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "username": "test_user_1", "encrypted_key_length": 6304}
2025-04-28 13:44:32.140	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/keygen", "ip": "::1", "status": 200, "latency": "2.390307042s"}
2025-04-28 13:44:32.757	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_1.json", "username": "test_user_1", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.757	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "70 B"}
2025-04-28 13:44:32.757	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "file": "sign_data_1.json"}
2025-04-28 13:44:32.757	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_1.json"}
2025-04-28 13:44:32.757	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:44:32.757	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_1", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "sig_len": 70}
2025-04-28 13:44:32.757	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:44:32.757	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "a86a26a9f4c5d95f36280dbd4a62dd91ee8a7109", "signature": "304402203d24aa7ae639953235ca3d964faca4256668368c1b69d71b0fda98e45f5df28d02202aff1d0fcfdc40a78a100ef6f09a4929c3d43bd2cb390a3305ace6cd12bff198"}
2025-04-28 13:44:32.757	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:32.757	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007AC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0A86A26A9F4C5D95F36280DBD4A62DD91EE8A7109304402203D24AA7AE639953235CA3D964FACA4256668368C1B69D71B0FDA98E45F5DF28D02202AFF1D0FCFDC40A78A100EF6F09A4929C3D43BD2CB390A3305ACE6CD12BFF198
2025-04-28 13:44:32.773	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:32.773	[34mINFO[0m	seclient/cardreader.go:191	响应数据: DC41CE2E4CDDFAFEFC1A4AB4B2A0380A8ACF82362FF3DE10791B3278A62CD0F7
2025-04-28 13:44:32.774	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:44:32.774	[34mINFO[0m	seclient/commands.go:122	数据: dc41ce2e4cddfafefc1a4ab4b2a0380a8acf82362ff3de10791b3278a62cd0f7
2025-04-28 13:44:32.774	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:44:32.774	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:44:32.774	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "dc41ce2e4cddfafefc1a4ab4b2a0380a8acf82362ff3de10791b3278a62cd0f7", "ciphertext_preview": "6b27687674ba2c64c540..."}
2025-04-28 13:44:32.774	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:44:32.774	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6276}
2025-04-28 13:44:32.774	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35954}
2025-04-28 13:44:32.775	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:44:32.775	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "hello", "local_share": "temp/sign_data_1.json"}
2025-04-28 13:44:32.775	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "-parties 1,2 --data-to-sign \"hello\" --local-share temp/sign_data_1.json", "timeout": "1m0s"}
2025-04-28 13:44:32.800	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "24.133ms"}
2025-04-28 13:44:32.800	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:44:32.800	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:44:32.800	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_1", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:32.800	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "43.525334ms"}
2025-04-28 13:44:33.759	[34mINFO[0m	controllers/mpc.go:188	接收到签名请求	{"parties": "1,2", "data": "hello", "filename": "sign_data_2.json", "username": "test_user_2", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:33.759	[35mDEBUG[0m	controllers/mpc.go:194	签名请求详情	{"encrypted_key_length": "6.2 KB", "signature_length": "71 B"}
2025-04-28 13:44:33.759	[35mDEBUG[0m	services/mpc.go:171	开始消息签名	{"parties": "1,2", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "file": "sign_data_2.json"}
2025-04-28 13:44:33.759	[35mDEBUG[0m	services/mpc.go:190	临时文件路径	{"path": "temp/sign_data_2.json"}
2025-04-28 13:44:33.759	[34mINFO[0m	services/mpc.go:200	从安全芯片读取密钥
2025-04-28 13:44:33.759	[35mDEBUG[0m	services/security.go:137	读取数据	{"username": "test_user_2", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "sig_len": 71}
2025-04-28 13:44:33.759	[34mINFO[0m	services/security.go:163	从安全芯片读取数据
2025-04-28 13:44:33.759	[34mINFO[0m	seclient/commands.go:94	❕读取数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "a86a26a9f4c5d95f36280dbd4a62dd91ee8a7109", "signature": "3045022100f55e041a255170b9f168540b1b5a55e70d0e58822f3fa449b9d90c9568d48ad50220672aa68bbafb1754b07b907e2a0d05ef951c70655212f16a7d629a0a1895ceda"}
2025-04-28 13:44:33.759	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:33.759	[34mINFO[0m	seclient/cardreader.go:179	命令: 802000007B6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EA86A26A9F4C5D95F36280DBD4A62DD91EE8A71093045022100F55E041A255170B9F168540B1B5A55E70D0E58822F3FA449B9D90C9568D48AD50220672AA68BBAFB1754B07B907E2A0D05EF951C70655212F16A7D629A0A1895CEDA
2025-04-28 13:44:33.776	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:33.776	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 1E8CB1CDEBEAFEB8226673E5868448F5B3A9A606EF658F775C5406C77E9EBB0B
2025-04-28 13:44:33.776	[34mINFO[0m	seclient/commands.go:121	❕读取数据成功❕
2025-04-28 13:44:33.776	[34mINFO[0m	seclient/commands.go:122	数据: 1e8cb1cdebeafeb8226673e5868448f5b3a9a606ef658f775c5406c77e9ebb0b
2025-04-28 13:44:33.776	[35mDEBUG[0m	services/security.go:170	数据读取成功	{"数据长度": 32}
2025-04-28 13:44:33.776	[34mINFO[0m	services/mpc.go:208	解密密钥数据
2025-04-28 13:44:33.776	[35mDEBUG[0m	utils/crypto.go:76	开始AES解密	{"key_hex": "1e8cb1cdebeafeb8226673e5868448f5b3a9a606ef658f775c5406c77e9ebb0b", "ciphertext_preview": "da5ebfec337628419335..."}
2025-04-28 13:44:33.776	[35mDEBUG[0m	utils/crypto.go:106	AES解密成功
2025-04-28 13:44:33.776	[35mDEBUG[0m	services/mpc.go:214	解密后数据大小	{"size": 6277}
2025-04-28 13:44:33.777	[35mDEBUG[0m	services/mpc.go:222	解压后数据大小	{"size": 35966}
2025-04-28 13:44:33.777	[34mINFO[0m	services/mpc.go:231	执行MPC签名
2025-04-28 13:44:33.777	[34mINFO[0m	utils/command.go:79	开始签名操作	{"command": "bin/gg20_signing", "parties": "1,2", "data": "hello", "local_share": "temp/sign_data_2.json"}
2025-04-28 13:44:33.777	[34mINFO[0m	utils/command.go:132	开始执行命令	{"command": "bin/gg20_signing", "args": "-parties 1,2 --data-to-sign \"hello\" --local-share temp/sign_data_2.json", "timeout": "1m0s"}
2025-04-28 13:44:33.794	[31mERROR[0m	utils/command.go:147	命令执行失败	{"error": "exit status 1", "stdout": "", "stderr": "error: Invalid value for '--parties <parties>...': invalid digit found in string\n", "execution_time": "16.409583ms"}
2025-04-28 13:44:33.794	[31mERROR[0m	utils/command.go:87	签名操作失败	{"error": "exit status 1"}
2025-04-28 13:44:33.794	[31mERROR[0m	services/mpc.go:234	签名失败	{"error": "exit status 1"}
2025-04-28 13:44:33.794	[31mERROR[0m	controllers/mpc.go:210	签名失败	{"error": "签名失败: exit status 1", "username": "test_user_2", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:33.794	[31mERROR[0m	middleware/logger.go:46	API请求	{"method": "POST", "uri": "/api/v1/mpc/sign", "ip": "::1", "status": 500, "latency": "35.856792ms"}
2025-04-28 13:44:34.761	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_1", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:34.761	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "71 B"}
2025-04-28 13:44:34.761	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_1", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "sig_len": 71}
2025-04-28 13:44:34.761	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:44:34.761	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "c71a9a78e4dabef06705f4530273cab443ce1a44987e36e052345f4fc76ba5a0", "addr": "a86a26a9f4c5d95f36280dbd4a62dd91ee8a7109", "signature": "3045022100d4d2ef3c7260a5af460da6a992d0787c0bd0b0c9eeebe032b6dae2f47f691ebf022015f8b9e605d5ef7cc04ae7ecae381ad5089501c56e59a6d0adbf72c3b33306ba"}
2025-04-28 13:44:34.761	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:34.761	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007BC71A9A78E4DABEF06705F4530273CAB443CE1A44987E36E052345F4FC76BA5A0A86A26A9F4C5D95F36280DBD4A62DD91EE8A71093045022100D4D2EF3C7260A5AF460DA6A992D0787C0BD0B0C9EEEBE032B6DAE2F47F691EBF022015F8B9E605D5EF7CC04AE7ECAE381AD5089501C56E59A6D0ADBF72C3B33306BA
2025-04-28 13:44:34.791	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:34.791	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0909
2025-04-28 13:44:34.791	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 9, "剩余记录数": 9}
2025-04-28 13:44:34.791	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 9, "记录总数": 9}
2025-04-28 13:44:34.792	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_1", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:34.792	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "31.2045ms"}
2025-04-28 13:44:35.795	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_2", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:35.795	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "70 B"}
2025-04-28 13:44:35.795	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_2", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "sig_len": 70}
2025-04-28 13:44:35.795	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:44:35.795	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "6cc3afa565036c8ec65cef4778501e6e4b516104fa3eba22e7011a82aef6e88e", "addr": "a86a26a9f4c5d95f36280dbd4a62dd91ee8a7109", "signature": "304402206904a4e8b2bbc242aa284a00aa7e62f9365795ac947cebc28ed04044381a85ee022044c63702cdaaef3abbe8165436265aece7591f082a3a69b1fdf0517f9df70dd8"}
2025-04-28 13:44:35.795	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:35.795	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007A6CC3AFA565036C8EC65CEF4778501E6E4B516104FA3EBA22E7011A82AEF6E88EA86A26A9F4C5D95F36280DBD4A62DD91EE8A7109304402206904A4E8B2BBC242AA284A00AA7E62F9365795AC947CEBC28ED04044381A85EE022044C63702CDAAEF3ABBE8165436265AECE7591F082A3A69B1FDF0517F9DF70DD8
2025-04-28 13:44:35.825	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:35.825	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0808
2025-04-28 13:44:35.825	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 8, "剩余记录数": 8}
2025-04-28 13:44:35.825	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 8, "记录总数": 8}
2025-04-28 13:44:35.825	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_2", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:35.825	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "30.680167ms"}
2025-04-28 13:44:36.828	[34mINFO[0m	controllers/mpc.go:325	接收到删除数据请求	{"username": "test_user_3", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:36.828	[35mDEBUG[0m	controllers/mpc.go:328	删除请求详情	{"signature_length": "71 B"}
2025-04-28 13:44:36.829	[35mDEBUG[0m	services/security.go:183	删除数据	{"username": "test_user_3", "addr": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109", "sig_len": 71}
2025-04-28 13:44:36.829	[34mINFO[0m	services/security.go:209	从安全芯片删除数据
2025-04-28 13:44:36.829	[34mINFO[0m	seclient/commands.go:148	❕删除数据从安全芯片❕	{"username": "3852e3cce10472fc2dd095d6ed866b45d042757819462fa920ab240b462ff8df", "addr": "a86a26a9f4c5d95f36280dbd4a62dd91ee8a7109", "signature": "3045022100f54a753d0c9bf743f294daf3368cc1ec4773f46cf80744552dab326b550bf7f302204e354eefe9a04ed6636e48747949d17eab1bf74871e12d7985200e8df8204854"}
2025-04-28 13:44:36.829	[34mINFO[0m	seclient/cardreader.go:178	=== 发送APDU命令 ===
2025-04-28 13:44:36.829	[34mINFO[0m	seclient/cardreader.go:179	命令: 803000007B3852E3CCE10472FC2DD095D6ED866B45D042757819462FA920AB240B462FF8DFA86A26A9F4C5D95F36280DBD4A62DD91EE8A71093045022100F54A753D0C9BF743F294DAF3368CC1EC4773F46CF80744552DAB326B550BF7F302204E354EEFE9A04ED6636E48747949D17EAB1BF74871E12D7985200E8DF8204854
2025-04-28 13:44:36.859	[34mINFO[0m	seclient/cardreader.go:190	响应状态码: 0x9000
2025-04-28 13:44:36.859	[34mINFO[0m	seclient/cardreader.go:191	响应数据: 0707
2025-04-28 13:44:36.860	[34mINFO[0m	seclient/commands.go:183	❕删除数据成功❕	{"记录索引": 7, "剩余记录数": 7}
2025-04-28 13:44:36.860	[35mDEBUG[0m	services/security.go:216	数据删除成功	{"记录索引": 7, "记录总数": 7}
2025-04-28 13:44:36.860	[34mINFO[0m	controllers/mpc.go:345	删除数据成功	{"username": "test_user_3", "address": "0xa86A26A9f4C5d95f36280DBD4a62dd91Ee8a7109"}
2025-04-28 13:44:36.860	[34mINFO[0m	middleware/logger.go:50	API请求	{"method": "POST", "uri": "/api/v1/mpc/delete", "ip": "::1", "status": 200, "latency": "31.522084ms"}
